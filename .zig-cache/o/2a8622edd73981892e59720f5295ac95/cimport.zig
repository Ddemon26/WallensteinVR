pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const XrVersion = u64;
pub const XrFlags64 = u64;
pub const XrSystemId = u64;
pub const XrBool32 = u32;
pub const XrPath = u64;
pub const XrTime = i64;
pub const XrDuration = i64;
pub const struct_XrInstance_T = opaque {};
pub const XrInstance = ?*struct_XrInstance_T;
pub const struct_XrSession_T = opaque {};
pub const XrSession = ?*struct_XrSession_T;
pub const struct_XrSpace_T = opaque {};
pub const XrSpace = ?*struct_XrSpace_T;
pub const struct_XrAction_T = opaque {};
pub const XrAction = ?*struct_XrAction_T;
pub const struct_XrSwapchain_T = opaque {};
pub const XrSwapchain = ?*struct_XrSwapchain_T;
pub const struct_XrActionSet_T = opaque {};
pub const XrActionSet = ?*struct_XrActionSet_T;
pub const XR_SUCCESS: c_int = 0;
pub const XR_TIMEOUT_EXPIRED: c_int = 1;
pub const XR_SESSION_LOSS_PENDING: c_int = 3;
pub const XR_EVENT_UNAVAILABLE: c_int = 4;
pub const XR_SPACE_BOUNDS_UNAVAILABLE: c_int = 7;
pub const XR_SESSION_NOT_FOCUSED: c_int = 8;
pub const XR_FRAME_DISCARDED: c_int = 9;
pub const XR_ERROR_VALIDATION_FAILURE: c_int = -1;
pub const XR_ERROR_RUNTIME_FAILURE: c_int = -2;
pub const XR_ERROR_OUT_OF_MEMORY: c_int = -3;
pub const XR_ERROR_API_VERSION_UNSUPPORTED: c_int = -4;
pub const XR_ERROR_INITIALIZATION_FAILED: c_int = -6;
pub const XR_ERROR_FUNCTION_UNSUPPORTED: c_int = -7;
pub const XR_ERROR_FEATURE_UNSUPPORTED: c_int = -8;
pub const XR_ERROR_EXTENSION_NOT_PRESENT: c_int = -9;
pub const XR_ERROR_LIMIT_REACHED: c_int = -10;
pub const XR_ERROR_SIZE_INSUFFICIENT: c_int = -11;
pub const XR_ERROR_HANDLE_INVALID: c_int = -12;
pub const XR_ERROR_INSTANCE_LOST: c_int = -13;
pub const XR_ERROR_SESSION_RUNNING: c_int = -14;
pub const XR_ERROR_SESSION_NOT_RUNNING: c_int = -16;
pub const XR_ERROR_SESSION_LOST: c_int = -17;
pub const XR_ERROR_SYSTEM_INVALID: c_int = -18;
pub const XR_ERROR_PATH_INVALID: c_int = -19;
pub const XR_ERROR_PATH_COUNT_EXCEEDED: c_int = -20;
pub const XR_ERROR_PATH_FORMAT_INVALID: c_int = -21;
pub const XR_ERROR_PATH_UNSUPPORTED: c_int = -22;
pub const XR_ERROR_LAYER_INVALID: c_int = -23;
pub const XR_ERROR_LAYER_LIMIT_EXCEEDED: c_int = -24;
pub const XR_ERROR_SWAPCHAIN_RECT_INVALID: c_int = -25;
pub const XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED: c_int = -26;
pub const XR_ERROR_ACTION_TYPE_MISMATCH: c_int = -27;
pub const XR_ERROR_SESSION_NOT_READY: c_int = -28;
pub const XR_ERROR_SESSION_NOT_STOPPING: c_int = -29;
pub const XR_ERROR_TIME_INVALID: c_int = -30;
pub const XR_ERROR_REFERENCE_SPACE_UNSUPPORTED: c_int = -31;
pub const XR_ERROR_FILE_ACCESS_ERROR: c_int = -32;
pub const XR_ERROR_FILE_CONTENTS_INVALID: c_int = -33;
pub const XR_ERROR_FORM_FACTOR_UNSUPPORTED: c_int = -34;
pub const XR_ERROR_FORM_FACTOR_UNAVAILABLE: c_int = -35;
pub const XR_ERROR_API_LAYER_NOT_PRESENT: c_int = -36;
pub const XR_ERROR_CALL_ORDER_INVALID: c_int = -37;
pub const XR_ERROR_GRAPHICS_DEVICE_INVALID: c_int = -38;
pub const XR_ERROR_POSE_INVALID: c_int = -39;
pub const XR_ERROR_INDEX_OUT_OF_RANGE: c_int = -40;
pub const XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED: c_int = -41;
pub const XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED: c_int = -42;
pub const XR_ERROR_NAME_DUPLICATED: c_int = -44;
pub const XR_ERROR_NAME_INVALID: c_int = -45;
pub const XR_ERROR_ACTIONSET_NOT_ATTACHED: c_int = -46;
pub const XR_ERROR_ACTIONSETS_ALREADY_ATTACHED: c_int = -47;
pub const XR_ERROR_LOCALIZED_NAME_DUPLICATED: c_int = -48;
pub const XR_ERROR_LOCALIZED_NAME_INVALID: c_int = -49;
pub const XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING: c_int = -50;
pub const XR_ERROR_RUNTIME_UNAVAILABLE: c_int = -51;
pub const XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED: c_int = -1000710001;
pub const XR_ERROR_PERMISSION_INSUFFICIENT: c_int = -1000710000;
pub const XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR: c_int = -1000003000;
pub const XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR: c_int = -1000003001;
pub const XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT: c_int = -1000039001;
pub const XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT: c_int = -1000053000;
pub const XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT: c_int = -1000055000;
pub const XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT: c_int = -1000066000;
pub const XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT: c_int = -1000097000;
pub const XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT: c_int = -1000097001;
pub const XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT: c_int = -1000097002;
pub const XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT: c_int = -1000097003;
pub const XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT: c_int = -1000097004;
pub const XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT: c_int = -1000097005;
pub const XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB: c_int = -1000101000;
pub const XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB: c_int = -1000108000;
pub const XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB: c_int = -1000113000;
pub const XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB: c_int = -1000113001;
pub const XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB: c_int = -1000113002;
pub const XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB: c_int = -1000113003;
pub const XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB: c_int = -1000118000;
pub const XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB: c_int = -1000118001;
pub const XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB: c_int = -1000118002;
pub const XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB: c_int = -1000118003;
pub const XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB: c_int = -1000118004;
pub const XR_ERROR_UNKNOWN_PASSTHROUGH_FB: c_int = -1000118050;
pub const XR_ERROR_RENDER_MODEL_KEY_INVALID_FB: c_int = -1000119000;
pub const XR_RENDER_MODEL_UNAVAILABLE_FB: c_int = 1000119020;
pub const XR_ERROR_MARKER_NOT_TRACKED_VARJO: c_int = -1000124000;
pub const XR_ERROR_MARKER_ID_INVALID_VARJO: c_int = -1000124001;
pub const XR_ERROR_MARKER_DETECTOR_PERMISSION_DENIED_ML: c_int = -1000138000;
pub const XR_ERROR_MARKER_DETECTOR_LOCATE_FAILED_ML: c_int = -1000138001;
pub const XR_ERROR_MARKER_DETECTOR_INVALID_DATA_QUERY_ML: c_int = -1000138002;
pub const XR_ERROR_MARKER_DETECTOR_INVALID_CREATE_INFO_ML: c_int = -1000138003;
pub const XR_ERROR_MARKER_INVALID_ML: c_int = -1000138004;
pub const XR_ERROR_LOCALIZATION_MAP_INCOMPATIBLE_ML: c_int = -1000139000;
pub const XR_ERROR_LOCALIZATION_MAP_UNAVAILABLE_ML: c_int = -1000139001;
pub const XR_ERROR_LOCALIZATION_MAP_FAIL_ML: c_int = -1000139002;
pub const XR_ERROR_LOCALIZATION_MAP_IMPORT_EXPORT_PERMISSION_DENIED_ML: c_int = -1000139003;
pub const XR_ERROR_LOCALIZATION_MAP_PERMISSION_DENIED_ML: c_int = -1000139004;
pub const XR_ERROR_LOCALIZATION_MAP_ALREADY_EXISTS_ML: c_int = -1000139005;
pub const XR_ERROR_LOCALIZATION_MAP_CANNOT_EXPORT_CLOUD_MAP_ML: c_int = -1000139006;
pub const XR_ERROR_SPATIAL_ANCHORS_PERMISSION_DENIED_ML: c_int = -1000140000;
pub const XR_ERROR_SPATIAL_ANCHORS_NOT_LOCALIZED_ML: c_int = -1000140001;
pub const XR_ERROR_SPATIAL_ANCHORS_OUT_OF_MAP_BOUNDS_ML: c_int = -1000140002;
pub const XR_ERROR_SPATIAL_ANCHORS_SPACE_NOT_LOCATABLE_ML: c_int = -1000140003;
pub const XR_ERROR_SPATIAL_ANCHORS_ANCHOR_NOT_FOUND_ML: c_int = -1000141000;
pub const XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT: c_int = -1000142001;
pub const XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT: c_int = -1000142002;
pub const XR_SCENE_MARKER_DATA_NOT_STRING_MSFT: c_int = 1000147000;
pub const XR_ERROR_SPACE_MAPPING_INSUFFICIENT_FB: c_int = -1000169000;
pub const XR_ERROR_SPACE_LOCALIZATION_FAILED_FB: c_int = -1000169001;
pub const XR_ERROR_SPACE_NETWORK_TIMEOUT_FB: c_int = -1000169002;
pub const XR_ERROR_SPACE_NETWORK_REQUEST_FAILED_FB: c_int = -1000169003;
pub const XR_ERROR_SPACE_CLOUD_STORAGE_DISABLED_FB: c_int = -1000169004;
pub const XR_ERROR_PASSTHROUGH_COLOR_LUT_BUFFER_SIZE_MISMATCH_META: c_int = -1000266000;
pub const XR_ENVIRONMENT_DEPTH_NOT_AVAILABLE_META: c_int = 1000291000;
pub const XR_ERROR_HINT_ALREADY_SET_QCOM: c_int = -1000306000;
pub const XR_ERROR_NOT_AN_ANCHOR_HTC: c_int = -1000319000;
pub const XR_ERROR_SPACE_NOT_LOCATABLE_EXT: c_int = -1000429000;
pub const XR_ERROR_PLANE_DETECTION_PERMISSION_DENIED_EXT: c_int = -1000429001;
pub const XR_ERROR_FUTURE_PENDING_EXT: c_int = -1000469001;
pub const XR_ERROR_FUTURE_INVALID_EXT: c_int = -1000469002;
pub const XR_ERROR_SYSTEM_NOTIFICATION_PERMISSION_DENIED_ML: c_int = -1000473000;
pub const XR_ERROR_SYSTEM_NOTIFICATION_INCOMPATIBLE_SKU_ML: c_int = -1000473001;
pub const XR_ERROR_WORLD_MESH_DETECTOR_PERMISSION_DENIED_ML: c_int = -1000474000;
pub const XR_ERROR_WORLD_MESH_DETECTOR_SPACE_NOT_LOCATABLE_ML: c_int = -1000474001;
pub const XR_ERROR_FACIAL_EXPRESSION_PERMISSION_DENIED_ML: c_int = 1000482000;
pub const XR_ERROR_COLOCATION_DISCOVERY_NETWORK_FAILED_META: c_int = -1000571001;
pub const XR_ERROR_COLOCATION_DISCOVERY_NO_DISCOVERY_METHOD_META: c_int = -1000571002;
pub const XR_COLOCATION_DISCOVERY_ALREADY_ADVERTISING_META: c_int = 1000571003;
pub const XR_COLOCATION_DISCOVERY_ALREADY_DISCOVERING_META: c_int = 1000571004;
pub const XR_ERROR_SPACE_GROUP_NOT_FOUND_META: c_int = -1000572002;
pub const XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED_KHR: c_int = -1000710001;
pub const XR_ERROR_PERMISSION_INSUFFICIENT_KHR: c_int = -1000710000;
pub const XR_RESULT_MAX_ENUM: c_int = 2147483647;
pub const enum_XrResult = c_int;
pub const XrResult = enum_XrResult;
pub const XR_TYPE_UNKNOWN: c_int = 0;
pub const XR_TYPE_API_LAYER_PROPERTIES: c_int = 1;
pub const XR_TYPE_EXTENSION_PROPERTIES: c_int = 2;
pub const XR_TYPE_INSTANCE_CREATE_INFO: c_int = 3;
pub const XR_TYPE_SYSTEM_GET_INFO: c_int = 4;
pub const XR_TYPE_SYSTEM_PROPERTIES: c_int = 5;
pub const XR_TYPE_VIEW_LOCATE_INFO: c_int = 6;
pub const XR_TYPE_VIEW: c_int = 7;
pub const XR_TYPE_SESSION_CREATE_INFO: c_int = 8;
pub const XR_TYPE_SWAPCHAIN_CREATE_INFO: c_int = 9;
pub const XR_TYPE_SESSION_BEGIN_INFO: c_int = 10;
pub const XR_TYPE_VIEW_STATE: c_int = 11;
pub const XR_TYPE_FRAME_END_INFO: c_int = 12;
pub const XR_TYPE_HAPTIC_VIBRATION: c_int = 13;
pub const XR_TYPE_EVENT_DATA_BUFFER: c_int = 16;
pub const XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING: c_int = 17;
pub const XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED: c_int = 18;
pub const XR_TYPE_ACTION_STATE_BOOLEAN: c_int = 23;
pub const XR_TYPE_ACTION_STATE_FLOAT: c_int = 24;
pub const XR_TYPE_ACTION_STATE_VECTOR2F: c_int = 25;
pub const XR_TYPE_ACTION_STATE_POSE: c_int = 27;
pub const XR_TYPE_ACTION_SET_CREATE_INFO: c_int = 28;
pub const XR_TYPE_ACTION_CREATE_INFO: c_int = 29;
pub const XR_TYPE_INSTANCE_PROPERTIES: c_int = 32;
pub const XR_TYPE_FRAME_WAIT_INFO: c_int = 33;
pub const XR_TYPE_COMPOSITION_LAYER_PROJECTION: c_int = 35;
pub const XR_TYPE_COMPOSITION_LAYER_QUAD: c_int = 36;
pub const XR_TYPE_REFERENCE_SPACE_CREATE_INFO: c_int = 37;
pub const XR_TYPE_ACTION_SPACE_CREATE_INFO: c_int = 38;
pub const XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING: c_int = 40;
pub const XR_TYPE_VIEW_CONFIGURATION_VIEW: c_int = 41;
pub const XR_TYPE_SPACE_LOCATION: c_int = 42;
pub const XR_TYPE_SPACE_VELOCITY: c_int = 43;
pub const XR_TYPE_FRAME_STATE: c_int = 44;
pub const XR_TYPE_VIEW_CONFIGURATION_PROPERTIES: c_int = 45;
pub const XR_TYPE_FRAME_BEGIN_INFO: c_int = 46;
pub const XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW: c_int = 48;
pub const XR_TYPE_EVENT_DATA_EVENTS_LOST: c_int = 49;
pub const XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING: c_int = 51;
pub const XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED: c_int = 52;
pub const XR_TYPE_INTERACTION_PROFILE_STATE: c_int = 53;
pub const XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO: c_int = 55;
pub const XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO: c_int = 56;
pub const XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO: c_int = 57;
pub const XR_TYPE_ACTION_STATE_GET_INFO: c_int = 58;
pub const XR_TYPE_HAPTIC_ACTION_INFO: c_int = 59;
pub const XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO: c_int = 60;
pub const XR_TYPE_ACTIONS_SYNC_INFO: c_int = 61;
pub const XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO: c_int = 62;
pub const XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO: c_int = 63;
pub const XR_TYPE_SPACES_LOCATE_INFO: c_int = 1000471000;
pub const XR_TYPE_SPACE_LOCATIONS: c_int = 1000471001;
pub const XR_TYPE_SPACE_VELOCITIES: c_int = 1000471002;
pub const XR_TYPE_COMPOSITION_LAYER_CUBE_KHR: c_int = 1000006000;
pub const XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR: c_int = 1000008000;
pub const XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR: c_int = 1000010000;
pub const XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR: c_int = 1000014000;
pub const XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT: c_int = 1000015000;
pub const XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR: c_int = 1000017000;
pub const XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR: c_int = 1000018000;
pub const XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: c_int = 1000019000;
pub const XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: c_int = 1000019001;
pub const XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: c_int = 1000019002;
pub const XR_TYPE_DEBUG_UTILS_LABEL_EXT: c_int = 1000019003;
pub const XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR: c_int = 1000023000;
pub const XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR: c_int = 1000023001;
pub const XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR: c_int = 1000023002;
pub const XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR: c_int = 1000023003;
pub const XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR: c_int = 1000023004;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR: c_int = 1000023005;
pub const XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR: c_int = 1000024001;
pub const XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR: c_int = 1000024002;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR: c_int = 1000024003;
pub const XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR: c_int = 1000025000;
pub const XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR: c_int = 1000025001;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR: c_int = 1000025002;
pub const XR_TYPE_GRAPHICS_BINDING_D3D11_KHR: c_int = 1000027000;
pub const XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR: c_int = 1000027001;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR: c_int = 1000027002;
pub const XR_TYPE_GRAPHICS_BINDING_D3D12_KHR: c_int = 1000028000;
pub const XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR: c_int = 1000028001;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR: c_int = 1000028002;
pub const XR_TYPE_GRAPHICS_BINDING_METAL_KHR: c_int = 1000029000;
pub const XR_TYPE_SWAPCHAIN_IMAGE_METAL_KHR: c_int = 1000029001;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_METAL_KHR: c_int = 1000029002;
pub const XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT: c_int = 1000030000;
pub const XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT: c_int = 1000030001;
pub const XR_TYPE_VISIBILITY_MASK_KHR: c_int = 1000031000;
pub const XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR: c_int = 1000031001;
pub const XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX: c_int = 1000033000;
pub const XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX: c_int = 1000033003;
pub const XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR: c_int = 1000034000;
pub const XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT: c_int = 1000039000;
pub const XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT: c_int = 1000039001;
pub const XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB: c_int = 1000040000;
pub const XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB: c_int = 1000041001;
pub const XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT: c_int = 1000046000;
pub const XR_TYPE_GRAPHICS_BINDING_EGL_MNDX: c_int = 1000048004;
pub const XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT: c_int = 1000049000;
pub const XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT: c_int = 1000049001;
pub const XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT: c_int = 1000049002;
pub const XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT: c_int = 1000049003;
pub const XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT: c_int = 1000051000;
pub const XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT: c_int = 1000051001;
pub const XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT: c_int = 1000051002;
pub const XR_TYPE_HAND_JOINT_LOCATIONS_EXT: c_int = 1000051003;
pub const XR_TYPE_HAND_JOINT_VELOCITIES_EXT: c_int = 1000051004;
pub const XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT: c_int = 1000052000;
pub const XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT: c_int = 1000052001;
pub const XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT: c_int = 1000052002;
pub const XR_TYPE_HAND_MESH_MSFT: c_int = 1000052003;
pub const XR_TYPE_HAND_POSE_TYPE_INFO_MSFT: c_int = 1000052004;
pub const XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT: c_int = 1000053000;
pub const XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT: c_int = 1000053001;
pub const XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT: c_int = 1000053002;
pub const XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT: c_int = 1000053003;
pub const XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT: c_int = 1000053004;
pub const XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT: c_int = 1000053005;
pub const XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT: c_int = 1000055000;
pub const XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT: c_int = 1000055001;
pub const XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT: c_int = 1000055002;
pub const XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT: c_int = 1000055003;
pub const XR_TYPE_CONTROLLER_MODEL_STATE_MSFT: c_int = 1000055004;
pub const XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC: c_int = 1000059000;
pub const XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT: c_int = 1000063000;
pub const XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT: c_int = 1000066000;
pub const XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT: c_int = 1000066001;
pub const XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB: c_int = 1000070000;
pub const XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB: c_int = 1000072000;
pub const XR_TYPE_BODY_TRACKER_CREATE_INFO_FB: c_int = 1000076001;
pub const XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB: c_int = 1000076002;
pub const XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB: c_int = 1000076004;
pub const XR_TYPE_BODY_JOINT_LOCATIONS_FB: c_int = 1000076005;
pub const XR_TYPE_BODY_SKELETON_FB: c_int = 1000076006;
pub const XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT: c_int = 1000078000;
pub const XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE: c_int = 1000079000;
pub const XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT: c_int = 1000080000;
pub const XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR: c_int = 1000089000;
pub const XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR: c_int = 1000090000;
pub const XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR: c_int = 1000090001;
pub const XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR: c_int = 1000090003;
pub const XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR: c_int = 1000091000;
pub const XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT: c_int = 1000097000;
pub const XR_TYPE_SCENE_CREATE_INFO_MSFT: c_int = 1000097001;
pub const XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT: c_int = 1000097002;
pub const XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT: c_int = 1000097003;
pub const XR_TYPE_SCENE_COMPONENTS_MSFT: c_int = 1000097004;
pub const XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT: c_int = 1000097005;
pub const XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT: c_int = 1000097006;
pub const XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT: c_int = 1000097007;
pub const XR_TYPE_SCENE_OBJECTS_MSFT: c_int = 1000097008;
pub const XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT: c_int = 1000097009;
pub const XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT: c_int = 1000097010;
pub const XR_TYPE_SCENE_PLANES_MSFT: c_int = 1000097011;
pub const XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT: c_int = 1000097012;
pub const XR_TYPE_SCENE_MESHES_MSFT: c_int = 1000097013;
pub const XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT: c_int = 1000097014;
pub const XR_TYPE_SCENE_MESH_BUFFERS_MSFT: c_int = 1000097015;
pub const XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT: c_int = 1000097016;
pub const XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT: c_int = 1000097017;
pub const XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT: c_int = 1000097018;
pub const XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT: c_int = 1000098000;
pub const XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT: c_int = 1000098001;
pub const XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB: c_int = 1000101000;
pub const XR_TYPE_VIVE_TRACKER_PATHS_HTCX: c_int = 1000103000;
pub const XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX: c_int = 1000103001;
pub const XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC: c_int = 1000104000;
pub const XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC: c_int = 1000104001;
pub const XR_TYPE_FACIAL_EXPRESSIONS_HTC: c_int = 1000104002;
pub const XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB: c_int = 1000108000;
pub const XR_TYPE_HAND_TRACKING_MESH_FB: c_int = 1000110001;
pub const XR_TYPE_HAND_TRACKING_SCALE_FB: c_int = 1000110003;
pub const XR_TYPE_HAND_TRACKING_AIM_STATE_FB: c_int = 1000111001;
pub const XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB: c_int = 1000112000;
pub const XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB: c_int = 1000113004;
pub const XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB: c_int = 1000113003;
pub const XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB: c_int = 1000113007;
pub const XR_TYPE_SPACE_COMPONENT_STATUS_FB: c_int = 1000113001;
pub const XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB: c_int = 1000113005;
pub const XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB: c_int = 1000113006;
pub const XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB: c_int = 1000114000;
pub const XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB: c_int = 1000114001;
pub const XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB: c_int = 1000114002;
pub const XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB: c_int = 1000115000;
pub const XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB: c_int = 1000116009;
pub const XR_TYPE_KEYBOARD_TRACKING_QUERY_FB: c_int = 1000116004;
pub const XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB: c_int = 1000116002;
pub const XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB: c_int = 1000117001;
pub const XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB: c_int = 1000118000;
pub const XR_TYPE_PASSTHROUGH_CREATE_INFO_FB: c_int = 1000118001;
pub const XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB: c_int = 1000118002;
pub const XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB: c_int = 1000118003;
pub const XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB: c_int = 1000118004;
pub const XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB: c_int = 1000118005;
pub const XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB: c_int = 1000118006;
pub const XR_TYPE_PASSTHROUGH_STYLE_FB: c_int = 1000118020;
pub const XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB: c_int = 1000118021;
pub const XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB: c_int = 1000118022;
pub const XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB: c_int = 1000118023;
pub const XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB: c_int = 1000118030;
pub const XR_TYPE_RENDER_MODEL_PATH_INFO_FB: c_int = 1000119000;
pub const XR_TYPE_RENDER_MODEL_PROPERTIES_FB: c_int = 1000119001;
pub const XR_TYPE_RENDER_MODEL_BUFFER_FB: c_int = 1000119002;
pub const XR_TYPE_RENDER_MODEL_LOAD_INFO_FB: c_int = 1000119003;
pub const XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB: c_int = 1000119004;
pub const XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB: c_int = 1000119005;
pub const XR_TYPE_BINDING_MODIFICATIONS_KHR: c_int = 1000120000;
pub const XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO: c_int = 1000121000;
pub const XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO: c_int = 1000121001;
pub const XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO: c_int = 1000121002;
pub const XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO: c_int = 1000122000;
pub const XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO: c_int = 1000124000;
pub const XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO: c_int = 1000124001;
pub const XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO: c_int = 1000124002;
pub const XR_TYPE_FRAME_END_INFO_ML: c_int = 1000135000;
pub const XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML: c_int = 1000136000;
pub const XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML: c_int = 1000137000;
pub const XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML: c_int = 1000138000;
pub const XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML: c_int = 1000138001;
pub const XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML: c_int = 1000138002;
pub const XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML: c_int = 1000138003;
pub const XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML: c_int = 1000138004;
pub const XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML: c_int = 1000138005;
pub const XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML: c_int = 1000138006;
pub const XR_TYPE_MARKER_DETECTOR_STATE_ML: c_int = 1000138007;
pub const XR_TYPE_MARKER_SPACE_CREATE_INFO_ML: c_int = 1000138008;
pub const XR_TYPE_LOCALIZATION_MAP_ML: c_int = 1000139000;
pub const XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML: c_int = 1000139001;
pub const XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML: c_int = 1000139002;
pub const XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML: c_int = 1000139003;
pub const XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML: c_int = 1000139004;
pub const XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_POSE_ML: c_int = 1000140000;
pub const XR_TYPE_CREATE_SPATIAL_ANCHORS_COMPLETION_ML: c_int = 1000140001;
pub const XR_TYPE_SPATIAL_ANCHOR_STATE_ML: c_int = 1000140002;
pub const XR_TYPE_SPATIAL_ANCHORS_CREATE_STORAGE_INFO_ML: c_int = 1000141000;
pub const XR_TYPE_SPATIAL_ANCHORS_QUERY_INFO_RADIUS_ML: c_int = 1000141001;
pub const XR_TYPE_SPATIAL_ANCHORS_QUERY_COMPLETION_ML: c_int = 1000141002;
pub const XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_UUIDS_ML: c_int = 1000141003;
pub const XR_TYPE_SPATIAL_ANCHORS_PUBLISH_INFO_ML: c_int = 1000141004;
pub const XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_ML: c_int = 1000141005;
pub const XR_TYPE_SPATIAL_ANCHORS_DELETE_INFO_ML: c_int = 1000141006;
pub const XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_ML: c_int = 1000141007;
pub const XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_INFO_ML: c_int = 1000141008;
pub const XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_ML: c_int = 1000141009;
pub const XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_DETAILS_ML: c_int = 1000141010;
pub const XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_DETAILS_ML: c_int = 1000141011;
pub const XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_DETAILS_ML: c_int = 1000141012;
pub const XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML: c_int = 1000472000;
pub const XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML: c_int = 1000472001;
pub const XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML: c_int = 1000472002;
pub const XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT: c_int = 1000142000;
pub const XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT: c_int = 1000142001;
pub const XR_TYPE_SCENE_MARKERS_MSFT: c_int = 1000147000;
pub const XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT: c_int = 1000147001;
pub const XR_TYPE_SCENE_MARKER_QR_CODES_MSFT: c_int = 1000147002;
pub const XR_TYPE_SPACE_QUERY_INFO_FB: c_int = 1000156001;
pub const XR_TYPE_SPACE_QUERY_RESULTS_FB: c_int = 1000156002;
pub const XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB: c_int = 1000156003;
pub const XR_TYPE_SPACE_UUID_FILTER_INFO_FB: c_int = 1000156054;
pub const XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB: c_int = 1000156052;
pub const XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB: c_int = 1000156103;
pub const XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB: c_int = 1000156104;
pub const XR_TYPE_SPACE_SAVE_INFO_FB: c_int = 1000158000;
pub const XR_TYPE_SPACE_ERASE_INFO_FB: c_int = 1000158001;
pub const XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB: c_int = 1000158106;
pub const XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB: c_int = 1000158107;
pub const XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB: c_int = 1000160000;
pub const XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB: c_int = 1000161000;
pub const XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB: c_int = 1000162000;
pub const XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB: c_int = 1000163000;
pub const XR_TYPE_SPACE_SHARE_INFO_FB: c_int = 1000169001;
pub const XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB: c_int = 1000169002;
pub const XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB: c_int = 1000171000;
pub const XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB: c_int = 1000171001;
pub const XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB: c_int = 1000173001;
pub const XR_TYPE_SEMANTIC_LABELS_FB: c_int = 1000175000;
pub const XR_TYPE_ROOM_LAYOUT_FB: c_int = 1000175001;
pub const XR_TYPE_BOUNDARY_2D_FB: c_int = 1000175002;
pub const XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB: c_int = 1000175010;
pub const XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE: c_int = 1000196000;
pub const XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB: c_int = 1000198001;
pub const XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB: c_int = 1000198050;
pub const XR_TYPE_SPACE_CONTAINER_FB: c_int = 1000199000;
pub const XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META: c_int = 1000200000;
pub const XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META: c_int = 1000200001;
pub const XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META: c_int = 1000200002;
pub const XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB: c_int = 1000201004;
pub const XR_TYPE_FACE_TRACKER_CREATE_INFO_FB: c_int = 1000201005;
pub const XR_TYPE_FACE_EXPRESSION_INFO_FB: c_int = 1000201002;
pub const XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB: c_int = 1000201006;
pub const XR_TYPE_EYE_TRACKER_CREATE_INFO_FB: c_int = 1000202001;
pub const XR_TYPE_EYE_GAZES_INFO_FB: c_int = 1000202002;
pub const XR_TYPE_EYE_GAZES_FB: c_int = 1000202003;
pub const XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB: c_int = 1000202004;
pub const XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB: c_int = 1000203002;
pub const XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB: c_int = 1000204000;
pub const XR_TYPE_HAPTIC_PCM_VIBRATION_FB: c_int = 1000209001;
pub const XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB: c_int = 1000209002;
pub const XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB: c_int = 1000212000;
pub const XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META: c_int = 1000216000;
pub const XR_TYPE_PASSTHROUGH_PREFERENCES_META: c_int = 1000217000;
pub const XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META: c_int = 1000219001;
pub const XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META: c_int = 1000219002;
pub const XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META: c_int = 1000219003;
pub const XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META: c_int = 1000219004;
pub const XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META: c_int = 1000219005;
pub const XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META: c_int = 1000219006;
pub const XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META: c_int = 1000219007;
pub const XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META: c_int = 1000219009;
pub const XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META: c_int = 1000219010;
pub const XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META: c_int = 1000219011;
pub const XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META: c_int = 1000219014;
pub const XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META: c_int = 1000219015;
pub const XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META: c_int = 1000219016;
pub const XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META: c_int = 1000219017;
pub const XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META: c_int = 1000219018;
pub const XR_TYPE_EXTERNAL_CAMERA_OCULUS: c_int = 1000226000;
pub const XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META: c_int = 1000227000;
pub const XR_TYPE_PERFORMANCE_METRICS_STATE_META: c_int = 1000232001;
pub const XR_TYPE_PERFORMANCE_METRICS_COUNTER_META: c_int = 1000232002;
pub const XR_TYPE_SPACE_LIST_SAVE_INFO_FB: c_int = 1000238000;
pub const XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB: c_int = 1000238001;
pub const XR_TYPE_SPACE_USER_CREATE_INFO_FB: c_int = 1000241001;
pub const XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META: c_int = 1000245000;
pub const XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META: c_int = 1000254000;
pub const XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META: c_int = 1000254001;
pub const XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META: c_int = 1000266000;
pub const XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META: c_int = 1000266001;
pub const XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META: c_int = 1000266002;
pub const XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META: c_int = 1000266100;
pub const XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META: c_int = 1000266101;
pub const XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META: c_int = 1000269001;
pub const XR_TYPE_SPACE_TRIANGLE_MESH_META: c_int = 1000269002;
pub const XR_TYPE_EVENT_DATA_PASSTHROUGH_LAYER_RESUMED_META: c_int = 1000282000;
pub const XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB: c_int = 1000287013;
pub const XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB: c_int = 1000287014;
pub const XR_TYPE_FACE_EXPRESSION_INFO2_FB: c_int = 1000287015;
pub const XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB: c_int = 1000287016;
pub const XR_TYPE_SYSTEM_SPATIAL_ENTITY_SHARING_PROPERTIES_META: c_int = 1000290000;
pub const XR_TYPE_SHARE_SPACES_INFO_META: c_int = 1000290001;
pub const XR_TYPE_EVENT_DATA_SHARE_SPACES_COMPLETE_META: c_int = 1000290002;
pub const XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META: c_int = 1000291000;
pub const XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META: c_int = 1000291001;
pub const XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META: c_int = 1000291002;
pub const XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META: c_int = 1000291003;
pub const XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META: c_int = 1000291004;
pub const XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META: c_int = 1000291005;
pub const XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META: c_int = 1000291006;
pub const XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META: c_int = 1000291007;
pub const XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC: c_int = 1000317001;
pub const XR_TYPE_PASSTHROUGH_COLOR_HTC: c_int = 1000317002;
pub const XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC: c_int = 1000317003;
pub const XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC: c_int = 1000317004;
pub const XR_TYPE_FOVEATION_APPLY_INFO_HTC: c_int = 1000318000;
pub const XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC: c_int = 1000318001;
pub const XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC: c_int = 1000318002;
pub const XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC: c_int = 1000319000;
pub const XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC: c_int = 1000319001;
pub const XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_HTC: c_int = 1000320000;
pub const XR_TYPE_BODY_TRACKER_CREATE_INFO_HTC: c_int = 1000320001;
pub const XR_TYPE_BODY_JOINTS_LOCATE_INFO_HTC: c_int = 1000320002;
pub const XR_TYPE_BODY_JOINT_LOCATIONS_HTC: c_int = 1000320003;
pub const XR_TYPE_BODY_SKELETON_HTC: c_int = 1000320004;
pub const XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT: c_int = 1000373000;
pub const XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX: c_int = 1000375000;
pub const XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX: c_int = 1000375001;
pub const XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT: c_int = 1000428000;
pub const XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT: c_int = 1000428001;
pub const XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT: c_int = 1000429001;
pub const XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT: c_int = 1000429002;
pub const XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT: c_int = 1000429003;
pub const XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT: c_int = 1000429004;
pub const XR_TYPE_PLANE_DETECTOR_LOCATION_EXT: c_int = 1000429005;
pub const XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT: c_int = 1000429006;
pub const XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT: c_int = 1000429007;
pub const XR_TYPE_FUTURE_CANCEL_INFO_EXT: c_int = 1000469000;
pub const XR_TYPE_FUTURE_POLL_INFO_EXT: c_int = 1000469001;
pub const XR_TYPE_FUTURE_COMPLETION_EXT: c_int = 1000469002;
pub const XR_TYPE_FUTURE_POLL_RESULT_EXT: c_int = 1000469003;
pub const XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT: c_int = 1000470000;
pub const XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT: c_int = 1000470001;
pub const XR_TYPE_SYSTEM_NOTIFICATIONS_SET_INFO_ML: c_int = 1000473000;
pub const XR_TYPE_WORLD_MESH_DETECTOR_CREATE_INFO_ML: c_int = 1000474001;
pub const XR_TYPE_WORLD_MESH_STATE_REQUEST_INFO_ML: c_int = 1000474002;
pub const XR_TYPE_WORLD_MESH_BLOCK_STATE_ML: c_int = 1000474003;
pub const XR_TYPE_WORLD_MESH_STATE_REQUEST_COMPLETION_ML: c_int = 1000474004;
pub const XR_TYPE_WORLD_MESH_BUFFER_RECOMMENDED_SIZE_INFO_ML: c_int = 1000474005;
pub const XR_TYPE_WORLD_MESH_BUFFER_SIZE_ML: c_int = 1000474006;
pub const XR_TYPE_WORLD_MESH_BUFFER_ML: c_int = 1000474007;
pub const XR_TYPE_WORLD_MESH_BLOCK_REQUEST_ML: c_int = 1000474008;
pub const XR_TYPE_WORLD_MESH_GET_INFO_ML: c_int = 1000474009;
pub const XR_TYPE_WORLD_MESH_BLOCK_ML: c_int = 1000474010;
pub const XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_ML: c_int = 1000474011;
pub const XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_INFO_ML: c_int = 1000474012;
pub const XR_TYPE_SYSTEM_FACIAL_EXPRESSION_PROPERTIES_ML: c_int = 1000482004;
pub const XR_TYPE_FACIAL_EXPRESSION_CLIENT_CREATE_INFO_ML: c_int = 1000482005;
pub const XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_GET_INFO_ML: c_int = 1000482006;
pub const XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_ML: c_int = 1000482007;
pub const XR_TYPE_COLOCATION_DISCOVERY_START_INFO_META: c_int = 1000571010;
pub const XR_TYPE_COLOCATION_DISCOVERY_STOP_INFO_META: c_int = 1000571011;
pub const XR_TYPE_COLOCATION_ADVERTISEMENT_START_INFO_META: c_int = 1000571012;
pub const XR_TYPE_COLOCATION_ADVERTISEMENT_STOP_INFO_META: c_int = 1000571013;
pub const XR_TYPE_EVENT_DATA_START_COLOCATION_ADVERTISEMENT_COMPLETE_META: c_int = 1000571020;
pub const XR_TYPE_EVENT_DATA_STOP_COLOCATION_ADVERTISEMENT_COMPLETE_META: c_int = 1000571021;
pub const XR_TYPE_EVENT_DATA_COLOCATION_ADVERTISEMENT_COMPLETE_META: c_int = 1000571022;
pub const XR_TYPE_EVENT_DATA_START_COLOCATION_DISCOVERY_COMPLETE_META: c_int = 1000571023;
pub const XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_RESULT_META: c_int = 1000571024;
pub const XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_COMPLETE_META: c_int = 1000571025;
pub const XR_TYPE_EVENT_DATA_STOP_COLOCATION_DISCOVERY_COMPLETE_META: c_int = 1000571026;
pub const XR_TYPE_SYSTEM_COLOCATION_DISCOVERY_PROPERTIES_META: c_int = 1000571030;
pub const XR_TYPE_SHARE_SPACES_RECIPIENT_GROUPS_META: c_int = 1000572000;
pub const XR_TYPE_SPACE_GROUP_UUID_FILTER_INFO_META: c_int = 1000572001;
pub const XR_TYPE_SYSTEM_SPATIAL_ENTITY_GROUP_SHARING_PROPERTIES_META: c_int = 1000572100;
pub const XR_TYPE_GRAPHICS_BINDING_VULKAN2_KHR: c_int = 1000025000;
pub const XR_TYPE_SWAPCHAIN_IMAGE_VULKAN2_KHR: c_int = 1000025001;
pub const XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN2_KHR: c_int = 1000025002;
pub const XR_TYPE_DEVICE_PCM_SAMPLE_RATE_GET_INFO_FB: c_int = 1000209002;
pub const XR_TYPE_SPACES_LOCATE_INFO_KHR: c_int = 1000471000;
pub const XR_TYPE_SPACE_LOCATIONS_KHR: c_int = 1000471001;
pub const XR_TYPE_SPACE_VELOCITIES_KHR: c_int = 1000471002;
pub const XR_STRUCTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrStructureType = c_uint;
pub const XrStructureType = enum_XrStructureType;
pub const XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY: c_int = 1;
pub const XR_FORM_FACTOR_HANDHELD_DISPLAY: c_int = 2;
pub const XR_FORM_FACTOR_MAX_ENUM: c_int = 2147483647;
pub const enum_XrFormFactor = c_uint;
pub const XrFormFactor = enum_XrFormFactor;
pub const XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO: c_int = 1;
pub const XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO: c_int = 2;
pub const XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO_WITH_FOVEATED_INSET: c_int = 1000037000;
pub const XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT: c_int = 1000054000;
pub const XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO: c_int = 1000037000;
pub const XR_VIEW_CONFIGURATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrViewConfigurationType = c_uint;
pub const XrViewConfigurationType = enum_XrViewConfigurationType;
pub const XR_ENVIRONMENT_BLEND_MODE_OPAQUE: c_int = 1;
pub const XR_ENVIRONMENT_BLEND_MODE_ADDITIVE: c_int = 2;
pub const XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND: c_int = 3;
pub const XR_ENVIRONMENT_BLEND_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrEnvironmentBlendMode = c_uint;
pub const XrEnvironmentBlendMode = enum_XrEnvironmentBlendMode;
pub const XR_REFERENCE_SPACE_TYPE_VIEW: c_int = 1;
pub const XR_REFERENCE_SPACE_TYPE_LOCAL: c_int = 2;
pub const XR_REFERENCE_SPACE_TYPE_STAGE: c_int = 3;
pub const XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR: c_int = 1000426000;
pub const XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT: c_int = 1000038000;
pub const XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO: c_int = 1000121000;
pub const XR_REFERENCE_SPACE_TYPE_LOCALIZATION_MAP_ML: c_int = 1000139000;
pub const XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT: c_int = 1000426000;
pub const XR_REFERENCE_SPACE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrReferenceSpaceType = c_uint;
pub const XrReferenceSpaceType = enum_XrReferenceSpaceType;
pub const XR_ACTION_TYPE_BOOLEAN_INPUT: c_int = 1;
pub const XR_ACTION_TYPE_FLOAT_INPUT: c_int = 2;
pub const XR_ACTION_TYPE_VECTOR2F_INPUT: c_int = 3;
pub const XR_ACTION_TYPE_POSE_INPUT: c_int = 4;
pub const XR_ACTION_TYPE_VIBRATION_OUTPUT: c_int = 100;
pub const XR_ACTION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrActionType = c_uint;
pub const XrActionType = enum_XrActionType;
pub const XR_EYE_VISIBILITY_BOTH: c_int = 0;
pub const XR_EYE_VISIBILITY_LEFT: c_int = 1;
pub const XR_EYE_VISIBILITY_RIGHT: c_int = 2;
pub const XR_EYE_VISIBILITY_MAX_ENUM: c_int = 2147483647;
pub const enum_XrEyeVisibility = c_uint;
pub const XrEyeVisibility = enum_XrEyeVisibility;
pub const XR_SESSION_STATE_UNKNOWN: c_int = 0;
pub const XR_SESSION_STATE_IDLE: c_int = 1;
pub const XR_SESSION_STATE_READY: c_int = 2;
pub const XR_SESSION_STATE_SYNCHRONIZED: c_int = 3;
pub const XR_SESSION_STATE_VISIBLE: c_int = 4;
pub const XR_SESSION_STATE_FOCUSED: c_int = 5;
pub const XR_SESSION_STATE_STOPPING: c_int = 6;
pub const XR_SESSION_STATE_LOSS_PENDING: c_int = 7;
pub const XR_SESSION_STATE_EXITING: c_int = 8;
pub const XR_SESSION_STATE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrSessionState = c_uint;
pub const XrSessionState = enum_XrSessionState;
pub const XR_OBJECT_TYPE_UNKNOWN: c_int = 0;
pub const XR_OBJECT_TYPE_INSTANCE: c_int = 1;
pub const XR_OBJECT_TYPE_SESSION: c_int = 2;
pub const XR_OBJECT_TYPE_SWAPCHAIN: c_int = 3;
pub const XR_OBJECT_TYPE_SPACE: c_int = 4;
pub const XR_OBJECT_TYPE_ACTION_SET: c_int = 5;
pub const XR_OBJECT_TYPE_ACTION: c_int = 6;
pub const XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: c_int = 1000019000;
pub const XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT: c_int = 1000039000;
pub const XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT: c_int = 1000049000;
pub const XR_OBJECT_TYPE_HAND_TRACKER_EXT: c_int = 1000051000;
pub const XR_OBJECT_TYPE_BODY_TRACKER_FB: c_int = 1000076000;
pub const XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT: c_int = 1000097000;
pub const XR_OBJECT_TYPE_SCENE_MSFT: c_int = 1000097001;
pub const XR_OBJECT_TYPE_FACIAL_TRACKER_HTC: c_int = 1000104000;
pub const XR_OBJECT_TYPE_FOVEATION_PROFILE_FB: c_int = 1000114000;
pub const XR_OBJECT_TYPE_TRIANGLE_MESH_FB: c_int = 1000117000;
pub const XR_OBJECT_TYPE_PASSTHROUGH_FB: c_int = 1000118000;
pub const XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB: c_int = 1000118002;
pub const XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB: c_int = 1000118004;
pub const XR_OBJECT_TYPE_MARKER_DETECTOR_ML: c_int = 1000138000;
pub const XR_OBJECT_TYPE_EXPORTED_LOCALIZATION_MAP_ML: c_int = 1000139000;
pub const XR_OBJECT_TYPE_SPATIAL_ANCHORS_STORAGE_ML: c_int = 1000141000;
pub const XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT: c_int = 1000142000;
pub const XR_OBJECT_TYPE_FACE_TRACKER_FB: c_int = 1000201000;
pub const XR_OBJECT_TYPE_EYE_TRACKER_FB: c_int = 1000202000;
pub const XR_OBJECT_TYPE_VIRTUAL_KEYBOARD_META: c_int = 1000219000;
pub const XR_OBJECT_TYPE_SPACE_USER_FB: c_int = 1000241000;
pub const XR_OBJECT_TYPE_PASSTHROUGH_COLOR_LUT_META: c_int = 1000266000;
pub const XR_OBJECT_TYPE_FACE_TRACKER2_FB: c_int = 1000287012;
pub const XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_PROVIDER_META: c_int = 1000291000;
pub const XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_META: c_int = 1000291001;
pub const XR_OBJECT_TYPE_PASSTHROUGH_HTC: c_int = 1000317000;
pub const XR_OBJECT_TYPE_BODY_TRACKER_HTC: c_int = 1000320000;
pub const XR_OBJECT_TYPE_PLANE_DETECTOR_EXT: c_int = 1000429000;
pub const XR_OBJECT_TYPE_WORLD_MESH_DETECTOR_ML: c_int = 1000474000;
pub const XR_OBJECT_TYPE_FACIAL_EXPRESSION_CLIENT_ML: c_int = 1000482000;
pub const XR_OBJECT_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_XrObjectType = c_uint;
pub const XrObjectType = enum_XrObjectType;
pub const XrInstanceCreateFlags = XrFlags64;
pub const XrSessionCreateFlags = XrFlags64;
pub const XrSpaceVelocityFlags = XrFlags64;
pub const XR_SPACE_VELOCITY_LINEAR_VALID_BIT: XrSpaceVelocityFlags = 1;
pub const XR_SPACE_VELOCITY_ANGULAR_VALID_BIT: XrSpaceVelocityFlags = 2;
pub const XrSpaceLocationFlags = XrFlags64;
pub const XR_SPACE_LOCATION_ORIENTATION_VALID_BIT: XrSpaceLocationFlags = 1;
pub const XR_SPACE_LOCATION_POSITION_VALID_BIT: XrSpaceLocationFlags = 2;
pub const XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT: XrSpaceLocationFlags = 4;
pub const XR_SPACE_LOCATION_POSITION_TRACKED_BIT: XrSpaceLocationFlags = 8;
pub const XrSwapchainCreateFlags = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT: XrSwapchainCreateFlags = 1;
pub const XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT: XrSwapchainCreateFlags = 2;
pub const XrSwapchainUsageFlags = XrFlags64;
pub const XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT: XrSwapchainUsageFlags = 1;
pub const XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: XrSwapchainUsageFlags = 2;
pub const XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT: XrSwapchainUsageFlags = 4;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT: XrSwapchainUsageFlags = 8;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT: XrSwapchainUsageFlags = 16;
pub const XR_SWAPCHAIN_USAGE_SAMPLED_BIT: XrSwapchainUsageFlags = 32;
pub const XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT: XrSwapchainUsageFlags = 64;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND: XrSwapchainUsageFlags = 128;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_KHR: XrSwapchainUsageFlags = 128;
pub const XrCompositionLayerFlags = XrFlags64;
pub const XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT: XrCompositionLayerFlags = 1;
pub const XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT: XrCompositionLayerFlags = 2;
pub const XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT: XrCompositionLayerFlags = 4;
pub const XR_COMPOSITION_LAYER_INVERTED_ALPHA_BIT_EXT: XrCompositionLayerFlags = 8;
pub const XrViewStateFlags = XrFlags64;
pub const XR_VIEW_STATE_ORIENTATION_VALID_BIT: XrViewStateFlags = 1;
pub const XR_VIEW_STATE_POSITION_VALID_BIT: XrViewStateFlags = 2;
pub const XR_VIEW_STATE_ORIENTATION_TRACKED_BIT: XrViewStateFlags = 4;
pub const XR_VIEW_STATE_POSITION_TRACKED_BIT: XrViewStateFlags = 8;
pub const XrInputSourceLocalizedNameFlags = XrFlags64;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT: XrInputSourceLocalizedNameFlags = 1;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT: XrInputSourceLocalizedNameFlags = 2;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT: XrInputSourceLocalizedNameFlags = 4;
pub const PFN_xrVoidFunction = ?*const fn () callconv(.c) void;
pub const struct_XrApiLayerProperties = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    layerName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: XrVersion = @import("std").mem.zeroes(XrVersion),
    layerVersion: u32 = @import("std").mem.zeroes(u32),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const XrApiLayerProperties = struct_XrApiLayerProperties;
pub const struct_XrExtensionProperties = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extensionName: [128]u8 = @import("std").mem.zeroes([128]u8),
    extensionVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const XrExtensionProperties = struct_XrExtensionProperties;
pub const struct_XrApplicationInfo = extern struct {
    applicationName: [128]u8 = @import("std").mem.zeroes([128]u8),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    engineName: [128]u8 = @import("std").mem.zeroes([128]u8),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: XrVersion = @import("std").mem.zeroes(XrVersion),
};
pub const XrApplicationInfo = struct_XrApplicationInfo;
pub const struct_XrInstanceCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: XrInstanceCreateFlags = @import("std").mem.zeroes(XrInstanceCreateFlags),
    applicationInfo: XrApplicationInfo = @import("std").mem.zeroes(XrApplicationInfo),
    enabledApiLayerCount: u32 = @import("std").mem.zeroes(u32),
    enabledApiLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    enabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
};
pub const XrInstanceCreateInfo = struct_XrInstanceCreateInfo;
pub const struct_XrInstanceProperties = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    runtimeVersion: XrVersion = @import("std").mem.zeroes(XrVersion),
    runtimeName: [128]u8 = @import("std").mem.zeroes([128]u8),
};
pub const XrInstanceProperties = struct_XrInstanceProperties;
pub const struct_XrEventDataBuffer = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    varying: [4000]u8 = @import("std").mem.zeroes([4000]u8),
};
pub const XrEventDataBuffer = struct_XrEventDataBuffer;
pub const struct_XrSystemGetInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    formFactor: XrFormFactor = @import("std").mem.zeroes(XrFormFactor),
};
pub const XrSystemGetInfo = struct_XrSystemGetInfo;
pub const struct_XrSystemGraphicsProperties = extern struct {
    maxSwapchainImageHeight: u32 = @import("std").mem.zeroes(u32),
    maxSwapchainImageWidth: u32 = @import("std").mem.zeroes(u32),
    maxLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSystemGraphicsProperties = struct_XrSystemGraphicsProperties;
pub const struct_XrSystemTrackingProperties = extern struct {
    orientationTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
    positionTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemTrackingProperties = struct_XrSystemTrackingProperties;
pub const struct_XrSystemProperties = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    systemId: XrSystemId = @import("std").mem.zeroes(XrSystemId),
    vendorId: u32 = @import("std").mem.zeroes(u32),
    systemName: [256]u8 = @import("std").mem.zeroes([256]u8),
    graphicsProperties: XrSystemGraphicsProperties = @import("std").mem.zeroes(XrSystemGraphicsProperties),
    trackingProperties: XrSystemTrackingProperties = @import("std").mem.zeroes(XrSystemTrackingProperties),
};
pub const XrSystemProperties = struct_XrSystemProperties;
pub const struct_XrSessionCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: XrSessionCreateFlags = @import("std").mem.zeroes(XrSessionCreateFlags),
    systemId: XrSystemId = @import("std").mem.zeroes(XrSystemId),
};
pub const XrSessionCreateInfo = struct_XrSessionCreateInfo;
pub const struct_XrVector3f = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
};
pub const XrVector3f = struct_XrVector3f;
pub const struct_XrSpaceVelocity = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    velocityFlags: XrSpaceVelocityFlags = @import("std").mem.zeroes(XrSpaceVelocityFlags),
    linearVelocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    angularVelocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrSpaceVelocity = struct_XrSpaceVelocity;
pub const struct_XrQuaternionf = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
    w: f32 = @import("std").mem.zeroes(f32),
};
pub const XrQuaternionf = struct_XrQuaternionf;
pub const struct_XrPosef = extern struct {
    orientation: XrQuaternionf = @import("std").mem.zeroes(XrQuaternionf),
    position: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrPosef = struct_XrPosef;
pub const struct_XrReferenceSpaceCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    referenceSpaceType: XrReferenceSpaceType = @import("std").mem.zeroes(XrReferenceSpaceType),
    poseInReferenceSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrReferenceSpaceCreateInfo = struct_XrReferenceSpaceCreateInfo;
pub const struct_XrExtent2Df = extern struct {
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
};
pub const XrExtent2Df = struct_XrExtent2Df;
pub const struct_XrActionSpaceCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    action: XrAction = @import("std").mem.zeroes(XrAction),
    subactionPath: XrPath = @import("std").mem.zeroes(XrPath),
    poseInActionSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrActionSpaceCreateInfo = struct_XrActionSpaceCreateInfo;
pub const struct_XrSpaceLocation = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    locationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrSpaceLocation = struct_XrSpaceLocation;
pub const struct_XrViewConfigurationProperties = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    viewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
    fovMutable: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrViewConfigurationProperties = struct_XrViewConfigurationProperties;
pub const struct_XrViewConfigurationView = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    recommendedImageRectWidth: u32 = @import("std").mem.zeroes(u32),
    maxImageRectWidth: u32 = @import("std").mem.zeroes(u32),
    recommendedImageRectHeight: u32 = @import("std").mem.zeroes(u32),
    maxImageRectHeight: u32 = @import("std").mem.zeroes(u32),
    recommendedSwapchainSampleCount: u32 = @import("std").mem.zeroes(u32),
    maxSwapchainSampleCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrViewConfigurationView = struct_XrViewConfigurationView;
pub const struct_XrSwapchainCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: XrSwapchainCreateFlags = @import("std").mem.zeroes(XrSwapchainCreateFlags),
    usageFlags: XrSwapchainUsageFlags = @import("std").mem.zeroes(XrSwapchainUsageFlags),
    format: i64 = @import("std").mem.zeroes(i64),
    sampleCount: u32 = @import("std").mem.zeroes(u32),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    faceCount: u32 = @import("std").mem.zeroes(u32),
    arraySize: u32 = @import("std").mem.zeroes(u32),
    mipCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSwapchainCreateInfo = struct_XrSwapchainCreateInfo;
pub const struct_XrSwapchainImageBaseHeader = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const XrSwapchainImageBaseHeader = struct_XrSwapchainImageBaseHeader;
pub const struct_XrSwapchainImageAcquireInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSwapchainImageAcquireInfo = struct_XrSwapchainImageAcquireInfo;
pub const struct_XrSwapchainImageWaitInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timeout: XrDuration = @import("std").mem.zeroes(XrDuration),
};
pub const XrSwapchainImageWaitInfo = struct_XrSwapchainImageWaitInfo;
pub const struct_XrSwapchainImageReleaseInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSwapchainImageReleaseInfo = struct_XrSwapchainImageReleaseInfo;
pub const struct_XrSessionBeginInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    primaryViewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
};
pub const XrSessionBeginInfo = struct_XrSessionBeginInfo;
pub const struct_XrFrameWaitInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrFrameWaitInfo = struct_XrFrameWaitInfo;
pub const struct_XrFrameState = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    predictedDisplayTime: XrTime = @import("std").mem.zeroes(XrTime),
    predictedDisplayPeriod: XrDuration = @import("std").mem.zeroes(XrDuration),
    shouldRender: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrFrameState = struct_XrFrameState;
pub const struct_XrFrameBeginInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrFrameBeginInfo = struct_XrFrameBeginInfo;
pub const struct_XrCompositionLayerBaseHeader = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
};
pub const XrCompositionLayerBaseHeader = struct_XrCompositionLayerBaseHeader;
pub const struct_XrFrameEndInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayTime: XrTime = @import("std").mem.zeroes(XrTime),
    environmentBlendMode: XrEnvironmentBlendMode = @import("std").mem.zeroes(XrEnvironmentBlendMode),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    layers: [*c]const [*c]const XrCompositionLayerBaseHeader = @import("std").mem.zeroes([*c]const [*c]const XrCompositionLayerBaseHeader),
};
pub const XrFrameEndInfo = struct_XrFrameEndInfo;
pub const struct_XrViewLocateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
    displayTime: XrTime = @import("std").mem.zeroes(XrTime),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
};
pub const XrViewLocateInfo = struct_XrViewLocateInfo;
pub const struct_XrViewState = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    viewStateFlags: XrViewStateFlags = @import("std").mem.zeroes(XrViewStateFlags),
};
pub const XrViewState = struct_XrViewState;
pub const struct_XrFovf = extern struct {
    angleLeft: f32 = @import("std").mem.zeroes(f32),
    angleRight: f32 = @import("std").mem.zeroes(f32),
    angleUp: f32 = @import("std").mem.zeroes(f32),
    angleDown: f32 = @import("std").mem.zeroes(f32),
};
pub const XrFovf = struct_XrFovf;
pub const struct_XrView = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    fov: XrFovf = @import("std").mem.zeroes(XrFovf),
};
pub const XrView = struct_XrView;
pub const struct_XrActionSetCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    actionSetName: [64]u8 = @import("std").mem.zeroes([64]u8),
    localizedActionSetName: [128]u8 = @import("std").mem.zeroes([128]u8),
    priority: u32 = @import("std").mem.zeroes(u32),
};
pub const XrActionSetCreateInfo = struct_XrActionSetCreateInfo;
pub const struct_XrActionCreateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    actionName: [64]u8 = @import("std").mem.zeroes([64]u8),
    actionType: XrActionType = @import("std").mem.zeroes(XrActionType),
    countSubactionPaths: u32 = @import("std").mem.zeroes(u32),
    subactionPaths: [*c]const XrPath = @import("std").mem.zeroes([*c]const XrPath),
    localizedActionName: [128]u8 = @import("std").mem.zeroes([128]u8),
};
pub const XrActionCreateInfo = struct_XrActionCreateInfo;
pub const struct_XrActionSuggestedBinding = extern struct {
    action: XrAction = @import("std").mem.zeroes(XrAction),
    binding: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrActionSuggestedBinding = struct_XrActionSuggestedBinding;
pub const struct_XrInteractionProfileSuggestedBinding = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    interactionProfile: XrPath = @import("std").mem.zeroes(XrPath),
    countSuggestedBindings: u32 = @import("std").mem.zeroes(u32),
    suggestedBindings: [*c]const XrActionSuggestedBinding = @import("std").mem.zeroes([*c]const XrActionSuggestedBinding),
};
pub const XrInteractionProfileSuggestedBinding = struct_XrInteractionProfileSuggestedBinding;
pub const struct_XrSessionActionSetsAttachInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    countActionSets: u32 = @import("std").mem.zeroes(u32),
    actionSets: [*c]const XrActionSet = @import("std").mem.zeroes([*c]const XrActionSet),
};
pub const XrSessionActionSetsAttachInfo = struct_XrSessionActionSetsAttachInfo;
pub const struct_XrInteractionProfileState = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    interactionProfile: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrInteractionProfileState = struct_XrInteractionProfileState;
pub const struct_XrActionStateGetInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    action: XrAction = @import("std").mem.zeroes(XrAction),
    subactionPath: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrActionStateGetInfo = struct_XrActionStateGetInfo;
pub const struct_XrActionStateBoolean = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    currentState: XrBool32 = @import("std").mem.zeroes(XrBool32),
    changedSinceLastSync: XrBool32 = @import("std").mem.zeroes(XrBool32),
    lastChangeTime: XrTime = @import("std").mem.zeroes(XrTime),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrActionStateBoolean = struct_XrActionStateBoolean;
pub const struct_XrActionStateFloat = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    currentState: f32 = @import("std").mem.zeroes(f32),
    changedSinceLastSync: XrBool32 = @import("std").mem.zeroes(XrBool32),
    lastChangeTime: XrTime = @import("std").mem.zeroes(XrTime),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrActionStateFloat = struct_XrActionStateFloat;
pub const struct_XrVector2f = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const XrVector2f = struct_XrVector2f;
pub const struct_XrActionStateVector2f = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    currentState: XrVector2f = @import("std").mem.zeroes(XrVector2f),
    changedSinceLastSync: XrBool32 = @import("std").mem.zeroes(XrBool32),
    lastChangeTime: XrTime = @import("std").mem.zeroes(XrTime),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrActionStateVector2f = struct_XrActionStateVector2f;
pub const struct_XrActionStatePose = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrActionStatePose = struct_XrActionStatePose;
pub const struct_XrActiveActionSet = extern struct {
    actionSet: XrActionSet = @import("std").mem.zeroes(XrActionSet),
    subactionPath: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrActiveActionSet = struct_XrActiveActionSet;
pub const struct_XrActionsSyncInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    countActiveActionSets: u32 = @import("std").mem.zeroes(u32),
    activeActionSets: [*c]const XrActiveActionSet = @import("std").mem.zeroes([*c]const XrActiveActionSet),
};
pub const XrActionsSyncInfo = struct_XrActionsSyncInfo;
pub const struct_XrBoundSourcesForActionEnumerateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    action: XrAction = @import("std").mem.zeroes(XrAction),
};
pub const XrBoundSourcesForActionEnumerateInfo = struct_XrBoundSourcesForActionEnumerateInfo;
pub const struct_XrInputSourceLocalizedNameGetInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sourcePath: XrPath = @import("std").mem.zeroes(XrPath),
    whichComponents: XrInputSourceLocalizedNameFlags = @import("std").mem.zeroes(XrInputSourceLocalizedNameFlags),
};
pub const XrInputSourceLocalizedNameGetInfo = struct_XrInputSourceLocalizedNameGetInfo;
pub const struct_XrHapticActionInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    action: XrAction = @import("std").mem.zeroes(XrAction),
    subactionPath: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrHapticActionInfo = struct_XrHapticActionInfo;
pub const struct_XrHapticBaseHeader = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrHapticBaseHeader = struct_XrHapticBaseHeader;
pub const struct_XrBaseInStructure = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: [*c]const struct_XrBaseInStructure = @import("std").mem.zeroes([*c]const struct_XrBaseInStructure),
};
pub const XrBaseInStructure = struct_XrBaseInStructure;
pub const struct_XrBaseOutStructure = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: [*c]struct_XrBaseOutStructure = @import("std").mem.zeroes([*c]struct_XrBaseOutStructure),
};
pub const XrBaseOutStructure = struct_XrBaseOutStructure;
pub const struct_XrOffset2Di = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
};
pub const XrOffset2Di = struct_XrOffset2Di;
pub const struct_XrExtent2Di = extern struct {
    width: i32 = @import("std").mem.zeroes(i32),
    height: i32 = @import("std").mem.zeroes(i32),
};
pub const XrExtent2Di = struct_XrExtent2Di;
pub const struct_XrRect2Di = extern struct {
    offset: XrOffset2Di = @import("std").mem.zeroes(XrOffset2Di),
    extent: XrExtent2Di = @import("std").mem.zeroes(XrExtent2Di),
};
pub const XrRect2Di = struct_XrRect2Di;
pub const struct_XrSwapchainSubImage = extern struct {
    swapchain: XrSwapchain = @import("std").mem.zeroes(XrSwapchain),
    imageRect: XrRect2Di = @import("std").mem.zeroes(XrRect2Di),
    imageArrayIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSwapchainSubImage = struct_XrSwapchainSubImage;
pub const struct_XrCompositionLayerProjectionView = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    fov: XrFovf = @import("std").mem.zeroes(XrFovf),
    subImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
};
pub const XrCompositionLayerProjectionView = struct_XrCompositionLayerProjectionView;
pub const struct_XrCompositionLayerProjection = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    viewCount: u32 = @import("std").mem.zeroes(u32),
    views: [*c]const XrCompositionLayerProjectionView = @import("std").mem.zeroes([*c]const XrCompositionLayerProjectionView),
};
pub const XrCompositionLayerProjection = struct_XrCompositionLayerProjection;
pub const struct_XrCompositionLayerQuad = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    eyeVisibility: XrEyeVisibility = @import("std").mem.zeroes(XrEyeVisibility),
    subImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    size: XrExtent2Df = @import("std").mem.zeroes(XrExtent2Df),
};
pub const XrCompositionLayerQuad = struct_XrCompositionLayerQuad;
pub const struct_XrEventDataBaseHeader = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrEventDataBaseHeader = struct_XrEventDataBaseHeader;
pub const struct_XrEventDataEventsLost = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lostEventCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrEventDataEventsLost = struct_XrEventDataEventsLost;
pub const struct_XrEventDataInstanceLossPending = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lossTime: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEventDataInstanceLossPending = struct_XrEventDataInstanceLossPending;
pub const struct_XrEventDataSessionStateChanged = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: XrSession = @import("std").mem.zeroes(XrSession),
    state: XrSessionState = @import("std").mem.zeroes(XrSessionState),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEventDataSessionStateChanged = struct_XrEventDataSessionStateChanged;
pub const struct_XrEventDataReferenceSpaceChangePending = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: XrSession = @import("std").mem.zeroes(XrSession),
    referenceSpaceType: XrReferenceSpaceType = @import("std").mem.zeroes(XrReferenceSpaceType),
    changeTime: XrTime = @import("std").mem.zeroes(XrTime),
    poseValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
    poseInPreviousSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrEventDataReferenceSpaceChangePending = struct_XrEventDataReferenceSpaceChangePending;
pub const struct_XrEventDataInteractionProfileChanged = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: XrSession = @import("std").mem.zeroes(XrSession),
};
pub const XrEventDataInteractionProfileChanged = struct_XrEventDataInteractionProfileChanged;
pub const struct_XrHapticVibration = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    duration: XrDuration = @import("std").mem.zeroes(XrDuration),
    frequency: f32 = @import("std").mem.zeroes(f32),
    amplitude: f32 = @import("std").mem.zeroes(f32),
};
pub const XrHapticVibration = struct_XrHapticVibration;
pub const struct_XrOffset2Df = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const XrOffset2Df = struct_XrOffset2Df;
pub const struct_XrRect2Df = extern struct {
    offset: XrOffset2Df = @import("std").mem.zeroes(XrOffset2Df),
    extent: XrExtent2Df = @import("std").mem.zeroes(XrExtent2Df),
};
pub const XrRect2Df = struct_XrRect2Df;
pub const struct_XrVector4f = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
    w: f32 = @import("std").mem.zeroes(f32),
};
pub const XrVector4f = struct_XrVector4f;
pub const struct_XrColor4f = extern struct {
    r: f32 = @import("std").mem.zeroes(f32),
    g: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
    a: f32 = @import("std").mem.zeroes(f32),
};
pub const XrColor4f = struct_XrColor4f;
pub const PFN_xrGetInstanceProcAddr = ?*const fn (XrInstance, [*c]const u8, [*c]PFN_xrVoidFunction) callconv(.c) XrResult;
pub const PFN_xrEnumerateApiLayerProperties = ?*const fn (u32, [*c]u32, [*c]XrApiLayerProperties) callconv(.c) XrResult;
pub const PFN_xrEnumerateInstanceExtensionProperties = ?*const fn ([*c]const u8, u32, [*c]u32, [*c]XrExtensionProperties) callconv(.c) XrResult;
pub const PFN_xrCreateInstance = ?*const fn ([*c]const XrInstanceCreateInfo, [*c]XrInstance) callconv(.c) XrResult;
pub const PFN_xrDestroyInstance = ?*const fn (XrInstance) callconv(.c) XrResult;
pub const PFN_xrGetInstanceProperties = ?*const fn (XrInstance, [*c]XrInstanceProperties) callconv(.c) XrResult;
pub const PFN_xrPollEvent = ?*const fn (XrInstance, [*c]XrEventDataBuffer) callconv(.c) XrResult;
pub const PFN_xrResultToString = ?*const fn (XrInstance, XrResult, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrStructureTypeToString = ?*const fn (XrInstance, XrStructureType, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrGetSystem = ?*const fn (XrInstance, [*c]const XrSystemGetInfo, [*c]XrSystemId) callconv(.c) XrResult;
pub const PFN_xrGetSystemProperties = ?*const fn (XrInstance, XrSystemId, [*c]XrSystemProperties) callconv(.c) XrResult;
pub const PFN_xrEnumerateEnvironmentBlendModes = ?*const fn (XrInstance, XrSystemId, XrViewConfigurationType, u32, [*c]u32, [*c]XrEnvironmentBlendMode) callconv(.c) XrResult;
pub const PFN_xrCreateSession = ?*const fn (XrInstance, [*c]const XrSessionCreateInfo, [*c]XrSession) callconv(.c) XrResult;
pub const PFN_xrDestroySession = ?*const fn (XrSession) callconv(.c) XrResult;
pub const PFN_xrEnumerateReferenceSpaces = ?*const fn (XrSession, u32, [*c]u32, [*c]XrReferenceSpaceType) callconv(.c) XrResult;
pub const PFN_xrCreateReferenceSpace = ?*const fn (XrSession, [*c]const XrReferenceSpaceCreateInfo, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrGetReferenceSpaceBoundsRect = ?*const fn (XrSession, XrReferenceSpaceType, [*c]XrExtent2Df) callconv(.c) XrResult;
pub const PFN_xrCreateActionSpace = ?*const fn (XrSession, [*c]const XrActionSpaceCreateInfo, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrLocateSpace = ?*const fn (XrSpace, XrSpace, XrTime, [*c]XrSpaceLocation) callconv(.c) XrResult;
pub const PFN_xrDestroySpace = ?*const fn (XrSpace) callconv(.c) XrResult;
pub const PFN_xrEnumerateViewConfigurations = ?*const fn (XrInstance, XrSystemId, u32, [*c]u32, [*c]XrViewConfigurationType) callconv(.c) XrResult;
pub const PFN_xrGetViewConfigurationProperties = ?*const fn (XrInstance, XrSystemId, XrViewConfigurationType, [*c]XrViewConfigurationProperties) callconv(.c) XrResult;
pub const PFN_xrEnumerateViewConfigurationViews = ?*const fn (XrInstance, XrSystemId, XrViewConfigurationType, u32, [*c]u32, [*c]XrViewConfigurationView) callconv(.c) XrResult;
pub const PFN_xrEnumerateSwapchainFormats = ?*const fn (XrSession, u32, [*c]u32, [*c]i64) callconv(.c) XrResult;
pub const PFN_xrCreateSwapchain = ?*const fn (XrSession, [*c]const XrSwapchainCreateInfo, [*c]XrSwapchain) callconv(.c) XrResult;
pub const PFN_xrDestroySwapchain = ?*const fn (XrSwapchain) callconv(.c) XrResult;
pub const PFN_xrEnumerateSwapchainImages = ?*const fn (XrSwapchain, u32, [*c]u32, [*c]XrSwapchainImageBaseHeader) callconv(.c) XrResult;
pub const PFN_xrAcquireSwapchainImage = ?*const fn (XrSwapchain, [*c]const XrSwapchainImageAcquireInfo, [*c]u32) callconv(.c) XrResult;
pub const PFN_xrWaitSwapchainImage = ?*const fn (XrSwapchain, [*c]const XrSwapchainImageWaitInfo) callconv(.c) XrResult;
pub const PFN_xrReleaseSwapchainImage = ?*const fn (XrSwapchain, [*c]const XrSwapchainImageReleaseInfo) callconv(.c) XrResult;
pub const PFN_xrBeginSession = ?*const fn (XrSession, [*c]const XrSessionBeginInfo) callconv(.c) XrResult;
pub const PFN_xrEndSession = ?*const fn (XrSession) callconv(.c) XrResult;
pub const PFN_xrRequestExitSession = ?*const fn (XrSession) callconv(.c) XrResult;
pub const PFN_xrWaitFrame = ?*const fn (XrSession, [*c]const XrFrameWaitInfo, [*c]XrFrameState) callconv(.c) XrResult;
pub const PFN_xrBeginFrame = ?*const fn (XrSession, [*c]const XrFrameBeginInfo) callconv(.c) XrResult;
pub const PFN_xrEndFrame = ?*const fn (XrSession, [*c]const XrFrameEndInfo) callconv(.c) XrResult;
pub const PFN_xrLocateViews = ?*const fn (XrSession, [*c]const XrViewLocateInfo, [*c]XrViewState, u32, [*c]u32, [*c]XrView) callconv(.c) XrResult;
pub const PFN_xrStringToPath = ?*const fn (XrInstance, [*c]const u8, [*c]XrPath) callconv(.c) XrResult;
pub const PFN_xrPathToString = ?*const fn (XrInstance, XrPath, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrCreateActionSet = ?*const fn (XrInstance, [*c]const XrActionSetCreateInfo, [*c]XrActionSet) callconv(.c) XrResult;
pub const PFN_xrDestroyActionSet = ?*const fn (XrActionSet) callconv(.c) XrResult;
pub const PFN_xrCreateAction = ?*const fn (XrActionSet, [*c]const XrActionCreateInfo, [*c]XrAction) callconv(.c) XrResult;
pub const PFN_xrDestroyAction = ?*const fn (XrAction) callconv(.c) XrResult;
pub const PFN_xrSuggestInteractionProfileBindings = ?*const fn (XrInstance, [*c]const XrInteractionProfileSuggestedBinding) callconv(.c) XrResult;
pub const PFN_xrAttachSessionActionSets = ?*const fn (XrSession, [*c]const XrSessionActionSetsAttachInfo) callconv(.c) XrResult;
pub const PFN_xrGetCurrentInteractionProfile = ?*const fn (XrSession, XrPath, [*c]XrInteractionProfileState) callconv(.c) XrResult;
pub const PFN_xrGetActionStateBoolean = ?*const fn (XrSession, [*c]const XrActionStateGetInfo, [*c]XrActionStateBoolean) callconv(.c) XrResult;
pub const PFN_xrGetActionStateFloat = ?*const fn (XrSession, [*c]const XrActionStateGetInfo, [*c]XrActionStateFloat) callconv(.c) XrResult;
pub const PFN_xrGetActionStateVector2f = ?*const fn (XrSession, [*c]const XrActionStateGetInfo, [*c]XrActionStateVector2f) callconv(.c) XrResult;
pub const PFN_xrGetActionStatePose = ?*const fn (XrSession, [*c]const XrActionStateGetInfo, [*c]XrActionStatePose) callconv(.c) XrResult;
pub const PFN_xrSyncActions = ?*const fn (XrSession, [*c]const XrActionsSyncInfo) callconv(.c) XrResult;
pub const PFN_xrEnumerateBoundSourcesForAction = ?*const fn (XrSession, [*c]const XrBoundSourcesForActionEnumerateInfo, u32, [*c]u32, [*c]XrPath) callconv(.c) XrResult;
pub const PFN_xrGetInputSourceLocalizedName = ?*const fn (XrSession, [*c]const XrInputSourceLocalizedNameGetInfo, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrApplyHapticFeedback = ?*const fn (XrSession, [*c]const XrHapticActionInfo, [*c]const XrHapticBaseHeader) callconv(.c) XrResult;
pub const PFN_xrStopHapticFeedback = ?*const fn (XrSession, [*c]const XrHapticActionInfo) callconv(.c) XrResult;
pub extern fn xrGetInstanceProcAddr(instance: XrInstance, name: [*c]const u8, function: [*c]PFN_xrVoidFunction) XrResult;
pub extern fn xrEnumerateApiLayerProperties(propertyCapacityInput: u32, propertyCountOutput: [*c]u32, properties: [*c]XrApiLayerProperties) XrResult;
pub extern fn xrEnumerateInstanceExtensionProperties(layerName: [*c]const u8, propertyCapacityInput: u32, propertyCountOutput: [*c]u32, properties: [*c]XrExtensionProperties) XrResult;
pub extern fn xrCreateInstance(createInfo: [*c]const XrInstanceCreateInfo, instance: [*c]XrInstance) XrResult;
pub extern fn xrDestroyInstance(instance: XrInstance) XrResult;
pub extern fn xrGetInstanceProperties(instance: XrInstance, instanceProperties: [*c]XrInstanceProperties) XrResult;
pub extern fn xrPollEvent(instance: XrInstance, eventData: [*c]XrEventDataBuffer) XrResult;
pub extern fn xrResultToString(instance: XrInstance, value: XrResult, buffer: [*c]u8) XrResult;
pub extern fn xrStructureTypeToString(instance: XrInstance, value: XrStructureType, buffer: [*c]u8) XrResult;
pub extern fn xrGetSystem(instance: XrInstance, getInfo: [*c]const XrSystemGetInfo, systemId: [*c]XrSystemId) XrResult;
pub extern fn xrGetSystemProperties(instance: XrInstance, systemId: XrSystemId, properties: [*c]XrSystemProperties) XrResult;
pub extern fn xrEnumerateEnvironmentBlendModes(instance: XrInstance, systemId: XrSystemId, viewConfigurationType: XrViewConfigurationType, environmentBlendModeCapacityInput: u32, environmentBlendModeCountOutput: [*c]u32, environmentBlendModes: [*c]XrEnvironmentBlendMode) XrResult;
pub extern fn xrCreateSession(instance: XrInstance, createInfo: [*c]const XrSessionCreateInfo, session: [*c]XrSession) XrResult;
pub extern fn xrDestroySession(session: XrSession) XrResult;
pub extern fn xrEnumerateReferenceSpaces(session: XrSession, spaceCapacityInput: u32, spaceCountOutput: [*c]u32, spaces: [*c]XrReferenceSpaceType) XrResult;
pub extern fn xrCreateReferenceSpace(session: XrSession, createInfo: [*c]const XrReferenceSpaceCreateInfo, space: [*c]XrSpace) XrResult;
pub extern fn xrGetReferenceSpaceBoundsRect(session: XrSession, referenceSpaceType: XrReferenceSpaceType, bounds: [*c]XrExtent2Df) XrResult;
pub extern fn xrCreateActionSpace(session: XrSession, createInfo: [*c]const XrActionSpaceCreateInfo, space: [*c]XrSpace) XrResult;
pub extern fn xrLocateSpace(space: XrSpace, baseSpace: XrSpace, time: XrTime, location: [*c]XrSpaceLocation) XrResult;
pub extern fn xrDestroySpace(space: XrSpace) XrResult;
pub extern fn xrEnumerateViewConfigurations(instance: XrInstance, systemId: XrSystemId, viewConfigurationTypeCapacityInput: u32, viewConfigurationTypeCountOutput: [*c]u32, viewConfigurationTypes: [*c]XrViewConfigurationType) XrResult;
pub extern fn xrGetViewConfigurationProperties(instance: XrInstance, systemId: XrSystemId, viewConfigurationType: XrViewConfigurationType, configurationProperties: [*c]XrViewConfigurationProperties) XrResult;
pub extern fn xrEnumerateViewConfigurationViews(instance: XrInstance, systemId: XrSystemId, viewConfigurationType: XrViewConfigurationType, viewCapacityInput: u32, viewCountOutput: [*c]u32, views: [*c]XrViewConfigurationView) XrResult;
pub extern fn xrEnumerateSwapchainFormats(session: XrSession, formatCapacityInput: u32, formatCountOutput: [*c]u32, formats: [*c]i64) XrResult;
pub extern fn xrCreateSwapchain(session: XrSession, createInfo: [*c]const XrSwapchainCreateInfo, swapchain: [*c]XrSwapchain) XrResult;
pub extern fn xrDestroySwapchain(swapchain: XrSwapchain) XrResult;
pub extern fn xrEnumerateSwapchainImages(swapchain: XrSwapchain, imageCapacityInput: u32, imageCountOutput: [*c]u32, images: [*c]XrSwapchainImageBaseHeader) XrResult;
pub extern fn xrAcquireSwapchainImage(swapchain: XrSwapchain, acquireInfo: [*c]const XrSwapchainImageAcquireInfo, index: [*c]u32) XrResult;
pub extern fn xrWaitSwapchainImage(swapchain: XrSwapchain, waitInfo: [*c]const XrSwapchainImageWaitInfo) XrResult;
pub extern fn xrReleaseSwapchainImage(swapchain: XrSwapchain, releaseInfo: [*c]const XrSwapchainImageReleaseInfo) XrResult;
pub extern fn xrBeginSession(session: XrSession, beginInfo: [*c]const XrSessionBeginInfo) XrResult;
pub extern fn xrEndSession(session: XrSession) XrResult;
pub extern fn xrRequestExitSession(session: XrSession) XrResult;
pub extern fn xrWaitFrame(session: XrSession, frameWaitInfo: [*c]const XrFrameWaitInfo, frameState: [*c]XrFrameState) XrResult;
pub extern fn xrBeginFrame(session: XrSession, frameBeginInfo: [*c]const XrFrameBeginInfo) XrResult;
pub extern fn xrEndFrame(session: XrSession, frameEndInfo: [*c]const XrFrameEndInfo) XrResult;
pub extern fn xrLocateViews(session: XrSession, viewLocateInfo: [*c]const XrViewLocateInfo, viewState: [*c]XrViewState, viewCapacityInput: u32, viewCountOutput: [*c]u32, views: [*c]XrView) XrResult;
pub extern fn xrStringToPath(instance: XrInstance, pathString: [*c]const u8, path: [*c]XrPath) XrResult;
pub extern fn xrPathToString(instance: XrInstance, path: XrPath, bufferCapacityInput: u32, bufferCountOutput: [*c]u32, buffer: [*c]u8) XrResult;
pub extern fn xrCreateActionSet(instance: XrInstance, createInfo: [*c]const XrActionSetCreateInfo, actionSet: [*c]XrActionSet) XrResult;
pub extern fn xrDestroyActionSet(actionSet: XrActionSet) XrResult;
pub extern fn xrCreateAction(actionSet: XrActionSet, createInfo: [*c]const XrActionCreateInfo, action: [*c]XrAction) XrResult;
pub extern fn xrDestroyAction(action: XrAction) XrResult;
pub extern fn xrSuggestInteractionProfileBindings(instance: XrInstance, suggestedBindings: [*c]const XrInteractionProfileSuggestedBinding) XrResult;
pub extern fn xrAttachSessionActionSets(session: XrSession, attachInfo: [*c]const XrSessionActionSetsAttachInfo) XrResult;
pub extern fn xrGetCurrentInteractionProfile(session: XrSession, topLevelUserPath: XrPath, interactionProfile: [*c]XrInteractionProfileState) XrResult;
pub extern fn xrGetActionStateBoolean(session: XrSession, getInfo: [*c]const XrActionStateGetInfo, state: [*c]XrActionStateBoolean) XrResult;
pub extern fn xrGetActionStateFloat(session: XrSession, getInfo: [*c]const XrActionStateGetInfo, state: [*c]XrActionStateFloat) XrResult;
pub extern fn xrGetActionStateVector2f(session: XrSession, getInfo: [*c]const XrActionStateGetInfo, state: [*c]XrActionStateVector2f) XrResult;
pub extern fn xrGetActionStatePose(session: XrSession, getInfo: [*c]const XrActionStateGetInfo, state: [*c]XrActionStatePose) XrResult;
pub extern fn xrSyncActions(session: XrSession, syncInfo: [*c]const XrActionsSyncInfo) XrResult;
pub extern fn xrEnumerateBoundSourcesForAction(session: XrSession, enumerateInfo: [*c]const XrBoundSourcesForActionEnumerateInfo, sourceCapacityInput: u32, sourceCountOutput: [*c]u32, sources: [*c]XrPath) XrResult;
pub extern fn xrGetInputSourceLocalizedName(session: XrSession, getInfo: [*c]const XrInputSourceLocalizedNameGetInfo, bufferCapacityInput: u32, bufferCountOutput: [*c]u32, buffer: [*c]u8) XrResult;
pub extern fn xrApplyHapticFeedback(session: XrSession, hapticActionInfo: [*c]const XrHapticActionInfo, hapticFeedback: [*c]const XrHapticBaseHeader) XrResult;
pub extern fn xrStopHapticFeedback(session: XrSession, hapticActionInfo: [*c]const XrHapticActionInfo) XrResult;
pub const struct_XrColor3f = extern struct {
    r: f32 = @import("std").mem.zeroes(f32),
    g: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
};
pub const XrColor3f = struct_XrColor3f;
pub const struct_XrExtent3Df = extern struct {
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
    depth: f32 = @import("std").mem.zeroes(f32),
};
pub const XrExtent3Df = struct_XrExtent3Df;
pub const struct_XrSpheref = extern struct {
    center: XrPosef = @import("std").mem.zeroes(XrPosef),
    radius: f32 = @import("std").mem.zeroes(f32),
};
pub const XrSpheref = struct_XrSpheref;
pub const struct_XrBoxf = extern struct {
    center: XrPosef = @import("std").mem.zeroes(XrPosef),
    extents: XrExtent3Df = @import("std").mem.zeroes(XrExtent3Df),
};
pub const XrBoxf = struct_XrBoxf;
pub const struct_XrFrustumf = extern struct {
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    fov: XrFovf = @import("std").mem.zeroes(XrFovf),
    nearZ: f32 = @import("std").mem.zeroes(f32),
    farZ: f32 = @import("std").mem.zeroes(f32),
};
pub const XrFrustumf = struct_XrFrustumf;
pub const struct_XrUuid = extern struct {
    data: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const XrUuid = struct_XrUuid;
pub const struct_XrSpacesLocateInfo = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    spaceCount: u32 = @import("std").mem.zeroes(u32),
    spaces: [*c]const XrSpace = @import("std").mem.zeroes([*c]const XrSpace),
};
pub const XrSpacesLocateInfo = struct_XrSpacesLocateInfo;
pub const struct_XrSpaceLocationData = extern struct {
    locationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrSpaceLocationData = struct_XrSpaceLocationData;
pub const struct_XrSpaceLocations = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    locationCount: u32 = @import("std").mem.zeroes(u32),
    locations: [*c]XrSpaceLocationData = @import("std").mem.zeroes([*c]XrSpaceLocationData),
};
pub const XrSpaceLocations = struct_XrSpaceLocations;
pub const struct_XrSpaceVelocityData = extern struct {
    velocityFlags: XrSpaceVelocityFlags = @import("std").mem.zeroes(XrSpaceVelocityFlags),
    linearVelocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    angularVelocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrSpaceVelocityData = struct_XrSpaceVelocityData;
pub const struct_XrSpaceVelocities = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    velocityCount: u32 = @import("std").mem.zeroes(u32),
    velocities: [*c]XrSpaceVelocityData = @import("std").mem.zeroes([*c]XrSpaceVelocityData),
};
pub const XrSpaceVelocities = struct_XrSpaceVelocities;
pub const PFN_xrLocateSpaces = ?*const fn (XrSession, [*c]const XrSpacesLocateInfo, [*c]XrSpaceLocations) callconv(.c) XrResult;
pub extern fn xrLocateSpaces(session: XrSession, locateInfo: [*c]const XrSpacesLocateInfo, spaceLocations: [*c]XrSpaceLocations) XrResult;
pub const struct_XrCompositionLayerCubeKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    eyeVisibility: XrEyeVisibility = @import("std").mem.zeroes(XrEyeVisibility),
    swapchain: XrSwapchain = @import("std").mem.zeroes(XrSwapchain),
    imageArrayIndex: u32 = @import("std").mem.zeroes(u32),
    orientation: XrQuaternionf = @import("std").mem.zeroes(XrQuaternionf),
};
pub const XrCompositionLayerCubeKHR = struct_XrCompositionLayerCubeKHR;
pub const struct_XrCompositionLayerDepthInfoKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    subImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    minDepth: f32 = @import("std").mem.zeroes(f32),
    maxDepth: f32 = @import("std").mem.zeroes(f32),
    nearZ: f32 = @import("std").mem.zeroes(f32),
    farZ: f32 = @import("std").mem.zeroes(f32),
};
pub const XrCompositionLayerDepthInfoKHR = struct_XrCompositionLayerDepthInfoKHR;
pub const struct_XrCompositionLayerCylinderKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    eyeVisibility: XrEyeVisibility = @import("std").mem.zeroes(XrEyeVisibility),
    subImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    radius: f32 = @import("std").mem.zeroes(f32),
    centralAngle: f32 = @import("std").mem.zeroes(f32),
    aspectRatio: f32 = @import("std").mem.zeroes(f32),
};
pub const XrCompositionLayerCylinderKHR = struct_XrCompositionLayerCylinderKHR;
pub const struct_XrCompositionLayerEquirectKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    eyeVisibility: XrEyeVisibility = @import("std").mem.zeroes(XrEyeVisibility),
    subImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    radius: f32 = @import("std").mem.zeroes(f32),
    scale: XrVector2f = @import("std").mem.zeroes(XrVector2f),
    bias: XrVector2f = @import("std").mem.zeroes(XrVector2f),
};
pub const XrCompositionLayerEquirectKHR = struct_XrCompositionLayerEquirectKHR;
pub const XR_VISIBILITY_MASK_TYPE_HIDDEN_TRIANGLE_MESH_KHR: c_int = 1;
pub const XR_VISIBILITY_MASK_TYPE_VISIBLE_TRIANGLE_MESH_KHR: c_int = 2;
pub const XR_VISIBILITY_MASK_TYPE_LINE_LOOP_KHR: c_int = 3;
pub const XR_VISIBILITY_MASK_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_XrVisibilityMaskTypeKHR = c_uint;
pub const XrVisibilityMaskTypeKHR = enum_XrVisibilityMaskTypeKHR;
pub const struct_XrVisibilityMaskKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]XrVector2f = @import("std").mem.zeroes([*c]XrVector2f),
    indexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    indexCountOutput: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]u32 = @import("std").mem.zeroes([*c]u32),
};
pub const XrVisibilityMaskKHR = struct_XrVisibilityMaskKHR;
pub const struct_XrEventDataVisibilityMaskChangedKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: XrSession = @import("std").mem.zeroes(XrSession),
    viewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
    viewIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const XrEventDataVisibilityMaskChangedKHR = struct_XrEventDataVisibilityMaskChangedKHR;
pub const PFN_xrGetVisibilityMaskKHR = ?*const fn (XrSession, XrViewConfigurationType, u32, XrVisibilityMaskTypeKHR, [*c]XrVisibilityMaskKHR) callconv(.c) XrResult;
pub const struct_XrCompositionLayerColorScaleBiasKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorScale: XrColor4f = @import("std").mem.zeroes(XrColor4f),
    colorBias: XrColor4f = @import("std").mem.zeroes(XrColor4f),
};
pub const XrCompositionLayerColorScaleBiasKHR = struct_XrCompositionLayerColorScaleBiasKHR;
pub const struct_XrLoaderInitInfoBaseHeaderKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrLoaderInitInfoBaseHeaderKHR = struct_XrLoaderInitInfoBaseHeaderKHR;
pub const PFN_xrInitializeLoaderKHR = ?*const fn ([*c]const XrLoaderInitInfoBaseHeaderKHR) callconv(.c) XrResult;
pub const struct_XrCompositionLayerEquirect2KHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    eyeVisibility: XrEyeVisibility = @import("std").mem.zeroes(XrEyeVisibility),
    subImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    radius: f32 = @import("std").mem.zeroes(f32),
    centralHorizontalAngle: f32 = @import("std").mem.zeroes(f32),
    upperVerticalAngle: f32 = @import("std").mem.zeroes(f32),
    lowerVerticalAngle: f32 = @import("std").mem.zeroes(f32),
};
pub const XrCompositionLayerEquirect2KHR = struct_XrCompositionLayerEquirect2KHR;
pub const struct_XrBindingModificationBaseHeaderKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrBindingModificationBaseHeaderKHR = struct_XrBindingModificationBaseHeaderKHR;
pub const struct_XrBindingModificationsKHR = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bindingModificationCount: u32 = @import("std").mem.zeroes(u32),
    bindingModifications: [*c]const [*c]const XrBindingModificationBaseHeaderKHR = @import("std").mem.zeroes([*c]const [*c]const XrBindingModificationBaseHeaderKHR),
};
pub const XrBindingModificationsKHR = struct_XrBindingModificationsKHR;
pub const XrSpacesLocateInfoKHR = XrSpacesLocateInfo;
pub const XrSpaceLocationDataKHR = XrSpaceLocationData;
pub const XrSpaceLocationsKHR = XrSpaceLocations;
pub const XrSpaceVelocityDataKHR = XrSpaceVelocityData;
pub const XrSpaceVelocitiesKHR = XrSpaceVelocities;
pub const PFN_xrLocateSpacesKHR = ?*const fn (XrSession, [*c]const XrSpacesLocateInfo, [*c]XrSpaceLocations) callconv(.c) XrResult;
pub const XrColor3fKHR = XrColor3f;
pub const XrExtent3DfKHR = XrExtent3Df;
pub const XrSpherefKHR = XrSpheref;
pub const XrBoxfKHR = XrBoxf;
pub const XrFrustumfKHR = XrFrustumf;
pub const XR_PERF_SETTINGS_DOMAIN_CPU_EXT: c_int = 1;
pub const XR_PERF_SETTINGS_DOMAIN_GPU_EXT: c_int = 2;
pub const XR_PERF_SETTINGS_DOMAIN_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPerfSettingsDomainEXT = c_uint;
pub const XrPerfSettingsDomainEXT = enum_XrPerfSettingsDomainEXT;
pub const XR_PERF_SETTINGS_SUB_DOMAIN_COMPOSITING_EXT: c_int = 1;
pub const XR_PERF_SETTINGS_SUB_DOMAIN_RENDERING_EXT: c_int = 2;
pub const XR_PERF_SETTINGS_SUB_DOMAIN_THERMAL_EXT: c_int = 3;
pub const XR_PERF_SETTINGS_SUB_DOMAIN_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPerfSettingsSubDomainEXT = c_uint;
pub const XrPerfSettingsSubDomainEXT = enum_XrPerfSettingsSubDomainEXT;
pub const XR_PERF_SETTINGS_LEVEL_POWER_SAVINGS_EXT: c_int = 0;
pub const XR_PERF_SETTINGS_LEVEL_SUSTAINED_LOW_EXT: c_int = 25;
pub const XR_PERF_SETTINGS_LEVEL_SUSTAINED_HIGH_EXT: c_int = 50;
pub const XR_PERF_SETTINGS_LEVEL_BOOST_EXT: c_int = 75;
pub const XR_PERF_SETTINGS_LEVEL_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPerfSettingsLevelEXT = c_uint;
pub const XrPerfSettingsLevelEXT = enum_XrPerfSettingsLevelEXT;
pub const XR_PERF_SETTINGS_NOTIF_LEVEL_NORMAL_EXT: c_int = 0;
pub const XR_PERF_SETTINGS_NOTIF_LEVEL_WARNING_EXT: c_int = 25;
pub const XR_PERF_SETTINGS_NOTIF_LEVEL_IMPAIRED_EXT: c_int = 75;
pub const XR_PERF_SETTINGS_NOTIFICATION_LEVEL_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPerfSettingsNotificationLevelEXT = c_uint;
pub const XrPerfSettingsNotificationLevelEXT = enum_XrPerfSettingsNotificationLevelEXT;
pub const struct_XrEventDataPerfSettingsEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    domain: XrPerfSettingsDomainEXT = @import("std").mem.zeroes(XrPerfSettingsDomainEXT),
    subDomain: XrPerfSettingsSubDomainEXT = @import("std").mem.zeroes(XrPerfSettingsSubDomainEXT),
    fromLevel: XrPerfSettingsNotificationLevelEXT = @import("std").mem.zeroes(XrPerfSettingsNotificationLevelEXT),
    toLevel: XrPerfSettingsNotificationLevelEXT = @import("std").mem.zeroes(XrPerfSettingsNotificationLevelEXT),
};
pub const XrEventDataPerfSettingsEXT = struct_XrEventDataPerfSettingsEXT;
pub const PFN_xrPerfSettingsSetPerformanceLevelEXT = ?*const fn (XrSession, XrPerfSettingsDomainEXT, XrPerfSettingsLevelEXT) callconv(.c) XrResult;
pub const PFN_xrThermalGetTemperatureTrendEXT = ?*const fn (XrSession, XrPerfSettingsDomainEXT, [*c]XrPerfSettingsNotificationLevelEXT, [*c]f32, [*c]f32) callconv(.c) XrResult;
pub const struct_XrDebugUtilsMessengerEXT_T = opaque {};
pub const XrDebugUtilsMessengerEXT = ?*struct_XrDebugUtilsMessengerEXT_T;
pub const XrDebugUtilsMessageSeverityFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 16;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = @as(XrDebugUtilsMessageSeverityFlagsEXT, @bitCast(@as(c_long, @as(c_int, 256))));
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = @as(XrDebugUtilsMessageSeverityFlagsEXT, @bitCast(@as(c_long, @as(c_int, 4096))));
pub const XrDebugUtilsMessageTypeFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 2;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 4;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 8;
pub const struct_XrDebugUtilsObjectNameInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: XrObjectType = @import("std").mem.zeroes(XrObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    objectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrDebugUtilsObjectNameInfoEXT = struct_XrDebugUtilsObjectNameInfoEXT;
pub const struct_XrDebugUtilsLabelEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    labelName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrDebugUtilsLabelEXT = struct_XrDebugUtilsLabelEXT;
pub const struct_XrDebugUtilsMessengerCallbackDataEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    messageId: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    functionName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    message: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    objectCount: u32 = @import("std").mem.zeroes(u32),
    objects: [*c]XrDebugUtilsObjectNameInfoEXT = @import("std").mem.zeroes([*c]XrDebugUtilsObjectNameInfoEXT),
    sessionLabelCount: u32 = @import("std").mem.zeroes(u32),
    sessionLabels: [*c]XrDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]XrDebugUtilsLabelEXT),
};
pub const XrDebugUtilsMessengerCallbackDataEXT = struct_XrDebugUtilsMessengerCallbackDataEXT;
pub const PFN_xrDebugUtilsMessengerCallbackEXT = ?*const fn (XrDebugUtilsMessageSeverityFlagsEXT, XrDebugUtilsMessageTypeFlagsEXT, [*c]const XrDebugUtilsMessengerCallbackDataEXT, ?*anyopaque) callconv(.c) XrBool32;
pub const struct_XrDebugUtilsMessengerCreateInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    messageSeverities: XrDebugUtilsMessageSeverityFlagsEXT = @import("std").mem.zeroes(XrDebugUtilsMessageSeverityFlagsEXT),
    messageTypes: XrDebugUtilsMessageTypeFlagsEXT = @import("std").mem.zeroes(XrDebugUtilsMessageTypeFlagsEXT),
    userCallback: PFN_xrDebugUtilsMessengerCallbackEXT = @import("std").mem.zeroes(PFN_xrDebugUtilsMessengerCallbackEXT),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const XrDebugUtilsMessengerCreateInfoEXT = struct_XrDebugUtilsMessengerCreateInfoEXT;
pub const PFN_xrSetDebugUtilsObjectNameEXT = ?*const fn (XrInstance, [*c]const XrDebugUtilsObjectNameInfoEXT) callconv(.c) XrResult;
pub const PFN_xrCreateDebugUtilsMessengerEXT = ?*const fn (XrInstance, [*c]const XrDebugUtilsMessengerCreateInfoEXT, [*c]XrDebugUtilsMessengerEXT) callconv(.c) XrResult;
pub const PFN_xrDestroyDebugUtilsMessengerEXT = ?*const fn (XrDebugUtilsMessengerEXT) callconv(.c) XrResult;
pub const PFN_xrSubmitDebugUtilsMessageEXT = ?*const fn (XrInstance, XrDebugUtilsMessageSeverityFlagsEXT, XrDebugUtilsMessageTypeFlagsEXT, [*c]const XrDebugUtilsMessengerCallbackDataEXT) callconv(.c) XrResult;
pub const PFN_xrSessionBeginDebugUtilsLabelRegionEXT = ?*const fn (XrSession, [*c]const XrDebugUtilsLabelEXT) callconv(.c) XrResult;
pub const PFN_xrSessionEndDebugUtilsLabelRegionEXT = ?*const fn (XrSession) callconv(.c) XrResult;
pub const PFN_xrSessionInsertDebugUtilsLabelEXT = ?*const fn (XrSession, [*c]const XrDebugUtilsLabelEXT) callconv(.c) XrResult;
pub const struct_XrSystemEyeGazeInteractionPropertiesEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsEyeGazeInteraction: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemEyeGazeInteractionPropertiesEXT = struct_XrSystemEyeGazeInteractionPropertiesEXT;
pub const struct_XrEyeGazeSampleTimeEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEyeGazeSampleTimeEXT = struct_XrEyeGazeSampleTimeEXT;
pub const XrOverlaySessionCreateFlagsEXTX = XrFlags64;
pub const XrOverlayMainSessionFlagsEXTX = XrFlags64;
pub const XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX: XrOverlayMainSessionFlagsEXTX = 1;
pub const struct_XrSessionCreateInfoOverlayEXTX = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: XrOverlaySessionCreateFlagsEXTX = @import("std").mem.zeroes(XrOverlaySessionCreateFlagsEXTX),
    sessionLayersPlacement: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSessionCreateInfoOverlayEXTX = struct_XrSessionCreateInfoOverlayEXTX;
pub const struct_XrEventDataMainSessionVisibilityChangedEXTX = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    visible: XrBool32 = @import("std").mem.zeroes(XrBool32),
    flags: XrOverlayMainSessionFlagsEXTX = @import("std").mem.zeroes(XrOverlayMainSessionFlagsEXTX),
};
pub const XrEventDataMainSessionVisibilityChangedEXTX = struct_XrEventDataMainSessionVisibilityChangedEXTX;
pub const struct_XrSpatialAnchorMSFT_T = opaque {};
pub const XrSpatialAnchorMSFT = ?*struct_XrSpatialAnchorMSFT_T;
pub const struct_XrSpatialAnchorCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrSpatialAnchorCreateInfoMSFT = struct_XrSpatialAnchorCreateInfoMSFT;
pub const struct_XrSpatialAnchorSpaceCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    anchor: XrSpatialAnchorMSFT = @import("std").mem.zeroes(XrSpatialAnchorMSFT),
    poseInAnchorSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrSpatialAnchorSpaceCreateInfoMSFT = struct_XrSpatialAnchorSpaceCreateInfoMSFT;
pub const PFN_xrCreateSpatialAnchorMSFT = ?*const fn (XrSession, [*c]const XrSpatialAnchorCreateInfoMSFT, [*c]XrSpatialAnchorMSFT) callconv(.c) XrResult;
pub const PFN_xrCreateSpatialAnchorSpaceMSFT = ?*const fn (XrSession, [*c]const XrSpatialAnchorSpaceCreateInfoMSFT, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrDestroySpatialAnchorMSFT = ?*const fn (XrSpatialAnchorMSFT) callconv(.c) XrResult;
pub const XrCompositionLayerImageLayoutFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB: XrCompositionLayerImageLayoutFlagsFB = 1;
pub const struct_XrCompositionLayerImageLayoutFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: XrCompositionLayerImageLayoutFlagsFB = @import("std").mem.zeroes(XrCompositionLayerImageLayoutFlagsFB),
};
pub const XrCompositionLayerImageLayoutFB = struct_XrCompositionLayerImageLayoutFB;
pub const XR_BLEND_FACTOR_ZERO_FB: c_int = 0;
pub const XR_BLEND_FACTOR_ONE_FB: c_int = 1;
pub const XR_BLEND_FACTOR_SRC_ALPHA_FB: c_int = 2;
pub const XR_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA_FB: c_int = 3;
pub const XR_BLEND_FACTOR_DST_ALPHA_FB: c_int = 4;
pub const XR_BLEND_FACTOR_ONE_MINUS_DST_ALPHA_FB: c_int = 5;
pub const XR_BLEND_FACTOR_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrBlendFactorFB = c_uint;
pub const XrBlendFactorFB = enum_XrBlendFactorFB;
pub const struct_XrCompositionLayerAlphaBlendFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    srcFactorColor: XrBlendFactorFB = @import("std").mem.zeroes(XrBlendFactorFB),
    dstFactorColor: XrBlendFactorFB = @import("std").mem.zeroes(XrBlendFactorFB),
    srcFactorAlpha: XrBlendFactorFB = @import("std").mem.zeroes(XrBlendFactorFB),
    dstFactorAlpha: XrBlendFactorFB = @import("std").mem.zeroes(XrBlendFactorFB),
};
pub const XrCompositionLayerAlphaBlendFB = struct_XrCompositionLayerAlphaBlendFB;
pub const struct_XrViewConfigurationDepthRangeEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    recommendedNearZ: f32 = @import("std").mem.zeroes(f32),
    minNearZ: f32 = @import("std").mem.zeroes(f32),
    recommendedFarZ: f32 = @import("std").mem.zeroes(f32),
    maxFarZ: f32 = @import("std").mem.zeroes(f32),
};
pub const XrViewConfigurationDepthRangeEXT = struct_XrViewConfigurationDepthRangeEXT;
pub const PFN_xrSetInputDeviceActiveEXT = ?*const fn (XrSession, XrPath, XrPath, XrBool32) callconv(.c) XrResult;
pub const PFN_xrSetInputDeviceStateBoolEXT = ?*const fn (XrSession, XrPath, XrPath, XrBool32) callconv(.c) XrResult;
pub const PFN_xrSetInputDeviceStateFloatEXT = ?*const fn (XrSession, XrPath, XrPath, f32) callconv(.c) XrResult;
pub const PFN_xrSetInputDeviceStateVector2fEXT = ?*const fn (XrSession, XrPath, XrPath, XrVector2f) callconv(.c) XrResult;
pub const PFN_xrSetInputDeviceLocationEXT = ?*const fn (XrSession, XrPath, XrPath, XrSpace, XrPosef) callconv(.c) XrResult;
pub const struct_XrSpatialGraphNodeBindingMSFT_T = opaque {};
pub const XrSpatialGraphNodeBindingMSFT = ?*struct_XrSpatialGraphNodeBindingMSFT_T;
pub const XR_SPATIAL_GRAPH_NODE_TYPE_STATIC_MSFT: c_int = 1;
pub const XR_SPATIAL_GRAPH_NODE_TYPE_DYNAMIC_MSFT: c_int = 2;
pub const XR_SPATIAL_GRAPH_NODE_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSpatialGraphNodeTypeMSFT = c_uint;
pub const XrSpatialGraphNodeTypeMSFT = enum_XrSpatialGraphNodeTypeMSFT;
pub const struct_XrSpatialGraphNodeSpaceCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    nodeType: XrSpatialGraphNodeTypeMSFT = @import("std").mem.zeroes(XrSpatialGraphNodeTypeMSFT),
    nodeId: [16]u8 = @import("std").mem.zeroes([16]u8),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrSpatialGraphNodeSpaceCreateInfoMSFT = struct_XrSpatialGraphNodeSpaceCreateInfoMSFT;
pub const struct_XrSpatialGraphStaticNodeBindingCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    poseInSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrSpatialGraphStaticNodeBindingCreateInfoMSFT = struct_XrSpatialGraphStaticNodeBindingCreateInfoMSFT;
pub const struct_XrSpatialGraphNodeBindingPropertiesGetInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT = struct_XrSpatialGraphNodeBindingPropertiesGetInfoMSFT;
pub const struct_XrSpatialGraphNodeBindingPropertiesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nodeId: [16]u8 = @import("std").mem.zeroes([16]u8),
    poseInNodeSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrSpatialGraphNodeBindingPropertiesMSFT = struct_XrSpatialGraphNodeBindingPropertiesMSFT;
pub const PFN_xrCreateSpatialGraphNodeSpaceMSFT = ?*const fn (XrSession, [*c]const XrSpatialGraphNodeSpaceCreateInfoMSFT, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT = ?*const fn (XrSession, [*c]const XrSpatialGraphStaticNodeBindingCreateInfoMSFT, [*c]XrSpatialGraphNodeBindingMSFT) callconv(.c) XrResult;
pub const PFN_xrDestroySpatialGraphNodeBindingMSFT = ?*const fn (XrSpatialGraphNodeBindingMSFT) callconv(.c) XrResult;
pub const PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT = ?*const fn (XrSpatialGraphNodeBindingMSFT, [*c]const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT, [*c]XrSpatialGraphNodeBindingPropertiesMSFT) callconv(.c) XrResult;
pub const struct_XrHandTrackerEXT_T = opaque {};
pub const XrHandTrackerEXT = ?*struct_XrHandTrackerEXT_T;
pub const XR_HAND_LEFT_EXT: c_int = 1;
pub const XR_HAND_RIGHT_EXT: c_int = 2;
pub const XR_HAND_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrHandEXT = c_uint;
pub const XrHandEXT = enum_XrHandEXT;
pub const XR_HAND_JOINT_PALM_EXT: c_int = 0;
pub const XR_HAND_JOINT_WRIST_EXT: c_int = 1;
pub const XR_HAND_JOINT_THUMB_METACARPAL_EXT: c_int = 2;
pub const XR_HAND_JOINT_THUMB_PROXIMAL_EXT: c_int = 3;
pub const XR_HAND_JOINT_THUMB_DISTAL_EXT: c_int = 4;
pub const XR_HAND_JOINT_THUMB_TIP_EXT: c_int = 5;
pub const XR_HAND_JOINT_INDEX_METACARPAL_EXT: c_int = 6;
pub const XR_HAND_JOINT_INDEX_PROXIMAL_EXT: c_int = 7;
pub const XR_HAND_JOINT_INDEX_INTERMEDIATE_EXT: c_int = 8;
pub const XR_HAND_JOINT_INDEX_DISTAL_EXT: c_int = 9;
pub const XR_HAND_JOINT_INDEX_TIP_EXT: c_int = 10;
pub const XR_HAND_JOINT_MIDDLE_METACARPAL_EXT: c_int = 11;
pub const XR_HAND_JOINT_MIDDLE_PROXIMAL_EXT: c_int = 12;
pub const XR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT: c_int = 13;
pub const XR_HAND_JOINT_MIDDLE_DISTAL_EXT: c_int = 14;
pub const XR_HAND_JOINT_MIDDLE_TIP_EXT: c_int = 15;
pub const XR_HAND_JOINT_RING_METACARPAL_EXT: c_int = 16;
pub const XR_HAND_JOINT_RING_PROXIMAL_EXT: c_int = 17;
pub const XR_HAND_JOINT_RING_INTERMEDIATE_EXT: c_int = 18;
pub const XR_HAND_JOINT_RING_DISTAL_EXT: c_int = 19;
pub const XR_HAND_JOINT_RING_TIP_EXT: c_int = 20;
pub const XR_HAND_JOINT_LITTLE_METACARPAL_EXT: c_int = 21;
pub const XR_HAND_JOINT_LITTLE_PROXIMAL_EXT: c_int = 22;
pub const XR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT: c_int = 23;
pub const XR_HAND_JOINT_LITTLE_DISTAL_EXT: c_int = 24;
pub const XR_HAND_JOINT_LITTLE_TIP_EXT: c_int = 25;
pub const XR_HAND_JOINT_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrHandJointEXT = c_uint;
pub const XrHandJointEXT = enum_XrHandJointEXT;
pub const XR_HAND_JOINT_SET_DEFAULT_EXT: c_int = 0;
pub const XR_HAND_JOINT_SET_HAND_WITH_FOREARM_ULTRALEAP: c_int = 1000149000;
pub const XR_HAND_JOINT_SET_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrHandJointSetEXT = c_uint;
pub const XrHandJointSetEXT = enum_XrHandJointSetEXT;
pub const struct_XrSystemHandTrackingPropertiesEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsHandTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemHandTrackingPropertiesEXT = struct_XrSystemHandTrackingPropertiesEXT;
pub const struct_XrHandTrackerCreateInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    hand: XrHandEXT = @import("std").mem.zeroes(XrHandEXT),
    handJointSet: XrHandJointSetEXT = @import("std").mem.zeroes(XrHandJointSetEXT),
};
pub const XrHandTrackerCreateInfoEXT = struct_XrHandTrackerCreateInfoEXT;
pub const struct_XrHandJointsLocateInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrHandJointsLocateInfoEXT = struct_XrHandJointsLocateInfoEXT;
pub const struct_XrHandJointLocationEXT = extern struct {
    locationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    radius: f32 = @import("std").mem.zeroes(f32),
};
pub const XrHandJointLocationEXT = struct_XrHandJointLocationEXT;
pub const struct_XrHandJointVelocityEXT = extern struct {
    velocityFlags: XrSpaceVelocityFlags = @import("std").mem.zeroes(XrSpaceVelocityFlags),
    linearVelocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    angularVelocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrHandJointVelocityEXT = struct_XrHandJointVelocityEXT;
pub const struct_XrHandJointLocationsEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
    jointCount: u32 = @import("std").mem.zeroes(u32),
    jointLocations: [*c]XrHandJointLocationEXT = @import("std").mem.zeroes([*c]XrHandJointLocationEXT),
};
pub const XrHandJointLocationsEXT = struct_XrHandJointLocationsEXT;
pub const struct_XrHandJointVelocitiesEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    jointCount: u32 = @import("std").mem.zeroes(u32),
    jointVelocities: [*c]XrHandJointVelocityEXT = @import("std").mem.zeroes([*c]XrHandJointVelocityEXT),
};
pub const XrHandJointVelocitiesEXT = struct_XrHandJointVelocitiesEXT;
pub const PFN_xrCreateHandTrackerEXT = ?*const fn (XrSession, [*c]const XrHandTrackerCreateInfoEXT, [*c]XrHandTrackerEXT) callconv(.c) XrResult;
pub const PFN_xrDestroyHandTrackerEXT = ?*const fn (XrHandTrackerEXT) callconv(.c) XrResult;
pub const PFN_xrLocateHandJointsEXT = ?*const fn (XrHandTrackerEXT, [*c]const XrHandJointsLocateInfoEXT, [*c]XrHandJointLocationsEXT) callconv(.c) XrResult;
pub const XR_HAND_POSE_TYPE_TRACKED_MSFT: c_int = 0;
pub const XR_HAND_POSE_TYPE_REFERENCE_OPEN_PALM_MSFT: c_int = 1;
pub const XR_HAND_POSE_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrHandPoseTypeMSFT = c_uint;
pub const XrHandPoseTypeMSFT = enum_XrHandPoseTypeMSFT;
pub const struct_XrSystemHandTrackingMeshPropertiesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsHandTrackingMesh: XrBool32 = @import("std").mem.zeroes(XrBool32),
    maxHandMeshIndexCount: u32 = @import("std").mem.zeroes(u32),
    maxHandMeshVertexCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSystemHandTrackingMeshPropertiesMSFT = struct_XrSystemHandTrackingMeshPropertiesMSFT;
pub const struct_XrHandMeshSpaceCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handPoseType: XrHandPoseTypeMSFT = @import("std").mem.zeroes(XrHandPoseTypeMSFT),
    poseInHandMeshSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrHandMeshSpaceCreateInfoMSFT = struct_XrHandMeshSpaceCreateInfoMSFT;
pub const struct_XrHandMeshUpdateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    handPoseType: XrHandPoseTypeMSFT = @import("std").mem.zeroes(XrHandPoseTypeMSFT),
};
pub const XrHandMeshUpdateInfoMSFT = struct_XrHandMeshUpdateInfoMSFT;
pub const struct_XrHandMeshIndexBufferMSFT = extern struct {
    indexBufferKey: u32 = @import("std").mem.zeroes(u32),
    indexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    indexCountOutput: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]u32 = @import("std").mem.zeroes([*c]u32),
};
pub const XrHandMeshIndexBufferMSFT = struct_XrHandMeshIndexBufferMSFT;
pub const struct_XrHandMeshVertexMSFT = extern struct {
    position: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    normal: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrHandMeshVertexMSFT = struct_XrHandMeshVertexMSFT;
pub const struct_XrHandMeshVertexBufferMSFT = extern struct {
    vertexUpdateTime: XrTime = @import("std").mem.zeroes(XrTime),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]XrHandMeshVertexMSFT = @import("std").mem.zeroes([*c]XrHandMeshVertexMSFT),
};
pub const XrHandMeshVertexBufferMSFT = struct_XrHandMeshVertexBufferMSFT;
pub const struct_XrHandMeshMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
    indexBufferChanged: XrBool32 = @import("std").mem.zeroes(XrBool32),
    vertexBufferChanged: XrBool32 = @import("std").mem.zeroes(XrBool32),
    indexBuffer: XrHandMeshIndexBufferMSFT = @import("std").mem.zeroes(XrHandMeshIndexBufferMSFT),
    vertexBuffer: XrHandMeshVertexBufferMSFT = @import("std").mem.zeroes(XrHandMeshVertexBufferMSFT),
};
pub const XrHandMeshMSFT = struct_XrHandMeshMSFT;
pub const struct_XrHandPoseTypeInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handPoseType: XrHandPoseTypeMSFT = @import("std").mem.zeroes(XrHandPoseTypeMSFT),
};
pub const XrHandPoseTypeInfoMSFT = struct_XrHandPoseTypeInfoMSFT;
pub const PFN_xrCreateHandMeshSpaceMSFT = ?*const fn (XrHandTrackerEXT, [*c]const XrHandMeshSpaceCreateInfoMSFT, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrUpdateHandMeshMSFT = ?*const fn (XrHandTrackerEXT, [*c]const XrHandMeshUpdateInfoMSFT, [*c]XrHandMeshMSFT) callconv(.c) XrResult;
pub const struct_XrSecondaryViewConfigurationSessionBeginInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewConfigurationCount: u32 = @import("std").mem.zeroes(u32),
    enabledViewConfigurationTypes: [*c]const XrViewConfigurationType = @import("std").mem.zeroes([*c]const XrViewConfigurationType),
};
pub const XrSecondaryViewConfigurationSessionBeginInfoMSFT = struct_XrSecondaryViewConfigurationSessionBeginInfoMSFT;
pub const struct_XrSecondaryViewConfigurationStateMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    viewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
    active: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSecondaryViewConfigurationStateMSFT = struct_XrSecondaryViewConfigurationStateMSFT;
pub const struct_XrSecondaryViewConfigurationFrameStateMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    viewConfigurationCount: u32 = @import("std").mem.zeroes(u32),
    viewConfigurationStates: [*c]XrSecondaryViewConfigurationStateMSFT = @import("std").mem.zeroes([*c]XrSecondaryViewConfigurationStateMSFT),
};
pub const XrSecondaryViewConfigurationFrameStateMSFT = struct_XrSecondaryViewConfigurationFrameStateMSFT;
pub const struct_XrSecondaryViewConfigurationLayerInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
    environmentBlendMode: XrEnvironmentBlendMode = @import("std").mem.zeroes(XrEnvironmentBlendMode),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    layers: [*c]const [*c]const XrCompositionLayerBaseHeader = @import("std").mem.zeroes([*c]const [*c]const XrCompositionLayerBaseHeader),
};
pub const XrSecondaryViewConfigurationLayerInfoMSFT = struct_XrSecondaryViewConfigurationLayerInfoMSFT;
pub const struct_XrSecondaryViewConfigurationFrameEndInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewConfigurationCount: u32 = @import("std").mem.zeroes(u32),
    viewConfigurationLayersInfo: [*c]const XrSecondaryViewConfigurationLayerInfoMSFT = @import("std").mem.zeroes([*c]const XrSecondaryViewConfigurationLayerInfoMSFT),
};
pub const XrSecondaryViewConfigurationFrameEndInfoMSFT = struct_XrSecondaryViewConfigurationFrameEndInfoMSFT;
pub const struct_XrSecondaryViewConfigurationSwapchainCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewConfigurationType: XrViewConfigurationType = @import("std").mem.zeroes(XrViewConfigurationType),
};
pub const XrSecondaryViewConfigurationSwapchainCreateInfoMSFT = struct_XrSecondaryViewConfigurationSwapchainCreateInfoMSFT;
pub const XrControllerModelKeyMSFT = u64;
pub const struct_XrControllerModelKeyStateMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    modelKey: XrControllerModelKeyMSFT = @import("std").mem.zeroes(XrControllerModelKeyMSFT),
};
pub const XrControllerModelKeyStateMSFT = struct_XrControllerModelKeyStateMSFT;
pub const struct_XrControllerModelNodePropertiesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    parentNodeName: [64]u8 = @import("std").mem.zeroes([64]u8),
    nodeName: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const XrControllerModelNodePropertiesMSFT = struct_XrControllerModelNodePropertiesMSFT;
pub const struct_XrControllerModelPropertiesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nodeCapacityInput: u32 = @import("std").mem.zeroes(u32),
    nodeCountOutput: u32 = @import("std").mem.zeroes(u32),
    nodeProperties: [*c]XrControllerModelNodePropertiesMSFT = @import("std").mem.zeroes([*c]XrControllerModelNodePropertiesMSFT),
};
pub const XrControllerModelPropertiesMSFT = struct_XrControllerModelPropertiesMSFT;
pub const struct_XrControllerModelNodeStateMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nodePose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrControllerModelNodeStateMSFT = struct_XrControllerModelNodeStateMSFT;
pub const struct_XrControllerModelStateMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nodeCapacityInput: u32 = @import("std").mem.zeroes(u32),
    nodeCountOutput: u32 = @import("std").mem.zeroes(u32),
    nodeStates: [*c]XrControllerModelNodeStateMSFT = @import("std").mem.zeroes([*c]XrControllerModelNodeStateMSFT),
};
pub const XrControllerModelStateMSFT = struct_XrControllerModelStateMSFT;
pub const PFN_xrGetControllerModelKeyMSFT = ?*const fn (XrSession, XrPath, [*c]XrControllerModelKeyStateMSFT) callconv(.c) XrResult;
pub const PFN_xrLoadControllerModelMSFT = ?*const fn (XrSession, XrControllerModelKeyMSFT, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrGetControllerModelPropertiesMSFT = ?*const fn (XrSession, XrControllerModelKeyMSFT, [*c]XrControllerModelPropertiesMSFT) callconv(.c) XrResult;
pub const PFN_xrGetControllerModelStateMSFT = ?*const fn (XrSession, XrControllerModelKeyMSFT, [*c]XrControllerModelStateMSFT) callconv(.c) XrResult;
pub const struct_XrViewConfigurationViewFovEPIC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    recommendedFov: XrFovf = @import("std").mem.zeroes(XrFovf),
    maxMutableFov: XrFovf = @import("std").mem.zeroes(XrFovf),
};
pub const XrViewConfigurationViewFovEPIC = struct_XrViewConfigurationViewFovEPIC;
pub const XR_REPROJECTION_MODE_DEPTH_MSFT: c_int = 1;
pub const XR_REPROJECTION_MODE_PLANAR_FROM_DEPTH_MSFT: c_int = 2;
pub const XR_REPROJECTION_MODE_PLANAR_MANUAL_MSFT: c_int = 3;
pub const XR_REPROJECTION_MODE_ORIENTATION_ONLY_MSFT: c_int = 4;
pub const XR_REPROJECTION_MODE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrReprojectionModeMSFT = c_uint;
pub const XrReprojectionModeMSFT = enum_XrReprojectionModeMSFT;
pub const struct_XrCompositionLayerReprojectionInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    reprojectionMode: XrReprojectionModeMSFT = @import("std").mem.zeroes(XrReprojectionModeMSFT),
};
pub const XrCompositionLayerReprojectionInfoMSFT = struct_XrCompositionLayerReprojectionInfoMSFT;
pub const struct_XrCompositionLayerReprojectionPlaneOverrideMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    position: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    normal: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    velocity: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrCompositionLayerReprojectionPlaneOverrideMSFT = struct_XrCompositionLayerReprojectionPlaneOverrideMSFT;
pub const PFN_xrEnumerateReprojectionModesMSFT = ?*const fn (XrInstance, XrSystemId, XrViewConfigurationType, u32, [*c]u32, [*c]XrReprojectionModeMSFT) callconv(.c) XrResult;
pub const struct_XrSwapchainStateBaseHeaderFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const XrSwapchainStateBaseHeaderFB = struct_XrSwapchainStateBaseHeaderFB;
pub const PFN_xrUpdateSwapchainFB = ?*const fn (XrSwapchain, [*c]const XrSwapchainStateBaseHeaderFB) callconv(.c) XrResult;
pub const PFN_xrGetSwapchainStateFB = ?*const fn (XrSwapchain, [*c]XrSwapchainStateBaseHeaderFB) callconv(.c) XrResult;
pub const XrCompositionLayerSecureContentFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB: XrCompositionLayerSecureContentFlagsFB = 1;
pub const XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB: XrCompositionLayerSecureContentFlagsFB = 2;
pub const struct_XrCompositionLayerSecureContentFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrCompositionLayerSecureContentFlagsFB = @import("std").mem.zeroes(XrCompositionLayerSecureContentFlagsFB),
};
pub const XrCompositionLayerSecureContentFB = struct_XrCompositionLayerSecureContentFB;
pub const struct_XrBodyTrackerFB_T = opaque {};
pub const XrBodyTrackerFB = ?*struct_XrBodyTrackerFB_T;
pub const XR_BODY_JOINT_ROOT_FB: c_int = 0;
pub const XR_BODY_JOINT_HIPS_FB: c_int = 1;
pub const XR_BODY_JOINT_SPINE_LOWER_FB: c_int = 2;
pub const XR_BODY_JOINT_SPINE_MIDDLE_FB: c_int = 3;
pub const XR_BODY_JOINT_SPINE_UPPER_FB: c_int = 4;
pub const XR_BODY_JOINT_CHEST_FB: c_int = 5;
pub const XR_BODY_JOINT_NECK_FB: c_int = 6;
pub const XR_BODY_JOINT_HEAD_FB: c_int = 7;
pub const XR_BODY_JOINT_LEFT_SHOULDER_FB: c_int = 8;
pub const XR_BODY_JOINT_LEFT_SCAPULA_FB: c_int = 9;
pub const XR_BODY_JOINT_LEFT_ARM_UPPER_FB: c_int = 10;
pub const XR_BODY_JOINT_LEFT_ARM_LOWER_FB: c_int = 11;
pub const XR_BODY_JOINT_LEFT_HAND_WRIST_TWIST_FB: c_int = 12;
pub const XR_BODY_JOINT_RIGHT_SHOULDER_FB: c_int = 13;
pub const XR_BODY_JOINT_RIGHT_SCAPULA_FB: c_int = 14;
pub const XR_BODY_JOINT_RIGHT_ARM_UPPER_FB: c_int = 15;
pub const XR_BODY_JOINT_RIGHT_ARM_LOWER_FB: c_int = 16;
pub const XR_BODY_JOINT_RIGHT_HAND_WRIST_TWIST_FB: c_int = 17;
pub const XR_BODY_JOINT_LEFT_HAND_PALM_FB: c_int = 18;
pub const XR_BODY_JOINT_LEFT_HAND_WRIST_FB: c_int = 19;
pub const XR_BODY_JOINT_LEFT_HAND_THUMB_METACARPAL_FB: c_int = 20;
pub const XR_BODY_JOINT_LEFT_HAND_THUMB_PROXIMAL_FB: c_int = 21;
pub const XR_BODY_JOINT_LEFT_HAND_THUMB_DISTAL_FB: c_int = 22;
pub const XR_BODY_JOINT_LEFT_HAND_THUMB_TIP_FB: c_int = 23;
pub const XR_BODY_JOINT_LEFT_HAND_INDEX_METACARPAL_FB: c_int = 24;
pub const XR_BODY_JOINT_LEFT_HAND_INDEX_PROXIMAL_FB: c_int = 25;
pub const XR_BODY_JOINT_LEFT_HAND_INDEX_INTERMEDIATE_FB: c_int = 26;
pub const XR_BODY_JOINT_LEFT_HAND_INDEX_DISTAL_FB: c_int = 27;
pub const XR_BODY_JOINT_LEFT_HAND_INDEX_TIP_FB: c_int = 28;
pub const XR_BODY_JOINT_LEFT_HAND_MIDDLE_METACARPAL_FB: c_int = 29;
pub const XR_BODY_JOINT_LEFT_HAND_MIDDLE_PROXIMAL_FB: c_int = 30;
pub const XR_BODY_JOINT_LEFT_HAND_MIDDLE_INTERMEDIATE_FB: c_int = 31;
pub const XR_BODY_JOINT_LEFT_HAND_MIDDLE_DISTAL_FB: c_int = 32;
pub const XR_BODY_JOINT_LEFT_HAND_MIDDLE_TIP_FB: c_int = 33;
pub const XR_BODY_JOINT_LEFT_HAND_RING_METACARPAL_FB: c_int = 34;
pub const XR_BODY_JOINT_LEFT_HAND_RING_PROXIMAL_FB: c_int = 35;
pub const XR_BODY_JOINT_LEFT_HAND_RING_INTERMEDIATE_FB: c_int = 36;
pub const XR_BODY_JOINT_LEFT_HAND_RING_DISTAL_FB: c_int = 37;
pub const XR_BODY_JOINT_LEFT_HAND_RING_TIP_FB: c_int = 38;
pub const XR_BODY_JOINT_LEFT_HAND_LITTLE_METACARPAL_FB: c_int = 39;
pub const XR_BODY_JOINT_LEFT_HAND_LITTLE_PROXIMAL_FB: c_int = 40;
pub const XR_BODY_JOINT_LEFT_HAND_LITTLE_INTERMEDIATE_FB: c_int = 41;
pub const XR_BODY_JOINT_LEFT_HAND_LITTLE_DISTAL_FB: c_int = 42;
pub const XR_BODY_JOINT_LEFT_HAND_LITTLE_TIP_FB: c_int = 43;
pub const XR_BODY_JOINT_RIGHT_HAND_PALM_FB: c_int = 44;
pub const XR_BODY_JOINT_RIGHT_HAND_WRIST_FB: c_int = 45;
pub const XR_BODY_JOINT_RIGHT_HAND_THUMB_METACARPAL_FB: c_int = 46;
pub const XR_BODY_JOINT_RIGHT_HAND_THUMB_PROXIMAL_FB: c_int = 47;
pub const XR_BODY_JOINT_RIGHT_HAND_THUMB_DISTAL_FB: c_int = 48;
pub const XR_BODY_JOINT_RIGHT_HAND_THUMB_TIP_FB: c_int = 49;
pub const XR_BODY_JOINT_RIGHT_HAND_INDEX_METACARPAL_FB: c_int = 50;
pub const XR_BODY_JOINT_RIGHT_HAND_INDEX_PROXIMAL_FB: c_int = 51;
pub const XR_BODY_JOINT_RIGHT_HAND_INDEX_INTERMEDIATE_FB: c_int = 52;
pub const XR_BODY_JOINT_RIGHT_HAND_INDEX_DISTAL_FB: c_int = 53;
pub const XR_BODY_JOINT_RIGHT_HAND_INDEX_TIP_FB: c_int = 54;
pub const XR_BODY_JOINT_RIGHT_HAND_MIDDLE_METACARPAL_FB: c_int = 55;
pub const XR_BODY_JOINT_RIGHT_HAND_MIDDLE_PROXIMAL_FB: c_int = 56;
pub const XR_BODY_JOINT_RIGHT_HAND_MIDDLE_INTERMEDIATE_FB: c_int = 57;
pub const XR_BODY_JOINT_RIGHT_HAND_MIDDLE_DISTAL_FB: c_int = 58;
pub const XR_BODY_JOINT_RIGHT_HAND_MIDDLE_TIP_FB: c_int = 59;
pub const XR_BODY_JOINT_RIGHT_HAND_RING_METACARPAL_FB: c_int = 60;
pub const XR_BODY_JOINT_RIGHT_HAND_RING_PROXIMAL_FB: c_int = 61;
pub const XR_BODY_JOINT_RIGHT_HAND_RING_INTERMEDIATE_FB: c_int = 62;
pub const XR_BODY_JOINT_RIGHT_HAND_RING_DISTAL_FB: c_int = 63;
pub const XR_BODY_JOINT_RIGHT_HAND_RING_TIP_FB: c_int = 64;
pub const XR_BODY_JOINT_RIGHT_HAND_LITTLE_METACARPAL_FB: c_int = 65;
pub const XR_BODY_JOINT_RIGHT_HAND_LITTLE_PROXIMAL_FB: c_int = 66;
pub const XR_BODY_JOINT_RIGHT_HAND_LITTLE_INTERMEDIATE_FB: c_int = 67;
pub const XR_BODY_JOINT_RIGHT_HAND_LITTLE_DISTAL_FB: c_int = 68;
pub const XR_BODY_JOINT_RIGHT_HAND_LITTLE_TIP_FB: c_int = 69;
pub const XR_BODY_JOINT_COUNT_FB: c_int = 70;
pub const XR_BODY_JOINT_NONE_FB: c_int = -1;
pub const XR_BODY_JOINT_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrBodyJointFB = c_int;
pub const XrBodyJointFB = enum_XrBodyJointFB;
pub const XR_BODY_JOINT_SET_DEFAULT_FB: c_int = 0;
pub const XR_BODY_JOINT_SET_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrBodyJointSetFB = c_uint;
pub const XrBodyJointSetFB = enum_XrBodyJointSetFB;
pub const struct_XrBodyJointLocationFB = extern struct {
    locationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrBodyJointLocationFB = struct_XrBodyJointLocationFB;
pub const struct_XrSystemBodyTrackingPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsBodyTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemBodyTrackingPropertiesFB = struct_XrSystemBodyTrackingPropertiesFB;
pub const struct_XrBodyTrackerCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bodyJointSet: XrBodyJointSetFB = @import("std").mem.zeroes(XrBodyJointSetFB),
};
pub const XrBodyTrackerCreateInfoFB = struct_XrBodyTrackerCreateInfoFB;
pub const struct_XrBodySkeletonJointFB = extern struct {
    joint: i32 = @import("std").mem.zeroes(i32),
    parentJoint: i32 = @import("std").mem.zeroes(i32),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrBodySkeletonJointFB = struct_XrBodySkeletonJointFB;
pub const struct_XrBodySkeletonFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    jointCount: u32 = @import("std").mem.zeroes(u32),
    joints: [*c]XrBodySkeletonJointFB = @import("std").mem.zeroes([*c]XrBodySkeletonJointFB),
};
pub const XrBodySkeletonFB = struct_XrBodySkeletonFB;
pub const struct_XrBodyJointsLocateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrBodyJointsLocateInfoFB = struct_XrBodyJointsLocateInfoFB;
pub const struct_XrBodyJointLocationsFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
    confidence: f32 = @import("std").mem.zeroes(f32),
    jointCount: u32 = @import("std").mem.zeroes(u32),
    jointLocations: [*c]XrBodyJointLocationFB = @import("std").mem.zeroes([*c]XrBodyJointLocationFB),
    skeletonChangedCount: u32 = @import("std").mem.zeroes(u32),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrBodyJointLocationsFB = struct_XrBodyJointLocationsFB;
pub const PFN_xrCreateBodyTrackerFB = ?*const fn (XrSession, [*c]const XrBodyTrackerCreateInfoFB, [*c]XrBodyTrackerFB) callconv(.c) XrResult;
pub const PFN_xrDestroyBodyTrackerFB = ?*const fn (XrBodyTrackerFB) callconv(.c) XrResult;
pub const PFN_xrLocateBodyJointsFB = ?*const fn (XrBodyTrackerFB, [*c]const XrBodyJointsLocateInfoFB, [*c]XrBodyJointLocationsFB) callconv(.c) XrResult;
pub const PFN_xrGetBodySkeletonFB = ?*const fn (XrBodyTrackerFB, [*c]XrBodySkeletonFB) callconv(.c) XrResult;
pub const struct_XrInteractionProfileDpadBindingEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    binding: XrPath = @import("std").mem.zeroes(XrPath),
    actionSet: XrActionSet = @import("std").mem.zeroes(XrActionSet),
    forceThreshold: f32 = @import("std").mem.zeroes(f32),
    forceThresholdReleased: f32 = @import("std").mem.zeroes(f32),
    centerRegion: f32 = @import("std").mem.zeroes(f32),
    wedgeAngle: f32 = @import("std").mem.zeroes(f32),
    isSticky: XrBool32 = @import("std").mem.zeroes(XrBool32),
    onHaptic: [*c]const XrHapticBaseHeader = @import("std").mem.zeroes([*c]const XrHapticBaseHeader),
    offHaptic: [*c]const XrHapticBaseHeader = @import("std").mem.zeroes([*c]const XrHapticBaseHeader),
};
pub const XrInteractionProfileDpadBindingEXT = struct_XrInteractionProfileDpadBindingEXT;
pub const struct_XrInteractionProfileAnalogThresholdVALVE = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    action: XrAction = @import("std").mem.zeroes(XrAction),
    binding: XrPath = @import("std").mem.zeroes(XrPath),
    onThreshold: f32 = @import("std").mem.zeroes(f32),
    offThreshold: f32 = @import("std").mem.zeroes(f32),
    onHaptic: [*c]const XrHapticBaseHeader = @import("std").mem.zeroes([*c]const XrHapticBaseHeader),
    offHaptic: [*c]const XrHapticBaseHeader = @import("std").mem.zeroes([*c]const XrHapticBaseHeader),
};
pub const XrInteractionProfileAnalogThresholdVALVE = struct_XrInteractionProfileAnalogThresholdVALVE;
pub const XR_HAND_JOINTS_MOTION_RANGE_UNOBSTRUCTED_EXT: c_int = 1;
pub const XR_HAND_JOINTS_MOTION_RANGE_CONFORMING_TO_CONTROLLER_EXT: c_int = 2;
pub const XR_HAND_JOINTS_MOTION_RANGE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrHandJointsMotionRangeEXT = c_uint;
pub const XrHandJointsMotionRangeEXT = enum_XrHandJointsMotionRangeEXT;
pub const struct_XrHandJointsMotionRangeInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handJointsMotionRange: XrHandJointsMotionRangeEXT = @import("std").mem.zeroes(XrHandJointsMotionRangeEXT),
};
pub const XrHandJointsMotionRangeInfoEXT = struct_XrHandJointsMotionRangeInfoEXT;
pub const struct_XrSceneObserverMSFT_T = opaque {};
pub const XrSceneObserverMSFT = ?*struct_XrSceneObserverMSFT_T;
pub const struct_XrSceneMSFT_T = opaque {};
pub const XrSceneMSFT = ?*struct_XrSceneMSFT_T;
pub const XR_SCENE_COMPUTE_FEATURE_PLANE_MSFT: c_int = 1;
pub const XR_SCENE_COMPUTE_FEATURE_PLANE_MESH_MSFT: c_int = 2;
pub const XR_SCENE_COMPUTE_FEATURE_VISUAL_MESH_MSFT: c_int = 3;
pub const XR_SCENE_COMPUTE_FEATURE_COLLIDER_MESH_MSFT: c_int = 4;
pub const XR_SCENE_COMPUTE_FEATURE_SERIALIZE_SCENE_MSFT: c_int = 1000098000;
pub const XR_SCENE_COMPUTE_FEATURE_MARKER_MSFT: c_int = 1000147000;
pub const XR_SCENE_COMPUTE_FEATURE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneComputeFeatureMSFT = c_uint;
pub const XrSceneComputeFeatureMSFT = enum_XrSceneComputeFeatureMSFT;
pub const XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_COMPLETE_MSFT: c_int = 1;
pub const XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_INCOMPLETE_FAST_MSFT: c_int = 2;
pub const XR_SCENE_COMPUTE_CONSISTENCY_OCCLUSION_OPTIMIZED_MSFT: c_int = 3;
pub const XR_SCENE_COMPUTE_CONSISTENCY_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneComputeConsistencyMSFT = c_uint;
pub const XrSceneComputeConsistencyMSFT = enum_XrSceneComputeConsistencyMSFT;
pub const XR_MESH_COMPUTE_LOD_COARSE_MSFT: c_int = 1;
pub const XR_MESH_COMPUTE_LOD_MEDIUM_MSFT: c_int = 2;
pub const XR_MESH_COMPUTE_LOD_FINE_MSFT: c_int = 3;
pub const XR_MESH_COMPUTE_LOD_UNLIMITED_MSFT: c_int = 4;
pub const XR_MESH_COMPUTE_LOD_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrMeshComputeLodMSFT = c_uint;
pub const XrMeshComputeLodMSFT = enum_XrMeshComputeLodMSFT;
pub const XR_SCENE_COMPONENT_TYPE_INVALID_MSFT: c_int = -1;
pub const XR_SCENE_COMPONENT_TYPE_OBJECT_MSFT: c_int = 1;
pub const XR_SCENE_COMPONENT_TYPE_PLANE_MSFT: c_int = 2;
pub const XR_SCENE_COMPONENT_TYPE_VISUAL_MESH_MSFT: c_int = 3;
pub const XR_SCENE_COMPONENT_TYPE_COLLIDER_MESH_MSFT: c_int = 4;
pub const XR_SCENE_COMPONENT_TYPE_SERIALIZED_SCENE_FRAGMENT_MSFT: c_int = 1000098000;
pub const XR_SCENE_COMPONENT_TYPE_MARKER_MSFT: c_int = 1000147000;
pub const XR_SCENE_COMPONENT_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneComponentTypeMSFT = c_int;
pub const XrSceneComponentTypeMSFT = enum_XrSceneComponentTypeMSFT;
pub const XR_SCENE_OBJECT_TYPE_UNCATEGORIZED_MSFT: c_int = -1;
pub const XR_SCENE_OBJECT_TYPE_BACKGROUND_MSFT: c_int = 1;
pub const XR_SCENE_OBJECT_TYPE_WALL_MSFT: c_int = 2;
pub const XR_SCENE_OBJECT_TYPE_FLOOR_MSFT: c_int = 3;
pub const XR_SCENE_OBJECT_TYPE_CEILING_MSFT: c_int = 4;
pub const XR_SCENE_OBJECT_TYPE_PLATFORM_MSFT: c_int = 5;
pub const XR_SCENE_OBJECT_TYPE_INFERRED_MSFT: c_int = 6;
pub const XR_SCENE_OBJECT_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneObjectTypeMSFT = c_int;
pub const XrSceneObjectTypeMSFT = enum_XrSceneObjectTypeMSFT;
pub const XR_SCENE_PLANE_ALIGNMENT_TYPE_NON_ORTHOGONAL_MSFT: c_int = 0;
pub const XR_SCENE_PLANE_ALIGNMENT_TYPE_HORIZONTAL_MSFT: c_int = 1;
pub const XR_SCENE_PLANE_ALIGNMENT_TYPE_VERTICAL_MSFT: c_int = 2;
pub const XR_SCENE_PLANE_ALIGNMENT_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrScenePlaneAlignmentTypeMSFT = c_uint;
pub const XrScenePlaneAlignmentTypeMSFT = enum_XrScenePlaneAlignmentTypeMSFT;
pub const XR_SCENE_COMPUTE_STATE_NONE_MSFT: c_int = 0;
pub const XR_SCENE_COMPUTE_STATE_UPDATING_MSFT: c_int = 1;
pub const XR_SCENE_COMPUTE_STATE_COMPLETED_MSFT: c_int = 2;
pub const XR_SCENE_COMPUTE_STATE_COMPLETED_WITH_ERROR_MSFT: c_int = 3;
pub const XR_SCENE_COMPUTE_STATE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneComputeStateMSFT = c_uint;
pub const XrSceneComputeStateMSFT = enum_XrSceneComputeStateMSFT;
pub const struct_XrUuidMSFT = extern struct {
    bytes: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const XrUuidMSFT = struct_XrUuidMSFT;
pub const struct_XrSceneObserverCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSceneObserverCreateInfoMSFT = struct_XrSceneObserverCreateInfoMSFT;
pub const struct_XrSceneCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSceneCreateInfoMSFT = struct_XrSceneCreateInfoMSFT;
pub const struct_XrSceneSphereBoundMSFT = extern struct {
    center: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    radius: f32 = @import("std").mem.zeroes(f32),
};
pub const XrSceneSphereBoundMSFT = struct_XrSceneSphereBoundMSFT;
pub const struct_XrSceneOrientedBoxBoundMSFT = extern struct {
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    extents: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrSceneOrientedBoxBoundMSFT = struct_XrSceneOrientedBoxBoundMSFT;
pub const struct_XrSceneFrustumBoundMSFT = extern struct {
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    fov: XrFovf = @import("std").mem.zeroes(XrFovf),
    farDistance: f32 = @import("std").mem.zeroes(f32),
};
pub const XrSceneFrustumBoundMSFT = struct_XrSceneFrustumBoundMSFT;
pub const struct_XrSceneBoundsMSFT = extern struct {
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    sphereCount: u32 = @import("std").mem.zeroes(u32),
    spheres: [*c]const XrSceneSphereBoundMSFT = @import("std").mem.zeroes([*c]const XrSceneSphereBoundMSFT),
    boxCount: u32 = @import("std").mem.zeroes(u32),
    boxes: [*c]const XrSceneOrientedBoxBoundMSFT = @import("std").mem.zeroes([*c]const XrSceneOrientedBoxBoundMSFT),
    frustumCount: u32 = @import("std").mem.zeroes(u32),
    frustums: [*c]const XrSceneFrustumBoundMSFT = @import("std").mem.zeroes([*c]const XrSceneFrustumBoundMSFT),
};
pub const XrSceneBoundsMSFT = struct_XrSceneBoundsMSFT;
pub const struct_XrNewSceneComputeInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestedFeatureCount: u32 = @import("std").mem.zeroes(u32),
    requestedFeatures: [*c]const XrSceneComputeFeatureMSFT = @import("std").mem.zeroes([*c]const XrSceneComputeFeatureMSFT),
    consistency: XrSceneComputeConsistencyMSFT = @import("std").mem.zeroes(XrSceneComputeConsistencyMSFT),
    bounds: XrSceneBoundsMSFT = @import("std").mem.zeroes(XrSceneBoundsMSFT),
};
pub const XrNewSceneComputeInfoMSFT = struct_XrNewSceneComputeInfoMSFT;
pub const struct_XrVisualMeshComputeLodInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lod: XrMeshComputeLodMSFT = @import("std").mem.zeroes(XrMeshComputeLodMSFT),
};
pub const XrVisualMeshComputeLodInfoMSFT = struct_XrVisualMeshComputeLodInfoMSFT;
pub const struct_XrSceneComponentMSFT = extern struct {
    componentType: XrSceneComponentTypeMSFT = @import("std").mem.zeroes(XrSceneComponentTypeMSFT),
    id: XrUuidMSFT = @import("std").mem.zeroes(XrUuidMSFT),
    parentId: XrUuidMSFT = @import("std").mem.zeroes(XrUuidMSFT),
    updateTime: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrSceneComponentMSFT = struct_XrSceneComponentMSFT;
pub const struct_XrSceneComponentsMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    componentCapacityInput: u32 = @import("std").mem.zeroes(u32),
    componentCountOutput: u32 = @import("std").mem.zeroes(u32),
    components: [*c]XrSceneComponentMSFT = @import("std").mem.zeroes([*c]XrSceneComponentMSFT),
};
pub const XrSceneComponentsMSFT = struct_XrSceneComponentsMSFT;
pub const struct_XrSceneComponentsGetInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    componentType: XrSceneComponentTypeMSFT = @import("std").mem.zeroes(XrSceneComponentTypeMSFT),
};
pub const XrSceneComponentsGetInfoMSFT = struct_XrSceneComponentsGetInfoMSFT;
pub const struct_XrSceneComponentLocationMSFT = extern struct {
    flags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrSceneComponentLocationMSFT = struct_XrSceneComponentLocationMSFT;
pub const struct_XrSceneComponentLocationsMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    locationCount: u32 = @import("std").mem.zeroes(u32),
    locations: [*c]XrSceneComponentLocationMSFT = @import("std").mem.zeroes([*c]XrSceneComponentLocationMSFT),
};
pub const XrSceneComponentLocationsMSFT = struct_XrSceneComponentLocationsMSFT;
pub const struct_XrSceneComponentsLocateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    componentIdCount: u32 = @import("std").mem.zeroes(u32),
    componentIds: [*c]const XrUuidMSFT = @import("std").mem.zeroes([*c]const XrUuidMSFT),
};
pub const XrSceneComponentsLocateInfoMSFT = struct_XrSceneComponentsLocateInfoMSFT;
pub const struct_XrSceneObjectMSFT = extern struct {
    objectType: XrSceneObjectTypeMSFT = @import("std").mem.zeroes(XrSceneObjectTypeMSFT),
};
pub const XrSceneObjectMSFT = struct_XrSceneObjectMSFT;
pub const struct_XrSceneObjectsMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sceneObjectCount: u32 = @import("std").mem.zeroes(u32),
    sceneObjects: [*c]XrSceneObjectMSFT = @import("std").mem.zeroes([*c]XrSceneObjectMSFT),
};
pub const XrSceneObjectsMSFT = struct_XrSceneObjectsMSFT;
pub const struct_XrSceneComponentParentFilterInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    parentId: XrUuidMSFT = @import("std").mem.zeroes(XrUuidMSFT),
};
pub const XrSceneComponentParentFilterInfoMSFT = struct_XrSceneComponentParentFilterInfoMSFT;
pub const struct_XrSceneObjectTypesFilterInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectTypeCount: u32 = @import("std").mem.zeroes(u32),
    objectTypes: [*c]const XrSceneObjectTypeMSFT = @import("std").mem.zeroes([*c]const XrSceneObjectTypeMSFT),
};
pub const XrSceneObjectTypesFilterInfoMSFT = struct_XrSceneObjectTypesFilterInfoMSFT;
pub const struct_XrScenePlaneMSFT = extern struct {
    alignment: XrScenePlaneAlignmentTypeMSFT = @import("std").mem.zeroes(XrScenePlaneAlignmentTypeMSFT),
    size: XrExtent2Df = @import("std").mem.zeroes(XrExtent2Df),
    meshBufferId: u64 = @import("std").mem.zeroes(u64),
    supportsIndicesUint16: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrScenePlaneMSFT = struct_XrScenePlaneMSFT;
pub const struct_XrScenePlanesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    scenePlaneCount: u32 = @import("std").mem.zeroes(u32),
    scenePlanes: [*c]XrScenePlaneMSFT = @import("std").mem.zeroes([*c]XrScenePlaneMSFT),
};
pub const XrScenePlanesMSFT = struct_XrScenePlanesMSFT;
pub const struct_XrScenePlaneAlignmentFilterInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    alignmentCount: u32 = @import("std").mem.zeroes(u32),
    alignments: [*c]const XrScenePlaneAlignmentTypeMSFT = @import("std").mem.zeroes([*c]const XrScenePlaneAlignmentTypeMSFT),
};
pub const XrScenePlaneAlignmentFilterInfoMSFT = struct_XrScenePlaneAlignmentFilterInfoMSFT;
pub const struct_XrSceneMeshMSFT = extern struct {
    meshBufferId: u64 = @import("std").mem.zeroes(u64),
    supportsIndicesUint16: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSceneMeshMSFT = struct_XrSceneMeshMSFT;
pub const struct_XrSceneMeshesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sceneMeshCount: u32 = @import("std").mem.zeroes(u32),
    sceneMeshes: [*c]XrSceneMeshMSFT = @import("std").mem.zeroes([*c]XrSceneMeshMSFT),
};
pub const XrSceneMeshesMSFT = struct_XrSceneMeshesMSFT;
pub const struct_XrSceneMeshBuffersGetInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    meshBufferId: u64 = @import("std").mem.zeroes(u64),
};
pub const XrSceneMeshBuffersGetInfoMSFT = struct_XrSceneMeshBuffersGetInfoMSFT;
pub const struct_XrSceneMeshBuffersMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const XrSceneMeshBuffersMSFT = struct_XrSceneMeshBuffersMSFT;
pub const struct_XrSceneMeshVertexBufferMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]XrVector3f = @import("std").mem.zeroes([*c]XrVector3f),
};
pub const XrSceneMeshVertexBufferMSFT = struct_XrSceneMeshVertexBufferMSFT;
pub const struct_XrSceneMeshIndicesUint32MSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    indexCountOutput: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]u32 = @import("std").mem.zeroes([*c]u32),
};
pub const XrSceneMeshIndicesUint32MSFT = struct_XrSceneMeshIndicesUint32MSFT;
pub const struct_XrSceneMeshIndicesUint16MSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    indexCountOutput: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]u16 = @import("std").mem.zeroes([*c]u16),
};
pub const XrSceneMeshIndicesUint16MSFT = struct_XrSceneMeshIndicesUint16MSFT;
pub const PFN_xrEnumerateSceneComputeFeaturesMSFT = ?*const fn (XrInstance, XrSystemId, u32, [*c]u32, [*c]XrSceneComputeFeatureMSFT) callconv(.c) XrResult;
pub const PFN_xrCreateSceneObserverMSFT = ?*const fn (XrSession, [*c]const XrSceneObserverCreateInfoMSFT, [*c]XrSceneObserverMSFT) callconv(.c) XrResult;
pub const PFN_xrDestroySceneObserverMSFT = ?*const fn (XrSceneObserverMSFT) callconv(.c) XrResult;
pub const PFN_xrCreateSceneMSFT = ?*const fn (XrSceneObserverMSFT, [*c]const XrSceneCreateInfoMSFT, [*c]XrSceneMSFT) callconv(.c) XrResult;
pub const PFN_xrDestroySceneMSFT = ?*const fn (XrSceneMSFT) callconv(.c) XrResult;
pub const PFN_xrComputeNewSceneMSFT = ?*const fn (XrSceneObserverMSFT, [*c]const XrNewSceneComputeInfoMSFT) callconv(.c) XrResult;
pub const PFN_xrGetSceneComputeStateMSFT = ?*const fn (XrSceneObserverMSFT, [*c]XrSceneComputeStateMSFT) callconv(.c) XrResult;
pub const PFN_xrGetSceneComponentsMSFT = ?*const fn (XrSceneMSFT, [*c]const XrSceneComponentsGetInfoMSFT, [*c]XrSceneComponentsMSFT) callconv(.c) XrResult;
pub const PFN_xrLocateSceneComponentsMSFT = ?*const fn (XrSceneMSFT, [*c]const XrSceneComponentsLocateInfoMSFT, [*c]XrSceneComponentLocationsMSFT) callconv(.c) XrResult;
pub const PFN_xrGetSceneMeshBuffersMSFT = ?*const fn (XrSceneMSFT, [*c]const XrSceneMeshBuffersGetInfoMSFT, [*c]XrSceneMeshBuffersMSFT) callconv(.c) XrResult;
pub const struct_XrSerializedSceneFragmentDataGetInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sceneFragmentId: XrUuidMSFT = @import("std").mem.zeroes(XrUuidMSFT),
};
pub const XrSerializedSceneFragmentDataGetInfoMSFT = struct_XrSerializedSceneFragmentDataGetInfoMSFT;
pub const struct_XrDeserializeSceneFragmentMSFT = extern struct {
    bufferSize: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrDeserializeSceneFragmentMSFT = struct_XrDeserializeSceneFragmentMSFT;
pub const struct_XrSceneDeserializeInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentCount: u32 = @import("std").mem.zeroes(u32),
    fragments: [*c]const XrDeserializeSceneFragmentMSFT = @import("std").mem.zeroes([*c]const XrDeserializeSceneFragmentMSFT),
};
pub const XrSceneDeserializeInfoMSFT = struct_XrSceneDeserializeInfoMSFT;
pub const PFN_xrDeserializeSceneMSFT = ?*const fn (XrSceneObserverMSFT, [*c]const XrSceneDeserializeInfoMSFT) callconv(.c) XrResult;
pub const PFN_xrGetSerializedSceneFragmentDataMSFT = ?*const fn (XrSceneMSFT, [*c]const XrSerializedSceneFragmentDataGetInfoMSFT, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const struct_XrEventDataDisplayRefreshRateChangedFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fromDisplayRefreshRate: f32 = @import("std").mem.zeroes(f32),
    toDisplayRefreshRate: f32 = @import("std").mem.zeroes(f32),
};
pub const XrEventDataDisplayRefreshRateChangedFB = struct_XrEventDataDisplayRefreshRateChangedFB;
pub const PFN_xrEnumerateDisplayRefreshRatesFB = ?*const fn (XrSession, u32, [*c]u32, [*c]f32) callconv(.c) XrResult;
pub const PFN_xrGetDisplayRefreshRateFB = ?*const fn (XrSession, [*c]f32) callconv(.c) XrResult;
pub const PFN_xrRequestDisplayRefreshRateFB = ?*const fn (XrSession, f32) callconv(.c) XrResult;
pub const struct_XrViveTrackerPathsHTCX = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    persistentPath: XrPath = @import("std").mem.zeroes(XrPath),
    rolePath: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrViveTrackerPathsHTCX = struct_XrViveTrackerPathsHTCX;
pub const struct_XrEventDataViveTrackerConnectedHTCX = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    paths: [*c]XrViveTrackerPathsHTCX = @import("std").mem.zeroes([*c]XrViveTrackerPathsHTCX),
};
pub const XrEventDataViveTrackerConnectedHTCX = struct_XrEventDataViveTrackerConnectedHTCX;
pub const PFN_xrEnumerateViveTrackerPathsHTCX = ?*const fn (XrInstance, u32, [*c]u32, [*c]XrViveTrackerPathsHTCX) callconv(.c) XrResult;
pub const struct_XrFacialTrackerHTC_T = opaque {};
pub const XrFacialTrackerHTC = ?*struct_XrFacialTrackerHTC_T;
pub const XR_EYE_EXPRESSION_LEFT_BLINK_HTC: c_int = 0;
pub const XR_EYE_EXPRESSION_LEFT_WIDE_HTC: c_int = 1;
pub const XR_EYE_EXPRESSION_RIGHT_BLINK_HTC: c_int = 2;
pub const XR_EYE_EXPRESSION_RIGHT_WIDE_HTC: c_int = 3;
pub const XR_EYE_EXPRESSION_LEFT_SQUEEZE_HTC: c_int = 4;
pub const XR_EYE_EXPRESSION_RIGHT_SQUEEZE_HTC: c_int = 5;
pub const XR_EYE_EXPRESSION_LEFT_DOWN_HTC: c_int = 6;
pub const XR_EYE_EXPRESSION_RIGHT_DOWN_HTC: c_int = 7;
pub const XR_EYE_EXPRESSION_LEFT_OUT_HTC: c_int = 8;
pub const XR_EYE_EXPRESSION_RIGHT_IN_HTC: c_int = 9;
pub const XR_EYE_EXPRESSION_LEFT_IN_HTC: c_int = 10;
pub const XR_EYE_EXPRESSION_RIGHT_OUT_HTC: c_int = 11;
pub const XR_EYE_EXPRESSION_LEFT_UP_HTC: c_int = 12;
pub const XR_EYE_EXPRESSION_RIGHT_UP_HTC: c_int = 13;
pub const XR_EYE_EXPRESSION_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrEyeExpressionHTC = c_uint;
pub const XrEyeExpressionHTC = enum_XrEyeExpressionHTC;
pub const XR_LIP_EXPRESSION_JAW_RIGHT_HTC: c_int = 0;
pub const XR_LIP_EXPRESSION_JAW_LEFT_HTC: c_int = 1;
pub const XR_LIP_EXPRESSION_JAW_FORWARD_HTC: c_int = 2;
pub const XR_LIP_EXPRESSION_JAW_OPEN_HTC: c_int = 3;
pub const XR_LIP_EXPRESSION_MOUTH_APE_SHAPE_HTC: c_int = 4;
pub const XR_LIP_EXPRESSION_MOUTH_UPPER_RIGHT_HTC: c_int = 5;
pub const XR_LIP_EXPRESSION_MOUTH_UPPER_LEFT_HTC: c_int = 6;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_RIGHT_HTC: c_int = 7;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_LEFT_HTC: c_int = 8;
pub const XR_LIP_EXPRESSION_MOUTH_UPPER_OVERTURN_HTC: c_int = 9;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_OVERTURN_HTC: c_int = 10;
pub const XR_LIP_EXPRESSION_MOUTH_POUT_HTC: c_int = 11;
pub const XR_LIP_EXPRESSION_MOUTH_RAISER_RIGHT_HTC: c_int = 12;
pub const XR_LIP_EXPRESSION_MOUTH_RAISER_LEFT_HTC: c_int = 13;
pub const XR_LIP_EXPRESSION_MOUTH_STRETCHER_RIGHT_HTC: c_int = 14;
pub const XR_LIP_EXPRESSION_MOUTH_STRETCHER_LEFT_HTC: c_int = 15;
pub const XR_LIP_EXPRESSION_CHEEK_PUFF_RIGHT_HTC: c_int = 16;
pub const XR_LIP_EXPRESSION_CHEEK_PUFF_LEFT_HTC: c_int = 17;
pub const XR_LIP_EXPRESSION_CHEEK_SUCK_HTC: c_int = 18;
pub const XR_LIP_EXPRESSION_MOUTH_UPPER_UPRIGHT_HTC: c_int = 19;
pub const XR_LIP_EXPRESSION_MOUTH_UPPER_UPLEFT_HTC: c_int = 20;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNRIGHT_HTC: c_int = 21;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNLEFT_HTC: c_int = 22;
pub const XR_LIP_EXPRESSION_MOUTH_UPPER_INSIDE_HTC: c_int = 23;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_INSIDE_HTC: c_int = 24;
pub const XR_LIP_EXPRESSION_MOUTH_LOWER_OVERLAY_HTC: c_int = 25;
pub const XR_LIP_EXPRESSION_TONGUE_LONGSTEP1_HTC: c_int = 26;
pub const XR_LIP_EXPRESSION_TONGUE_LEFT_HTC: c_int = 27;
pub const XR_LIP_EXPRESSION_TONGUE_RIGHT_HTC: c_int = 28;
pub const XR_LIP_EXPRESSION_TONGUE_UP_HTC: c_int = 29;
pub const XR_LIP_EXPRESSION_TONGUE_DOWN_HTC: c_int = 30;
pub const XR_LIP_EXPRESSION_TONGUE_ROLL_HTC: c_int = 31;
pub const XR_LIP_EXPRESSION_TONGUE_LONGSTEP2_HTC: c_int = 32;
pub const XR_LIP_EXPRESSION_TONGUE_UPRIGHT_MORPH_HTC: c_int = 33;
pub const XR_LIP_EXPRESSION_TONGUE_UPLEFT_MORPH_HTC: c_int = 34;
pub const XR_LIP_EXPRESSION_TONGUE_DOWNRIGHT_MORPH_HTC: c_int = 35;
pub const XR_LIP_EXPRESSION_TONGUE_DOWNLEFT_MORPH_HTC: c_int = 36;
pub const XR_LIP_EXPRESSION_MOUTH_SMILE_RIGHT_HTC: c_int = 12;
pub const XR_LIP_EXPRESSION_MOUTH_SMILE_LEFT_HTC: c_int = 13;
pub const XR_LIP_EXPRESSION_MOUTH_SAD_RIGHT_HTC: c_int = 14;
pub const XR_LIP_EXPRESSION_MOUTH_SAD_LEFT_HTC: c_int = 15;
pub const XR_LIP_EXPRESSION_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrLipExpressionHTC = c_uint;
pub const XrLipExpressionHTC = enum_XrLipExpressionHTC;
pub const XR_FACIAL_TRACKING_TYPE_EYE_DEFAULT_HTC: c_int = 1;
pub const XR_FACIAL_TRACKING_TYPE_LIP_DEFAULT_HTC: c_int = 2;
pub const XR_FACIAL_TRACKING_TYPE_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrFacialTrackingTypeHTC = c_uint;
pub const XrFacialTrackingTypeHTC = enum_XrFacialTrackingTypeHTC;
pub const struct_XrSystemFacialTrackingPropertiesHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportEyeFacialTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
    supportLipFacialTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemFacialTrackingPropertiesHTC = struct_XrSystemFacialTrackingPropertiesHTC;
pub const struct_XrFacialExpressionsHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
    sampleTime: XrTime = @import("std").mem.zeroes(XrTime),
    expressionCount: u32 = @import("std").mem.zeroes(u32),
    expressionWeightings: [*c]f32 = @import("std").mem.zeroes([*c]f32),
};
pub const XrFacialExpressionsHTC = struct_XrFacialExpressionsHTC;
pub const struct_XrFacialTrackerCreateInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    facialTrackingType: XrFacialTrackingTypeHTC = @import("std").mem.zeroes(XrFacialTrackingTypeHTC),
};
pub const XrFacialTrackerCreateInfoHTC = struct_XrFacialTrackerCreateInfoHTC;
pub const PFN_xrCreateFacialTrackerHTC = ?*const fn (XrSession, [*c]const XrFacialTrackerCreateInfoHTC, [*c]XrFacialTrackerHTC) callconv(.c) XrResult;
pub const PFN_xrDestroyFacialTrackerHTC = ?*const fn (XrFacialTrackerHTC) callconv(.c) XrResult;
pub const PFN_xrGetFacialExpressionsHTC = ?*const fn (XrFacialTrackerHTC, [*c]XrFacialExpressionsHTC) callconv(.c) XrResult;
pub const XR_COLOR_SPACE_UNMANAGED_FB: c_int = 0;
pub const XR_COLOR_SPACE_REC2020_FB: c_int = 1;
pub const XR_COLOR_SPACE_REC709_FB: c_int = 2;
pub const XR_COLOR_SPACE_RIFT_CV1_FB: c_int = 3;
pub const XR_COLOR_SPACE_RIFT_S_FB: c_int = 4;
pub const XR_COLOR_SPACE_QUEST_FB: c_int = 5;
pub const XR_COLOR_SPACE_P3_FB: c_int = 6;
pub const XR_COLOR_SPACE_ADOBE_RGB_FB: c_int = 7;
pub const XR_COLOR_SPACE_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrColorSpaceFB = c_uint;
pub const XrColorSpaceFB = enum_XrColorSpaceFB;
pub const struct_XrSystemColorSpacePropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    colorSpace: XrColorSpaceFB = @import("std").mem.zeroes(XrColorSpaceFB),
};
pub const XrSystemColorSpacePropertiesFB = struct_XrSystemColorSpacePropertiesFB;
pub const PFN_xrEnumerateColorSpacesFB = ?*const fn (XrSession, u32, [*c]u32, [*c]XrColorSpaceFB) callconv(.c) XrResult;
pub const PFN_xrSetColorSpaceFB = ?*const fn (XrSession, XrColorSpaceFB) callconv(.c) XrResult;
pub const struct_XrVector4sFB = extern struct {
    x: i16 = @import("std").mem.zeroes(i16),
    y: i16 = @import("std").mem.zeroes(i16),
    z: i16 = @import("std").mem.zeroes(i16),
    w: i16 = @import("std").mem.zeroes(i16),
};
pub const XrVector4sFB = struct_XrVector4sFB;
pub const struct_XrHandTrackingMeshFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    jointCapacityInput: u32 = @import("std").mem.zeroes(u32),
    jointCountOutput: u32 = @import("std").mem.zeroes(u32),
    jointBindPoses: [*c]XrPosef = @import("std").mem.zeroes([*c]XrPosef),
    jointRadii: [*c]f32 = @import("std").mem.zeroes([*c]f32),
    jointParents: [*c]XrHandJointEXT = @import("std").mem.zeroes([*c]XrHandJointEXT),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertexPositions: [*c]XrVector3f = @import("std").mem.zeroes([*c]XrVector3f),
    vertexNormals: [*c]XrVector3f = @import("std").mem.zeroes([*c]XrVector3f),
    vertexUVs: [*c]XrVector2f = @import("std").mem.zeroes([*c]XrVector2f),
    vertexBlendIndices: [*c]XrVector4sFB = @import("std").mem.zeroes([*c]XrVector4sFB),
    vertexBlendWeights: [*c]XrVector4f = @import("std").mem.zeroes([*c]XrVector4f),
    indexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    indexCountOutput: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]i16 = @import("std").mem.zeroes([*c]i16),
};
pub const XrHandTrackingMeshFB = struct_XrHandTrackingMeshFB;
pub const struct_XrHandTrackingScaleFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sensorOutput: f32 = @import("std").mem.zeroes(f32),
    currentOutput: f32 = @import("std").mem.zeroes(f32),
    overrideHandScale: XrBool32 = @import("std").mem.zeroes(XrBool32),
    overrideValueInput: f32 = @import("std").mem.zeroes(f32),
};
pub const XrHandTrackingScaleFB = struct_XrHandTrackingScaleFB;
pub const PFN_xrGetHandMeshFB = ?*const fn (XrHandTrackerEXT, [*c]XrHandTrackingMeshFB) callconv(.c) XrResult;
pub const XrHandTrackingAimFlagsFB = XrFlags64;
pub const XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB: XrHandTrackingAimFlagsFB = 1;
pub const XR_HAND_TRACKING_AIM_VALID_BIT_FB: XrHandTrackingAimFlagsFB = 2;
pub const XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 4;
pub const XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 8;
pub const XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 16;
pub const XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 32;
pub const XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB: XrHandTrackingAimFlagsFB = 64;
pub const XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB: XrHandTrackingAimFlagsFB = 128;
pub const XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB: XrHandTrackingAimFlagsFB = @as(XrHandTrackingAimFlagsFB, @bitCast(@as(c_long, @as(c_int, 256))));
pub const struct_XrHandTrackingAimStateFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    status: XrHandTrackingAimFlagsFB = @import("std").mem.zeroes(XrHandTrackingAimFlagsFB),
    aimPose: XrPosef = @import("std").mem.zeroes(XrPosef),
    pinchStrengthIndex: f32 = @import("std").mem.zeroes(f32),
    pinchStrengthMiddle: f32 = @import("std").mem.zeroes(f32),
    pinchStrengthRing: f32 = @import("std").mem.zeroes(f32),
    pinchStrengthLittle: f32 = @import("std").mem.zeroes(f32),
};
pub const XrHandTrackingAimStateFB = struct_XrHandTrackingAimStateFB;
pub const struct_XrHandCapsuleFB = extern struct {
    points: [2]XrVector3f = @import("std").mem.zeroes([2]XrVector3f),
    radius: f32 = @import("std").mem.zeroes(f32),
    joint: XrHandJointEXT = @import("std").mem.zeroes(XrHandJointEXT),
};
pub const XrHandCapsuleFB = struct_XrHandCapsuleFB;
pub const struct_XrHandTrackingCapsulesStateFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    capsules: [19]XrHandCapsuleFB = @import("std").mem.zeroes([19]XrHandCapsuleFB),
};
pub const XrHandTrackingCapsulesStateFB = struct_XrHandTrackingCapsulesStateFB;
pub const XrAsyncRequestIdFB = u64;
pub const XR_SPACE_COMPONENT_TYPE_LOCATABLE_FB: c_int = 0;
pub const XR_SPACE_COMPONENT_TYPE_STORABLE_FB: c_int = 1;
pub const XR_SPACE_COMPONENT_TYPE_SHARABLE_FB: c_int = 2;
pub const XR_SPACE_COMPONENT_TYPE_BOUNDED_2D_FB: c_int = 3;
pub const XR_SPACE_COMPONENT_TYPE_BOUNDED_3D_FB: c_int = 4;
pub const XR_SPACE_COMPONENT_TYPE_SEMANTIC_LABELS_FB: c_int = 5;
pub const XR_SPACE_COMPONENT_TYPE_ROOM_LAYOUT_FB: c_int = 6;
pub const XR_SPACE_COMPONENT_TYPE_SPACE_CONTAINER_FB: c_int = 7;
pub const XR_SPACE_COMPONENT_TYPE_TRIANGLE_MESH_META: c_int = 1000269000;
pub const XR_SPACE_COMPONENT_TYPE_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrSpaceComponentTypeFB = c_uint;
pub const XrSpaceComponentTypeFB = enum_XrSpaceComponentTypeFB;
pub const struct_XrSystemSpatialEntityPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    supportsSpatialEntity: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemSpatialEntityPropertiesFB = struct_XrSystemSpatialEntityPropertiesFB;
pub const struct_XrSpatialAnchorCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    poseInSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrSpatialAnchorCreateInfoFB = struct_XrSpatialAnchorCreateInfoFB;
pub const struct_XrSpaceComponentStatusSetInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    componentType: XrSpaceComponentTypeFB = @import("std").mem.zeroes(XrSpaceComponentTypeFB),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
    timeout: XrDuration = @import("std").mem.zeroes(XrDuration),
};
pub const XrSpaceComponentStatusSetInfoFB = struct_XrSpaceComponentStatusSetInfoFB;
pub const struct_XrSpaceComponentStatusFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
    changePending: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSpaceComponentStatusFB = struct_XrSpaceComponentStatusFB;
pub const XrUuidEXT = XrUuid;
pub const struct_XrEventDataSpatialAnchorCreateCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
};
pub const XrEventDataSpatialAnchorCreateCompleteFB = struct_XrEventDataSpatialAnchorCreateCompleteFB;
pub const struct_XrEventDataSpaceSetStatusCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    componentType: XrSpaceComponentTypeFB = @import("std").mem.zeroes(XrSpaceComponentTypeFB),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrEventDataSpaceSetStatusCompleteFB = struct_XrEventDataSpaceSetStatusCompleteFB;
pub const PFN_xrCreateSpatialAnchorFB = ?*const fn (XrSession, [*c]const XrSpatialAnchorCreateInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrGetSpaceUuidFB = ?*const fn (XrSpace, [*c]XrUuidEXT) callconv(.c) XrResult;
pub const PFN_xrEnumerateSpaceSupportedComponentsFB = ?*const fn (XrSpace, u32, [*c]u32, [*c]XrSpaceComponentTypeFB) callconv(.c) XrResult;
pub const PFN_xrSetSpaceComponentStatusFB = ?*const fn (XrSpace, [*c]const XrSpaceComponentStatusSetInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrGetSpaceComponentStatusFB = ?*const fn (XrSpace, XrSpaceComponentTypeFB, [*c]XrSpaceComponentStatusFB) callconv(.c) XrResult;
pub const struct_XrFoveationProfileFB_T = opaque {};
pub const XrFoveationProfileFB = ?*struct_XrFoveationProfileFB_T;
pub const XrSwapchainCreateFoveationFlagsFB = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB: XrSwapchainCreateFoveationFlagsFB = 1;
pub const XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB: XrSwapchainCreateFoveationFlagsFB = 2;
pub const XrSwapchainStateFoveationFlagsFB = XrFlags64;
pub const struct_XrFoveationProfileCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const XrFoveationProfileCreateInfoFB = struct_XrFoveationProfileCreateInfoFB;
pub const struct_XrSwapchainCreateInfoFoveationFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: XrSwapchainCreateFoveationFlagsFB = @import("std").mem.zeroes(XrSwapchainCreateFoveationFlagsFB),
};
pub const XrSwapchainCreateInfoFoveationFB = struct_XrSwapchainCreateInfoFoveationFB;
pub const struct_XrSwapchainStateFoveationFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: XrSwapchainStateFoveationFlagsFB = @import("std").mem.zeroes(XrSwapchainStateFoveationFlagsFB),
    profile: XrFoveationProfileFB = @import("std").mem.zeroes(XrFoveationProfileFB),
};
pub const XrSwapchainStateFoveationFB = struct_XrSwapchainStateFoveationFB;
pub const PFN_xrCreateFoveationProfileFB = ?*const fn (XrSession, [*c]const XrFoveationProfileCreateInfoFB, [*c]XrFoveationProfileFB) callconv(.c) XrResult;
pub const PFN_xrDestroyFoveationProfileFB = ?*const fn (XrFoveationProfileFB) callconv(.c) XrResult;
pub const XR_FOVEATION_LEVEL_NONE_FB: c_int = 0;
pub const XR_FOVEATION_LEVEL_LOW_FB: c_int = 1;
pub const XR_FOVEATION_LEVEL_MEDIUM_FB: c_int = 2;
pub const XR_FOVEATION_LEVEL_HIGH_FB: c_int = 3;
pub const XR_FOVEATION_LEVEL_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFoveationLevelFB = c_uint;
pub const XrFoveationLevelFB = enum_XrFoveationLevelFB;
pub const XR_FOVEATION_DYNAMIC_DISABLED_FB: c_int = 0;
pub const XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_FB: c_int = 1;
pub const XR_FOVEATION_DYNAMIC_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFoveationDynamicFB = c_uint;
pub const XrFoveationDynamicFB = enum_XrFoveationDynamicFB;
pub const struct_XrFoveationLevelProfileCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    level: XrFoveationLevelFB = @import("std").mem.zeroes(XrFoveationLevelFB),
    verticalOffset: f32 = @import("std").mem.zeroes(f32),
    dynamic: XrFoveationDynamicFB = @import("std").mem.zeroes(XrFoveationDynamicFB),
};
pub const XrFoveationLevelProfileCreateInfoFB = struct_XrFoveationLevelProfileCreateInfoFB;
pub const XrKeyboardTrackingFlagsFB = XrFlags64;
pub const XR_KEYBOARD_TRACKING_EXISTS_BIT_FB: XrKeyboardTrackingFlagsFB = 1;
pub const XR_KEYBOARD_TRACKING_LOCAL_BIT_FB: XrKeyboardTrackingFlagsFB = 2;
pub const XR_KEYBOARD_TRACKING_REMOTE_BIT_FB: XrKeyboardTrackingFlagsFB = 4;
pub const XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB: XrKeyboardTrackingFlagsFB = 8;
pub const XrKeyboardTrackingQueryFlagsFB = XrFlags64;
pub const XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB: XrKeyboardTrackingQueryFlagsFB = 2;
pub const XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB: XrKeyboardTrackingQueryFlagsFB = 4;
pub const struct_XrSystemKeyboardTrackingPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsKeyboardTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemKeyboardTrackingPropertiesFB = struct_XrSystemKeyboardTrackingPropertiesFB;
pub const struct_XrKeyboardTrackingDescriptionFB = extern struct {
    trackedKeyboardId: u64 = @import("std").mem.zeroes(u64),
    size: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    flags: XrKeyboardTrackingFlagsFB = @import("std").mem.zeroes(XrKeyboardTrackingFlagsFB),
    name: [128]u8 = @import("std").mem.zeroes([128]u8),
};
pub const XrKeyboardTrackingDescriptionFB = struct_XrKeyboardTrackingDescriptionFB;
pub const struct_XrKeyboardSpaceCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    trackedKeyboardId: u64 = @import("std").mem.zeroes(u64),
};
pub const XrKeyboardSpaceCreateInfoFB = struct_XrKeyboardSpaceCreateInfoFB;
pub const struct_XrKeyboardTrackingQueryFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: XrKeyboardTrackingQueryFlagsFB = @import("std").mem.zeroes(XrKeyboardTrackingQueryFlagsFB),
};
pub const XrKeyboardTrackingQueryFB = struct_XrKeyboardTrackingQueryFB;
pub const PFN_xrQuerySystemTrackedKeyboardFB = ?*const fn (XrSession, [*c]const XrKeyboardTrackingQueryFB, [*c]XrKeyboardTrackingDescriptionFB) callconv(.c) XrResult;
pub const PFN_xrCreateKeyboardSpaceFB = ?*const fn (XrSession, [*c]const XrKeyboardSpaceCreateInfoFB, [*c]XrSpace) callconv(.c) XrResult;
pub const struct_XrTriangleMeshFB_T = opaque {};
pub const XrTriangleMeshFB = ?*struct_XrTriangleMeshFB_T;
pub const XR_WINDING_ORDER_UNKNOWN_FB: c_int = 0;
pub const XR_WINDING_ORDER_CW_FB: c_int = 1;
pub const XR_WINDING_ORDER_CCW_FB: c_int = 2;
pub const XR_WINDING_ORDER_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrWindingOrderFB = c_uint;
pub const XrWindingOrderFB = enum_XrWindingOrderFB;
pub const XrTriangleMeshFlagsFB = XrFlags64;
pub const XR_TRIANGLE_MESH_MUTABLE_BIT_FB: XrTriangleMeshFlagsFB = 1;
pub const struct_XrTriangleMeshCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrTriangleMeshFlagsFB = @import("std").mem.zeroes(XrTriangleMeshFlagsFB),
    windingOrder: XrWindingOrderFB = @import("std").mem.zeroes(XrWindingOrderFB),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertexBuffer: [*c]const XrVector3f = @import("std").mem.zeroes([*c]const XrVector3f),
    triangleCount: u32 = @import("std").mem.zeroes(u32),
    indexBuffer: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const XrTriangleMeshCreateInfoFB = struct_XrTriangleMeshCreateInfoFB;
pub const PFN_xrCreateTriangleMeshFB = ?*const fn (XrSession, [*c]const XrTriangleMeshCreateInfoFB, [*c]XrTriangleMeshFB) callconv(.c) XrResult;
pub const PFN_xrDestroyTriangleMeshFB = ?*const fn (XrTriangleMeshFB) callconv(.c) XrResult;
pub const PFN_xrTriangleMeshGetVertexBufferFB = ?*const fn (XrTriangleMeshFB, [*c][*c]XrVector3f) callconv(.c) XrResult;
pub const PFN_xrTriangleMeshGetIndexBufferFB = ?*const fn (XrTriangleMeshFB, [*c][*c]u32) callconv(.c) XrResult;
pub const PFN_xrTriangleMeshBeginUpdateFB = ?*const fn (XrTriangleMeshFB) callconv(.c) XrResult;
pub const PFN_xrTriangleMeshEndUpdateFB = ?*const fn (XrTriangleMeshFB, u32, u32) callconv(.c) XrResult;
pub const PFN_xrTriangleMeshBeginVertexBufferUpdateFB = ?*const fn (XrTriangleMeshFB, [*c]u32) callconv(.c) XrResult;
pub const PFN_xrTriangleMeshEndVertexBufferUpdateFB = ?*const fn (XrTriangleMeshFB) callconv(.c) XrResult;
pub const struct_XrPassthroughFB_T = opaque {};
pub const XrPassthroughFB = ?*struct_XrPassthroughFB_T;
pub const struct_XrPassthroughLayerFB_T = opaque {};
pub const XrPassthroughLayerFB = ?*struct_XrPassthroughLayerFB_T;
pub const struct_XrGeometryInstanceFB_T = opaque {};
pub const XrGeometryInstanceFB = ?*struct_XrGeometryInstanceFB_T;
pub const XR_PASSTHROUGH_LAYER_PURPOSE_RECONSTRUCTION_FB: c_int = 0;
pub const XR_PASSTHROUGH_LAYER_PURPOSE_PROJECTED_FB: c_int = 1;
pub const XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_HANDS_FB: c_int = 1000203001;
pub const XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_MASKED_HANDS_FB: c_int = 1000203002;
pub const XR_PASSTHROUGH_LAYER_PURPOSE_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrPassthroughLayerPurposeFB = c_uint;
pub const XrPassthroughLayerPurposeFB = enum_XrPassthroughLayerPurposeFB;
pub const XrPassthroughCapabilityFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_CAPABILITY_BIT_FB: XrPassthroughCapabilityFlagsFB = 1;
pub const XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB: XrPassthroughCapabilityFlagsFB = 2;
pub const XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB: XrPassthroughCapabilityFlagsFB = 4;
pub const XrPassthroughFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB: XrPassthroughFlagsFB = 1;
pub const XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB: XrPassthroughFlagsFB = 2;
pub const XrPassthroughStateChangedFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB: XrPassthroughStateChangedFlagsFB = 1;
pub const XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB = 2;
pub const XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB = 4;
pub const XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB = 8;
pub const struct_XrSystemPassthroughPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    supportsPassthrough: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemPassthroughPropertiesFB = struct_XrSystemPassthroughPropertiesFB;
pub const struct_XrSystemPassthroughProperties2FB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    capabilities: XrPassthroughCapabilityFlagsFB = @import("std").mem.zeroes(XrPassthroughCapabilityFlagsFB),
};
pub const XrSystemPassthroughProperties2FB = struct_XrSystemPassthroughProperties2FB;
pub const struct_XrPassthroughCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrPassthroughFlagsFB = @import("std").mem.zeroes(XrPassthroughFlagsFB),
};
pub const XrPassthroughCreateInfoFB = struct_XrPassthroughCreateInfoFB;
pub const struct_XrPassthroughLayerCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    passthrough: XrPassthroughFB = @import("std").mem.zeroes(XrPassthroughFB),
    flags: XrPassthroughFlagsFB = @import("std").mem.zeroes(XrPassthroughFlagsFB),
    purpose: XrPassthroughLayerPurposeFB = @import("std").mem.zeroes(XrPassthroughLayerPurposeFB),
};
pub const XrPassthroughLayerCreateInfoFB = struct_XrPassthroughLayerCreateInfoFB;
pub const struct_XrCompositionLayerPassthroughFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    layerHandle: XrPassthroughLayerFB = @import("std").mem.zeroes(XrPassthroughLayerFB),
};
pub const XrCompositionLayerPassthroughFB = struct_XrCompositionLayerPassthroughFB;
pub const struct_XrGeometryInstanceCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layer: XrPassthroughLayerFB = @import("std").mem.zeroes(XrPassthroughLayerFB),
    mesh: XrTriangleMeshFB = @import("std").mem.zeroes(XrTriangleMeshFB),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    scale: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrGeometryInstanceCreateInfoFB = struct_XrGeometryInstanceCreateInfoFB;
pub const struct_XrGeometryInstanceTransformFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    scale: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrGeometryInstanceTransformFB = struct_XrGeometryInstanceTransformFB;
pub const struct_XrPassthroughStyleFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    textureOpacityFactor: f32 = @import("std").mem.zeroes(f32),
    edgeColor: XrColor4f = @import("std").mem.zeroes(XrColor4f),
};
pub const XrPassthroughStyleFB = struct_XrPassthroughStyleFB;
pub const struct_XrPassthroughColorMapMonoToRgbaFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    textureColorMap: [256]XrColor4f = @import("std").mem.zeroes([256]XrColor4f),
};
pub const XrPassthroughColorMapMonoToRgbaFB = struct_XrPassthroughColorMapMonoToRgbaFB;
pub const struct_XrPassthroughColorMapMonoToMonoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    textureColorMap: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const XrPassthroughColorMapMonoToMonoFB = struct_XrPassthroughColorMapMonoToMonoFB;
pub const struct_XrPassthroughBrightnessContrastSaturationFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    brightness: f32 = @import("std").mem.zeroes(f32),
    contrast: f32 = @import("std").mem.zeroes(f32),
    saturation: f32 = @import("std").mem.zeroes(f32),
};
pub const XrPassthroughBrightnessContrastSaturationFB = struct_XrPassthroughBrightnessContrastSaturationFB;
pub const struct_XrEventDataPassthroughStateChangedFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrPassthroughStateChangedFlagsFB = @import("std").mem.zeroes(XrPassthroughStateChangedFlagsFB),
};
pub const XrEventDataPassthroughStateChangedFB = struct_XrEventDataPassthroughStateChangedFB;
pub const PFN_xrCreatePassthroughFB = ?*const fn (XrSession, [*c]const XrPassthroughCreateInfoFB, [*c]XrPassthroughFB) callconv(.c) XrResult;
pub const PFN_xrDestroyPassthroughFB = ?*const fn (XrPassthroughFB) callconv(.c) XrResult;
pub const PFN_xrPassthroughStartFB = ?*const fn (XrPassthroughFB) callconv(.c) XrResult;
pub const PFN_xrPassthroughPauseFB = ?*const fn (XrPassthroughFB) callconv(.c) XrResult;
pub const PFN_xrCreatePassthroughLayerFB = ?*const fn (XrSession, [*c]const XrPassthroughLayerCreateInfoFB, [*c]XrPassthroughLayerFB) callconv(.c) XrResult;
pub const PFN_xrDestroyPassthroughLayerFB = ?*const fn (XrPassthroughLayerFB) callconv(.c) XrResult;
pub const PFN_xrPassthroughLayerPauseFB = ?*const fn (XrPassthroughLayerFB) callconv(.c) XrResult;
pub const PFN_xrPassthroughLayerResumeFB = ?*const fn (XrPassthroughLayerFB) callconv(.c) XrResult;
pub const PFN_xrPassthroughLayerSetStyleFB = ?*const fn (XrPassthroughLayerFB, [*c]const XrPassthroughStyleFB) callconv(.c) XrResult;
pub const PFN_xrCreateGeometryInstanceFB = ?*const fn (XrSession, [*c]const XrGeometryInstanceCreateInfoFB, [*c]XrGeometryInstanceFB) callconv(.c) XrResult;
pub const PFN_xrDestroyGeometryInstanceFB = ?*const fn (XrGeometryInstanceFB) callconv(.c) XrResult;
pub const PFN_xrGeometryInstanceSetTransformFB = ?*const fn (XrGeometryInstanceFB, [*c]const XrGeometryInstanceTransformFB) callconv(.c) XrResult;
pub const XrRenderModelKeyFB = u64;
pub const XrRenderModelFlagsFB = XrFlags64;
pub const XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB: XrRenderModelFlagsFB = 1;
pub const XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB: XrRenderModelFlagsFB = 2;
pub const struct_XrRenderModelPathInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    path: XrPath = @import("std").mem.zeroes(XrPath),
};
pub const XrRenderModelPathInfoFB = struct_XrRenderModelPathInfoFB;
pub const struct_XrRenderModelPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vendorId: u32 = @import("std").mem.zeroes(u32),
    modelName: [64]u8 = @import("std").mem.zeroes([64]u8),
    modelKey: XrRenderModelKeyFB = @import("std").mem.zeroes(XrRenderModelKeyFB),
    modelVersion: u32 = @import("std").mem.zeroes(u32),
    flags: XrRenderModelFlagsFB = @import("std").mem.zeroes(XrRenderModelFlagsFB),
};
pub const XrRenderModelPropertiesFB = struct_XrRenderModelPropertiesFB;
pub const struct_XrRenderModelBufferFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferCapacityInput: u32 = @import("std").mem.zeroes(u32),
    bufferCountOutput: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const XrRenderModelBufferFB = struct_XrRenderModelBufferFB;
pub const struct_XrRenderModelLoadInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    modelKey: XrRenderModelKeyFB = @import("std").mem.zeroes(XrRenderModelKeyFB),
};
pub const XrRenderModelLoadInfoFB = struct_XrRenderModelLoadInfoFB;
pub const struct_XrSystemRenderModelPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsRenderModelLoading: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemRenderModelPropertiesFB = struct_XrSystemRenderModelPropertiesFB;
pub const struct_XrRenderModelCapabilitiesRequestFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: XrRenderModelFlagsFB = @import("std").mem.zeroes(XrRenderModelFlagsFB),
};
pub const XrRenderModelCapabilitiesRequestFB = struct_XrRenderModelCapabilitiesRequestFB;
pub const PFN_xrEnumerateRenderModelPathsFB = ?*const fn (XrSession, u32, [*c]u32, [*c]XrRenderModelPathInfoFB) callconv(.c) XrResult;
pub const PFN_xrGetRenderModelPropertiesFB = ?*const fn (XrSession, XrPath, [*c]XrRenderModelPropertiesFB) callconv(.c) XrResult;
pub const PFN_xrLoadRenderModelFB = ?*const fn (XrSession, [*c]const XrRenderModelLoadInfoFB, [*c]XrRenderModelBufferFB) callconv(.c) XrResult;
pub const struct_XrViewLocateFoveatedRenderingVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    foveatedRenderingActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrViewLocateFoveatedRenderingVARJO = struct_XrViewLocateFoveatedRenderingVARJO;
pub const struct_XrFoveatedViewConfigurationViewVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    foveatedRenderingActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrFoveatedViewConfigurationViewVARJO = struct_XrFoveatedViewConfigurationViewVARJO;
pub const struct_XrSystemFoveatedRenderingPropertiesVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsFoveatedRendering: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemFoveatedRenderingPropertiesVARJO = struct_XrSystemFoveatedRenderingPropertiesVARJO;
pub const struct_XrCompositionLayerDepthTestVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthTestRangeNearZ: f32 = @import("std").mem.zeroes(f32),
    depthTestRangeFarZ: f32 = @import("std").mem.zeroes(f32),
};
pub const XrCompositionLayerDepthTestVARJO = struct_XrCompositionLayerDepthTestVARJO;
pub const PFN_xrSetEnvironmentDepthEstimationVARJO = ?*const fn (XrSession, XrBool32) callconv(.c) XrResult;
pub const struct_XrSystemMarkerTrackingPropertiesVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsMarkerTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemMarkerTrackingPropertiesVARJO = struct_XrSystemMarkerTrackingPropertiesVARJO;
pub const struct_XrEventDataMarkerTrackingUpdateVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    markerId: u64 = @import("std").mem.zeroes(u64),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
    isPredicted: XrBool32 = @import("std").mem.zeroes(XrBool32),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEventDataMarkerTrackingUpdateVARJO = struct_XrEventDataMarkerTrackingUpdateVARJO;
pub const struct_XrMarkerSpaceCreateInfoVARJO = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    markerId: u64 = @import("std").mem.zeroes(u64),
    poseInMarkerSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrMarkerSpaceCreateInfoVARJO = struct_XrMarkerSpaceCreateInfoVARJO;
pub const PFN_xrSetMarkerTrackingVARJO = ?*const fn (XrSession, XrBool32) callconv(.c) XrResult;
pub const PFN_xrSetMarkerTrackingTimeoutVARJO = ?*const fn (XrSession, u64, XrDuration) callconv(.c) XrResult;
pub const PFN_xrSetMarkerTrackingPredictionVARJO = ?*const fn (XrSession, u64, XrBool32) callconv(.c) XrResult;
pub const PFN_xrGetMarkerSizeVARJO = ?*const fn (XrSession, u64, [*c]XrExtent2Df) callconv(.c) XrResult;
pub const PFN_xrCreateMarkerSpaceVARJO = ?*const fn (XrSession, [*c]const XrMarkerSpaceCreateInfoVARJO, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrSetViewOffsetVARJO = ?*const fn (XrSession, f32) callconv(.c) XrResult;
pub const XrFrameEndInfoFlagsML = XrFlags64;
pub const XR_FRAME_END_INFO_PROTECTED_BIT_ML: XrFrameEndInfoFlagsML = 1;
pub const XR_FRAME_END_INFO_VIGNETTE_BIT_ML: XrFrameEndInfoFlagsML = 2;
pub const struct_XrFrameEndInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    focusDistance: f32 = @import("std").mem.zeroes(f32),
    flags: XrFrameEndInfoFlagsML = @import("std").mem.zeroes(XrFrameEndInfoFlagsML),
};
pub const XrFrameEndInfoML = struct_XrFrameEndInfoML;
pub const XrGlobalDimmerFrameEndInfoFlagsML = XrFlags64;
pub const XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML: XrGlobalDimmerFrameEndInfoFlagsML = 1;
pub const struct_XrGlobalDimmerFrameEndInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dimmerValue: f32 = @import("std").mem.zeroes(f32),
    flags: XrGlobalDimmerFrameEndInfoFlagsML = @import("std").mem.zeroes(XrGlobalDimmerFrameEndInfoFlagsML),
};
pub const XrGlobalDimmerFrameEndInfoML = struct_XrGlobalDimmerFrameEndInfoML;
pub const XrMarkerML = u64;
pub const struct_XrMarkerDetectorML_T = opaque {};
pub const XrMarkerDetectorML = ?*struct_XrMarkerDetectorML_T;
pub const XR_MARKER_DETECTOR_PROFILE_DEFAULT_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_PROFILE_SPEED_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_PROFILE_ACCURACY_ML: c_int = 2;
pub const XR_MARKER_DETECTOR_PROFILE_SMALL_TARGETS_ML: c_int = 3;
pub const XR_MARKER_DETECTOR_PROFILE_LARGE_FOV_ML: c_int = 4;
pub const XR_MARKER_DETECTOR_PROFILE_CUSTOM_ML: c_int = 5;
pub const XR_MARKER_DETECTOR_PROFILE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorProfileML = c_uint;
pub const XrMarkerDetectorProfileML = enum_XrMarkerDetectorProfileML;
pub const XR_MARKER_TYPE_ARUCO_ML: c_int = 0;
pub const XR_MARKER_TYPE_APRIL_TAG_ML: c_int = 1;
pub const XR_MARKER_TYPE_QR_ML: c_int = 2;
pub const XR_MARKER_TYPE_EAN_13_ML: c_int = 3;
pub const XR_MARKER_TYPE_UPC_A_ML: c_int = 4;
pub const XR_MARKER_TYPE_CODE_128_ML: c_int = 5;
pub const XR_MARKER_TYPE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerTypeML = c_uint;
pub const XrMarkerTypeML = enum_XrMarkerTypeML;
pub const XR_MARKER_ARUCO_DICT_4X4_50_ML: c_int = 0;
pub const XR_MARKER_ARUCO_DICT_4X4_100_ML: c_int = 1;
pub const XR_MARKER_ARUCO_DICT_4X4_250_ML: c_int = 2;
pub const XR_MARKER_ARUCO_DICT_4X4_1000_ML: c_int = 3;
pub const XR_MARKER_ARUCO_DICT_5X5_50_ML: c_int = 4;
pub const XR_MARKER_ARUCO_DICT_5X5_100_ML: c_int = 5;
pub const XR_MARKER_ARUCO_DICT_5X5_250_ML: c_int = 6;
pub const XR_MARKER_ARUCO_DICT_5X5_1000_ML: c_int = 7;
pub const XR_MARKER_ARUCO_DICT_6X6_50_ML: c_int = 8;
pub const XR_MARKER_ARUCO_DICT_6X6_100_ML: c_int = 9;
pub const XR_MARKER_ARUCO_DICT_6X6_250_ML: c_int = 10;
pub const XR_MARKER_ARUCO_DICT_6X6_1000_ML: c_int = 11;
pub const XR_MARKER_ARUCO_DICT_7X7_50_ML: c_int = 12;
pub const XR_MARKER_ARUCO_DICT_7X7_100_ML: c_int = 13;
pub const XR_MARKER_ARUCO_DICT_7X7_250_ML: c_int = 14;
pub const XR_MARKER_ARUCO_DICT_7X7_1000_ML: c_int = 15;
pub const XR_MARKER_ARUCO_DICT_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerArucoDictML = c_uint;
pub const XrMarkerArucoDictML = enum_XrMarkerArucoDictML;
pub const XR_MARKER_APRIL_TAG_DICT_16H5_ML: c_int = 0;
pub const XR_MARKER_APRIL_TAG_DICT_25H9_ML: c_int = 1;
pub const XR_MARKER_APRIL_TAG_DICT_36H10_ML: c_int = 2;
pub const XR_MARKER_APRIL_TAG_DICT_36H11_ML: c_int = 3;
pub const XR_MARKER_APRIL_TAG_DICT_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerAprilTagDictML = c_uint;
pub const XrMarkerAprilTagDictML = enum_XrMarkerAprilTagDictML;
pub const XR_MARKER_DETECTOR_FPS_LOW_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_FPS_MEDIUM_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_FPS_HIGH_ML: c_int = 2;
pub const XR_MARKER_DETECTOR_FPS_MAX_ML: c_int = 3;
pub const XR_MARKER_DETECTOR_FPS_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorFpsML = c_uint;
pub const XrMarkerDetectorFpsML = enum_XrMarkerDetectorFpsML;
pub const XR_MARKER_DETECTOR_RESOLUTION_LOW_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_RESOLUTION_MEDIUM_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_RESOLUTION_HIGH_ML: c_int = 2;
pub const XR_MARKER_DETECTOR_RESOLUTION_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorResolutionML = c_uint;
pub const XrMarkerDetectorResolutionML = enum_XrMarkerDetectorResolutionML;
pub const XR_MARKER_DETECTOR_CAMERA_RGB_CAMERA_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_CAMERA_WORLD_CAMERAS_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_CAMERA_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorCameraML = c_uint;
pub const XrMarkerDetectorCameraML = enum_XrMarkerDetectorCameraML;
pub const XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_NONE_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_SUBPIX_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_CONTOUR_ML: c_int = 2;
pub const XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_APRIL_TAG_ML: c_int = 3;
pub const XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorCornerRefineMethodML = c_uint;
pub const XrMarkerDetectorCornerRefineMethodML = enum_XrMarkerDetectorCornerRefineMethodML;
pub const XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_FAST_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MEDIUM_ML: c_int = 2;
pub const XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_SLOW_ML: c_int = 3;
pub const XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorFullAnalysisIntervalML = c_uint;
pub const XrMarkerDetectorFullAnalysisIntervalML = enum_XrMarkerDetectorFullAnalysisIntervalML;
pub const XR_MARKER_DETECTOR_STATUS_PENDING_ML: c_int = 0;
pub const XR_MARKER_DETECTOR_STATUS_READY_ML: c_int = 1;
pub const XR_MARKER_DETECTOR_STATUS_ERROR_ML: c_int = 2;
pub const XR_MARKER_DETECTOR_STATUS_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrMarkerDetectorStatusML = c_uint;
pub const XrMarkerDetectorStatusML = enum_XrMarkerDetectorStatusML;
pub const struct_XrSystemMarkerUnderstandingPropertiesML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsMarkerUnderstanding: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemMarkerUnderstandingPropertiesML = struct_XrSystemMarkerUnderstandingPropertiesML;
pub const struct_XrMarkerDetectorCreateInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    profile: XrMarkerDetectorProfileML = @import("std").mem.zeroes(XrMarkerDetectorProfileML),
    markerType: XrMarkerTypeML = @import("std").mem.zeroes(XrMarkerTypeML),
};
pub const XrMarkerDetectorCreateInfoML = struct_XrMarkerDetectorCreateInfoML;
pub const struct_XrMarkerDetectorArucoInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    arucoDict: XrMarkerArucoDictML = @import("std").mem.zeroes(XrMarkerArucoDictML),
};
pub const XrMarkerDetectorArucoInfoML = struct_XrMarkerDetectorArucoInfoML;
pub const struct_XrMarkerDetectorSizeInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    markerLength: f32 = @import("std").mem.zeroes(f32),
};
pub const XrMarkerDetectorSizeInfoML = struct_XrMarkerDetectorSizeInfoML;
pub const struct_XrMarkerDetectorAprilTagInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aprilTagDict: XrMarkerAprilTagDictML = @import("std").mem.zeroes(XrMarkerAprilTagDictML),
};
pub const XrMarkerDetectorAprilTagInfoML = struct_XrMarkerDetectorAprilTagInfoML;
pub const struct_XrMarkerDetectorCustomProfileInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fpsHint: XrMarkerDetectorFpsML = @import("std").mem.zeroes(XrMarkerDetectorFpsML),
    resolutionHint: XrMarkerDetectorResolutionML = @import("std").mem.zeroes(XrMarkerDetectorResolutionML),
    cameraHint: XrMarkerDetectorCameraML = @import("std").mem.zeroes(XrMarkerDetectorCameraML),
    cornerRefineMethod: XrMarkerDetectorCornerRefineMethodML = @import("std").mem.zeroes(XrMarkerDetectorCornerRefineMethodML),
    useEdgeRefinement: XrBool32 = @import("std").mem.zeroes(XrBool32),
    fullAnalysisIntervalHint: XrMarkerDetectorFullAnalysisIntervalML = @import("std").mem.zeroes(XrMarkerDetectorFullAnalysisIntervalML),
};
pub const XrMarkerDetectorCustomProfileInfoML = struct_XrMarkerDetectorCustomProfileInfoML;
pub const struct_XrMarkerDetectorSnapshotInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrMarkerDetectorSnapshotInfoML = struct_XrMarkerDetectorSnapshotInfoML;
pub const struct_XrMarkerDetectorStateML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    state: XrMarkerDetectorStatusML = @import("std").mem.zeroes(XrMarkerDetectorStatusML),
};
pub const XrMarkerDetectorStateML = struct_XrMarkerDetectorStateML;
pub const struct_XrMarkerSpaceCreateInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    markerDetector: XrMarkerDetectorML = @import("std").mem.zeroes(XrMarkerDetectorML),
    marker: XrMarkerML = @import("std").mem.zeroes(XrMarkerML),
    poseInMarkerSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrMarkerSpaceCreateInfoML = struct_XrMarkerSpaceCreateInfoML;
pub const PFN_xrCreateMarkerDetectorML = ?*const fn (XrSession, [*c]const XrMarkerDetectorCreateInfoML, [*c]XrMarkerDetectorML) callconv(.c) XrResult;
pub const PFN_xrDestroyMarkerDetectorML = ?*const fn (XrMarkerDetectorML) callconv(.c) XrResult;
pub const PFN_xrSnapshotMarkerDetectorML = ?*const fn (XrMarkerDetectorML, [*c]XrMarkerDetectorSnapshotInfoML) callconv(.c) XrResult;
pub const PFN_xrGetMarkerDetectorStateML = ?*const fn (XrMarkerDetectorML, [*c]XrMarkerDetectorStateML) callconv(.c) XrResult;
pub const PFN_xrGetMarkersML = ?*const fn (XrMarkerDetectorML, u32, [*c]u32, [*c]XrMarkerML) callconv(.c) XrResult;
pub const PFN_xrGetMarkerReprojectionErrorML = ?*const fn (XrMarkerDetectorML, XrMarkerML, [*c]f32) callconv(.c) XrResult;
pub const PFN_xrGetMarkerLengthML = ?*const fn (XrMarkerDetectorML, XrMarkerML, [*c]f32) callconv(.c) XrResult;
pub const PFN_xrGetMarkerNumberML = ?*const fn (XrMarkerDetectorML, XrMarkerML, [*c]u64) callconv(.c) XrResult;
pub const PFN_xrGetMarkerStringML = ?*const fn (XrMarkerDetectorML, XrMarkerML, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrCreateMarkerSpaceML = ?*const fn (XrSession, [*c]const XrMarkerSpaceCreateInfoML, [*c]XrSpace) callconv(.c) XrResult;
pub const struct_XrExportedLocalizationMapML_T = opaque {};
pub const XrExportedLocalizationMapML = ?*struct_XrExportedLocalizationMapML_T;
pub const XR_LOCALIZATION_MAP_STATE_NOT_LOCALIZED_ML: c_int = 0;
pub const XR_LOCALIZATION_MAP_STATE_LOCALIZED_ML: c_int = 1;
pub const XR_LOCALIZATION_MAP_STATE_LOCALIZATION_PENDING_ML: c_int = 2;
pub const XR_LOCALIZATION_MAP_STATE_LOCALIZATION_SLEEPING_BEFORE_RETRY_ML: c_int = 3;
pub const XR_LOCALIZATION_MAP_STATE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrLocalizationMapStateML = c_uint;
pub const XrLocalizationMapStateML = enum_XrLocalizationMapStateML;
pub const XR_LOCALIZATION_MAP_TYPE_ON_DEVICE_ML: c_int = 0;
pub const XR_LOCALIZATION_MAP_TYPE_CLOUD_ML: c_int = 1;
pub const XR_LOCALIZATION_MAP_TYPE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrLocalizationMapTypeML = c_uint;
pub const XrLocalizationMapTypeML = enum_XrLocalizationMapTypeML;
pub const XR_LOCALIZATION_MAP_CONFIDENCE_POOR_ML: c_int = 0;
pub const XR_LOCALIZATION_MAP_CONFIDENCE_FAIR_ML: c_int = 1;
pub const XR_LOCALIZATION_MAP_CONFIDENCE_GOOD_ML: c_int = 2;
pub const XR_LOCALIZATION_MAP_CONFIDENCE_EXCELLENT_ML: c_int = 3;
pub const XR_LOCALIZATION_MAP_CONFIDENCE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrLocalizationMapConfidenceML = c_uint;
pub const XrLocalizationMapConfidenceML = enum_XrLocalizationMapConfidenceML;
pub const XrLocalizationMapErrorFlagsML = XrFlags64;
pub const XR_LOCALIZATION_MAP_ERROR_UNKNOWN_BIT_ML: XrLocalizationMapErrorFlagsML = 1;
pub const XR_LOCALIZATION_MAP_ERROR_OUT_OF_MAPPED_AREA_BIT_ML: XrLocalizationMapErrorFlagsML = 2;
pub const XR_LOCALIZATION_MAP_ERROR_LOW_FEATURE_COUNT_BIT_ML: XrLocalizationMapErrorFlagsML = 4;
pub const XR_LOCALIZATION_MAP_ERROR_EXCESSIVE_MOTION_BIT_ML: XrLocalizationMapErrorFlagsML = 8;
pub const XR_LOCALIZATION_MAP_ERROR_LOW_LIGHT_BIT_ML: XrLocalizationMapErrorFlagsML = 16;
pub const XR_LOCALIZATION_MAP_ERROR_HEADPOSE_BIT_ML: XrLocalizationMapErrorFlagsML = 32;
pub const struct_XrLocalizationMapML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [64]u8 = @import("std").mem.zeroes([64]u8),
    mapUuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    mapType: XrLocalizationMapTypeML = @import("std").mem.zeroes(XrLocalizationMapTypeML),
};
pub const XrLocalizationMapML = struct_XrLocalizationMapML;
pub const struct_XrEventDataLocalizationChangedML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: XrSession = @import("std").mem.zeroes(XrSession),
    state: XrLocalizationMapStateML = @import("std").mem.zeroes(XrLocalizationMapStateML),
    map: XrLocalizationMapML = @import("std").mem.zeroes(XrLocalizationMapML),
    confidence: XrLocalizationMapConfidenceML = @import("std").mem.zeroes(XrLocalizationMapConfidenceML),
    errorFlags: XrLocalizationMapErrorFlagsML = @import("std").mem.zeroes(XrLocalizationMapErrorFlagsML),
};
pub const XrEventDataLocalizationChangedML = struct_XrEventDataLocalizationChangedML;
pub const struct_XrLocalizationMapQueryInfoBaseHeaderML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrLocalizationMapQueryInfoBaseHeaderML = struct_XrLocalizationMapQueryInfoBaseHeaderML;
pub const struct_XrMapLocalizationRequestInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mapUuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
};
pub const XrMapLocalizationRequestInfoML = struct_XrMapLocalizationRequestInfoML;
pub const struct_XrLocalizationMapImportInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    size: u32 = @import("std").mem.zeroes(u32),
    data: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const XrLocalizationMapImportInfoML = struct_XrLocalizationMapImportInfoML;
pub const struct_XrLocalizationEnableEventsInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrLocalizationEnableEventsInfoML = struct_XrLocalizationEnableEventsInfoML;
pub const PFN_xrEnableLocalizationEventsML = ?*const fn (XrSession, [*c]const XrLocalizationEnableEventsInfoML) callconv(.c) XrResult;
pub const PFN_xrQueryLocalizationMapsML = ?*const fn (XrSession, [*c]const XrLocalizationMapQueryInfoBaseHeaderML, u32, [*c]u32, [*c]XrLocalizationMapML) callconv(.c) XrResult;
pub const PFN_xrRequestMapLocalizationML = ?*const fn (XrSession, [*c]const XrMapLocalizationRequestInfoML) callconv(.c) XrResult;
pub const PFN_xrImportLocalizationMapML = ?*const fn (XrSession, [*c]const XrLocalizationMapImportInfoML, [*c]XrUuidEXT) callconv(.c) XrResult;
pub const PFN_xrCreateExportedLocalizationMapML = ?*const fn (XrSession, [*c]const XrUuidEXT, [*c]XrExportedLocalizationMapML) callconv(.c) XrResult;
pub const PFN_xrDestroyExportedLocalizationMapML = ?*const fn (XrExportedLocalizationMapML) callconv(.c) XrResult;
pub const PFN_xrGetExportedLocalizationMapDataML = ?*const fn (XrExportedLocalizationMapML, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const struct_XrFutureEXT_T = opaque {};
pub const XrFutureEXT = ?*struct_XrFutureEXT_T;
pub const XR_SPATIAL_ANCHOR_CONFIDENCE_LOW_ML: c_int = 0;
pub const XR_SPATIAL_ANCHOR_CONFIDENCE_MEDIUM_ML: c_int = 1;
pub const XR_SPATIAL_ANCHOR_CONFIDENCE_HIGH_ML: c_int = 2;
pub const XR_SPATIAL_ANCHOR_CONFIDENCE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrSpatialAnchorConfidenceML = c_uint;
pub const XrSpatialAnchorConfidenceML = enum_XrSpatialAnchorConfidenceML;
pub const struct_XrSpatialAnchorsCreateInfoBaseHeaderML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpatialAnchorsCreateInfoBaseHeaderML = struct_XrSpatialAnchorsCreateInfoBaseHeaderML;
pub const struct_XrSpatialAnchorsCreateInfoFromPoseML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    poseInBaseSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrSpatialAnchorsCreateInfoFromPoseML = struct_XrSpatialAnchorsCreateInfoFromPoseML;
pub const struct_XrCreateSpatialAnchorsCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
    spaceCount: u32 = @import("std").mem.zeroes(u32),
    spaces: [*c]XrSpace = @import("std").mem.zeroes([*c]XrSpace),
};
pub const XrCreateSpatialAnchorsCompletionML = struct_XrCreateSpatialAnchorsCompletionML;
pub const struct_XrSpatialAnchorStateML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    confidence: XrSpatialAnchorConfidenceML = @import("std").mem.zeroes(XrSpatialAnchorConfidenceML),
};
pub const XrSpatialAnchorStateML = struct_XrSpatialAnchorStateML;
pub const PFN_xrCreateSpatialAnchorsAsyncML = ?*const fn (XrSession, [*c]const XrSpatialAnchorsCreateInfoBaseHeaderML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrCreateSpatialAnchorsCompleteML = ?*const fn (XrSession, XrFutureEXT, [*c]XrCreateSpatialAnchorsCompletionML) callconv(.c) XrResult;
pub const PFN_xrGetSpatialAnchorStateML = ?*const fn (XrSpace, [*c]XrSpatialAnchorStateML) callconv(.c) XrResult;
pub const struct_XrSpatialAnchorsStorageML_T = opaque {};
pub const XrSpatialAnchorsStorageML = ?*struct_XrSpatialAnchorsStorageML_T;
pub const struct_XrSpatialAnchorsCreateStorageInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpatialAnchorsCreateStorageInfoML = struct_XrSpatialAnchorsCreateStorageInfoML;
pub const struct_XrSpatialAnchorsQueryInfoBaseHeaderML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpatialAnchorsQueryInfoBaseHeaderML = struct_XrSpatialAnchorsQueryInfoBaseHeaderML;
pub const struct_XrSpatialAnchorsQueryInfoRadiusML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    center: XrVector3f = @import("std").mem.zeroes(XrVector3f),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    radius: f32 = @import("std").mem.zeroes(f32),
};
pub const XrSpatialAnchorsQueryInfoRadiusML = struct_XrSpatialAnchorsQueryInfoRadiusML;
pub const struct_XrSpatialAnchorsQueryCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
    uuidCapacityInput: u32 = @import("std").mem.zeroes(u32),
    uuidCountOutput: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]XrUuidEXT = @import("std").mem.zeroes([*c]XrUuidEXT),
};
pub const XrSpatialAnchorsQueryCompletionML = struct_XrSpatialAnchorsQueryCompletionML;
pub const struct_XrSpatialAnchorsCreateInfoFromUuidsML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    storage: XrSpatialAnchorsStorageML = @import("std").mem.zeroes(XrSpatialAnchorsStorageML),
    uuidCount: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]const XrUuidEXT = @import("std").mem.zeroes([*c]const XrUuidEXT),
};
pub const XrSpatialAnchorsCreateInfoFromUuidsML = struct_XrSpatialAnchorsCreateInfoFromUuidsML;
pub const struct_XrSpatialAnchorsPublishInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    anchorCount: u32 = @import("std").mem.zeroes(u32),
    anchors: [*c]const XrSpace = @import("std").mem.zeroes([*c]const XrSpace),
    expiration: u64 = @import("std").mem.zeroes(u64),
};
pub const XrSpatialAnchorsPublishInfoML = struct_XrSpatialAnchorsPublishInfoML;
pub const struct_XrSpatialAnchorsPublishCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
    uuidCount: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]XrUuidEXT = @import("std").mem.zeroes([*c]XrUuidEXT),
};
pub const XrSpatialAnchorsPublishCompletionML = struct_XrSpatialAnchorsPublishCompletionML;
pub const struct_XrSpatialAnchorsDeleteInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    uuidCount: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]const XrUuidEXT = @import("std").mem.zeroes([*c]const XrUuidEXT),
};
pub const XrSpatialAnchorsDeleteInfoML = struct_XrSpatialAnchorsDeleteInfoML;
pub const struct_XrSpatialAnchorsDeleteCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrSpatialAnchorsDeleteCompletionML = struct_XrSpatialAnchorsDeleteCompletionML;
pub const struct_XrSpatialAnchorsUpdateExpirationInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    uuidCount: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]const XrUuidEXT = @import("std").mem.zeroes([*c]const XrUuidEXT),
    expiration: u64 = @import("std").mem.zeroes(u64),
};
pub const XrSpatialAnchorsUpdateExpirationInfoML = struct_XrSpatialAnchorsUpdateExpirationInfoML;
pub const struct_XrSpatialAnchorsUpdateExpirationCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrSpatialAnchorsUpdateExpirationCompletionML = struct_XrSpatialAnchorsUpdateExpirationCompletionML;
pub const struct_XrSpatialAnchorCompletionResultML = extern struct {
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrSpatialAnchorCompletionResultML = struct_XrSpatialAnchorCompletionResultML;
pub const struct_XrSpatialAnchorsPublishCompletionDetailsML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    resultCount: u32 = @import("std").mem.zeroes(u32),
    results: [*c]XrSpatialAnchorCompletionResultML = @import("std").mem.zeroes([*c]XrSpatialAnchorCompletionResultML),
};
pub const XrSpatialAnchorsPublishCompletionDetailsML = struct_XrSpatialAnchorsPublishCompletionDetailsML;
pub const struct_XrSpatialAnchorsDeleteCompletionDetailsML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    resultCount: u32 = @import("std").mem.zeroes(u32),
    results: [*c]XrSpatialAnchorCompletionResultML = @import("std").mem.zeroes([*c]XrSpatialAnchorCompletionResultML),
};
pub const XrSpatialAnchorsDeleteCompletionDetailsML = struct_XrSpatialAnchorsDeleteCompletionDetailsML;
pub const struct_XrSpatialAnchorsUpdateExpirationCompletionDetailsML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    resultCount: u32 = @import("std").mem.zeroes(u32),
    results: [*c]XrSpatialAnchorCompletionResultML = @import("std").mem.zeroes([*c]XrSpatialAnchorCompletionResultML),
};
pub const XrSpatialAnchorsUpdateExpirationCompletionDetailsML = struct_XrSpatialAnchorsUpdateExpirationCompletionDetailsML;
pub const PFN_xrCreateSpatialAnchorsStorageML = ?*const fn (XrSession, [*c]const XrSpatialAnchorsCreateStorageInfoML, [*c]XrSpatialAnchorsStorageML) callconv(.c) XrResult;
pub const PFN_xrDestroySpatialAnchorsStorageML = ?*const fn (XrSpatialAnchorsStorageML) callconv(.c) XrResult;
pub const PFN_xrQuerySpatialAnchorsAsyncML = ?*const fn (XrSpatialAnchorsStorageML, [*c]const XrSpatialAnchorsQueryInfoBaseHeaderML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrQuerySpatialAnchorsCompleteML = ?*const fn (XrSpatialAnchorsStorageML, XrFutureEXT, [*c]XrSpatialAnchorsQueryCompletionML) callconv(.c) XrResult;
pub const PFN_xrPublishSpatialAnchorsAsyncML = ?*const fn (XrSpatialAnchorsStorageML, [*c]const XrSpatialAnchorsPublishInfoML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrPublishSpatialAnchorsCompleteML = ?*const fn (XrSpatialAnchorsStorageML, XrFutureEXT, [*c]XrSpatialAnchorsPublishCompletionML) callconv(.c) XrResult;
pub const PFN_xrDeleteSpatialAnchorsAsyncML = ?*const fn (XrSpatialAnchorsStorageML, [*c]const XrSpatialAnchorsDeleteInfoML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrDeleteSpatialAnchorsCompleteML = ?*const fn (XrSpatialAnchorsStorageML, XrFutureEXT, [*c]XrSpatialAnchorsDeleteCompletionML) callconv(.c) XrResult;
pub const PFN_xrUpdateSpatialAnchorsExpirationAsyncML = ?*const fn (XrSpatialAnchorsStorageML, [*c]const XrSpatialAnchorsUpdateExpirationInfoML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrUpdateSpatialAnchorsExpirationCompleteML = ?*const fn (XrSpatialAnchorsStorageML, XrFutureEXT, [*c]XrSpatialAnchorsUpdateExpirationCompletionML) callconv(.c) XrResult;
pub const struct_XrSpatialAnchorStoreConnectionMSFT_T = opaque {};
pub const XrSpatialAnchorStoreConnectionMSFT = ?*struct_XrSpatialAnchorStoreConnectionMSFT_T;
pub const struct_XrSpatialAnchorPersistenceNameMSFT = extern struct {
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const XrSpatialAnchorPersistenceNameMSFT = struct_XrSpatialAnchorPersistenceNameMSFT;
pub const struct_XrSpatialAnchorPersistenceInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    spatialAnchorPersistenceName: XrSpatialAnchorPersistenceNameMSFT = @import("std").mem.zeroes(XrSpatialAnchorPersistenceNameMSFT),
    spatialAnchor: XrSpatialAnchorMSFT = @import("std").mem.zeroes(XrSpatialAnchorMSFT),
};
pub const XrSpatialAnchorPersistenceInfoMSFT = struct_XrSpatialAnchorPersistenceInfoMSFT;
pub const struct_XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT = @import("std").mem.zeroes(XrSpatialAnchorStoreConnectionMSFT),
    spatialAnchorPersistenceName: XrSpatialAnchorPersistenceNameMSFT = @import("std").mem.zeroes(XrSpatialAnchorPersistenceNameMSFT),
};
pub const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT = struct_XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT;
pub const PFN_xrCreateSpatialAnchorStoreConnectionMSFT = ?*const fn (XrSession, [*c]XrSpatialAnchorStoreConnectionMSFT) callconv(.c) XrResult;
pub const PFN_xrDestroySpatialAnchorStoreConnectionMSFT = ?*const fn (XrSpatialAnchorStoreConnectionMSFT) callconv(.c) XrResult;
pub const PFN_xrPersistSpatialAnchorMSFT = ?*const fn (XrSpatialAnchorStoreConnectionMSFT, [*c]const XrSpatialAnchorPersistenceInfoMSFT) callconv(.c) XrResult;
pub const PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT = ?*const fn (XrSpatialAnchorStoreConnectionMSFT, u32, [*c]u32, [*c]XrSpatialAnchorPersistenceNameMSFT) callconv(.c) XrResult;
pub const PFN_xrCreateSpatialAnchorFromPersistedNameMSFT = ?*const fn (XrSession, [*c]const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT, [*c]XrSpatialAnchorMSFT) callconv(.c) XrResult;
pub const PFN_xrUnpersistSpatialAnchorMSFT = ?*const fn (XrSpatialAnchorStoreConnectionMSFT, [*c]const XrSpatialAnchorPersistenceNameMSFT) callconv(.c) XrResult;
pub const PFN_xrClearSpatialAnchorStoreMSFT = ?*const fn (XrSpatialAnchorStoreConnectionMSFT) callconv(.c) XrResult;
pub const XR_SCENE_MARKER_TYPE_QR_CODE_MSFT: c_int = 1;
pub const XR_SCENE_MARKER_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneMarkerTypeMSFT = c_uint;
pub const XrSceneMarkerTypeMSFT = enum_XrSceneMarkerTypeMSFT;
pub const XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_QR_CODE_MSFT: c_int = 1;
pub const XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_MICRO_QR_CODE_MSFT: c_int = 2;
pub const XR_SCENE_MARKER_QRCODE_SYMBOL_TYPE_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_XrSceneMarkerQRCodeSymbolTypeMSFT = c_uint;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT = enum_XrSceneMarkerQRCodeSymbolTypeMSFT;
pub const struct_XrSceneMarkerMSFT = extern struct {
    markerType: XrSceneMarkerTypeMSFT = @import("std").mem.zeroes(XrSceneMarkerTypeMSFT),
    lastSeenTime: XrTime = @import("std").mem.zeroes(XrTime),
    center: XrOffset2Df = @import("std").mem.zeroes(XrOffset2Df),
    size: XrExtent2Df = @import("std").mem.zeroes(XrExtent2Df),
};
pub const XrSceneMarkerMSFT = struct_XrSceneMarkerMSFT;
pub const struct_XrSceneMarkersMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sceneMarkerCapacityInput: u32 = @import("std").mem.zeroes(u32),
    sceneMarkers: [*c]XrSceneMarkerMSFT = @import("std").mem.zeroes([*c]XrSceneMarkerMSFT),
};
pub const XrSceneMarkersMSFT = struct_XrSceneMarkersMSFT;
pub const struct_XrSceneMarkerTypeFilterMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    markerTypeCount: u32 = @import("std").mem.zeroes(u32),
    markerTypes: [*c]XrSceneMarkerTypeMSFT = @import("std").mem.zeroes([*c]XrSceneMarkerTypeMSFT),
};
pub const XrSceneMarkerTypeFilterMSFT = struct_XrSceneMarkerTypeFilterMSFT;
pub const struct_XrSceneMarkerQRCodeMSFT = extern struct {
    symbolType: XrSceneMarkerQRCodeSymbolTypeMSFT = @import("std").mem.zeroes(XrSceneMarkerQRCodeSymbolTypeMSFT),
    version: u8 = @import("std").mem.zeroes(u8),
};
pub const XrSceneMarkerQRCodeMSFT = struct_XrSceneMarkerQRCodeMSFT;
pub const struct_XrSceneMarkerQRCodesMSFT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    qrCodeCapacityInput: u32 = @import("std").mem.zeroes(u32),
    qrCodes: [*c]XrSceneMarkerQRCodeMSFT = @import("std").mem.zeroes([*c]XrSceneMarkerQRCodeMSFT),
};
pub const XrSceneMarkerQRCodesMSFT = struct_XrSceneMarkerQRCodesMSFT;
pub const PFN_xrGetSceneMarkerRawDataMSFT = ?*const fn (XrSceneMSFT, [*c]const XrUuidMSFT, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const PFN_xrGetSceneMarkerDecodedStringMSFT = ?*const fn (XrSceneMSFT, [*c]const XrUuidMSFT, u32, [*c]u32, [*c]u8) callconv(.c) XrResult;
pub const XR_HAND_FOREARM_JOINT_PALM_ULTRALEAP: c_int = 0;
pub const XR_HAND_FOREARM_JOINT_WRIST_ULTRALEAP: c_int = 1;
pub const XR_HAND_FOREARM_JOINT_THUMB_METACARPAL_ULTRALEAP: c_int = 2;
pub const XR_HAND_FOREARM_JOINT_THUMB_PROXIMAL_ULTRALEAP: c_int = 3;
pub const XR_HAND_FOREARM_JOINT_THUMB_DISTAL_ULTRALEAP: c_int = 4;
pub const XR_HAND_FOREARM_JOINT_THUMB_TIP_ULTRALEAP: c_int = 5;
pub const XR_HAND_FOREARM_JOINT_INDEX_METACARPAL_ULTRALEAP: c_int = 6;
pub const XR_HAND_FOREARM_JOINT_INDEX_PROXIMAL_ULTRALEAP: c_int = 7;
pub const XR_HAND_FOREARM_JOINT_INDEX_INTERMEDIATE_ULTRALEAP: c_int = 8;
pub const XR_HAND_FOREARM_JOINT_INDEX_DISTAL_ULTRALEAP: c_int = 9;
pub const XR_HAND_FOREARM_JOINT_INDEX_TIP_ULTRALEAP: c_int = 10;
pub const XR_HAND_FOREARM_JOINT_MIDDLE_METACARPAL_ULTRALEAP: c_int = 11;
pub const XR_HAND_FOREARM_JOINT_MIDDLE_PROXIMAL_ULTRALEAP: c_int = 12;
pub const XR_HAND_FOREARM_JOINT_MIDDLE_INTERMEDIATE_ULTRALEAP: c_int = 13;
pub const XR_HAND_FOREARM_JOINT_MIDDLE_DISTAL_ULTRALEAP: c_int = 14;
pub const XR_HAND_FOREARM_JOINT_MIDDLE_TIP_ULTRALEAP: c_int = 15;
pub const XR_HAND_FOREARM_JOINT_RING_METACARPAL_ULTRALEAP: c_int = 16;
pub const XR_HAND_FOREARM_JOINT_RING_PROXIMAL_ULTRALEAP: c_int = 17;
pub const XR_HAND_FOREARM_JOINT_RING_INTERMEDIATE_ULTRALEAP: c_int = 18;
pub const XR_HAND_FOREARM_JOINT_RING_DISTAL_ULTRALEAP: c_int = 19;
pub const XR_HAND_FOREARM_JOINT_RING_TIP_ULTRALEAP: c_int = 20;
pub const XR_HAND_FOREARM_JOINT_LITTLE_METACARPAL_ULTRALEAP: c_int = 21;
pub const XR_HAND_FOREARM_JOINT_LITTLE_PROXIMAL_ULTRALEAP: c_int = 22;
pub const XR_HAND_FOREARM_JOINT_LITTLE_INTERMEDIATE_ULTRALEAP: c_int = 23;
pub const XR_HAND_FOREARM_JOINT_LITTLE_DISTAL_ULTRALEAP: c_int = 24;
pub const XR_HAND_FOREARM_JOINT_LITTLE_TIP_ULTRALEAP: c_int = 25;
pub const XR_HAND_FOREARM_JOINT_ELBOW_ULTRALEAP: c_int = 26;
pub const XR_HAND_FOREARM_JOINT_MAX_ENUM_ULTRALEAP: c_int = 2147483647;
pub const enum_XrHandForearmJointULTRALEAP = c_uint;
pub const XrHandForearmJointULTRALEAP = enum_XrHandForearmJointULTRALEAP;
pub const XR_SPACE_QUERY_ACTION_LOAD_FB: c_int = 0;
pub const XR_SPACE_QUERY_ACTION_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrSpaceQueryActionFB = c_uint;
pub const XrSpaceQueryActionFB = enum_XrSpaceQueryActionFB;
pub const XR_SPACE_STORAGE_LOCATION_INVALID_FB: c_int = 0;
pub const XR_SPACE_STORAGE_LOCATION_LOCAL_FB: c_int = 1;
pub const XR_SPACE_STORAGE_LOCATION_CLOUD_FB: c_int = 2;
pub const XR_SPACE_STORAGE_LOCATION_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrSpaceStorageLocationFB = c_uint;
pub const XrSpaceStorageLocationFB = enum_XrSpaceStorageLocationFB;
pub const struct_XrSpaceQueryInfoBaseHeaderFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpaceQueryInfoBaseHeaderFB = struct_XrSpaceQueryInfoBaseHeaderFB;
pub const struct_XrSpaceFilterInfoBaseHeaderFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpaceFilterInfoBaseHeaderFB = struct_XrSpaceFilterInfoBaseHeaderFB;
pub const struct_XrSpaceQueryInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queryAction: XrSpaceQueryActionFB = @import("std").mem.zeroes(XrSpaceQueryActionFB),
    maxResultCount: u32 = @import("std").mem.zeroes(u32),
    timeout: XrDuration = @import("std").mem.zeroes(XrDuration),
    filter: [*c]const XrSpaceFilterInfoBaseHeaderFB = @import("std").mem.zeroes([*c]const XrSpaceFilterInfoBaseHeaderFB),
    excludeFilter: [*c]const XrSpaceFilterInfoBaseHeaderFB = @import("std").mem.zeroes([*c]const XrSpaceFilterInfoBaseHeaderFB),
};
pub const XrSpaceQueryInfoFB = struct_XrSpaceQueryInfoFB;
pub const struct_XrSpaceStorageLocationFilterInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    location: XrSpaceStorageLocationFB = @import("std").mem.zeroes(XrSpaceStorageLocationFB),
};
pub const XrSpaceStorageLocationFilterInfoFB = struct_XrSpaceStorageLocationFilterInfoFB;
pub const struct_XrSpaceUuidFilterInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    uuidCount: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]XrUuidEXT = @import("std").mem.zeroes([*c]XrUuidEXT),
};
pub const XrSpaceUuidFilterInfoFB = struct_XrSpaceUuidFilterInfoFB;
pub const struct_XrSpaceComponentFilterInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    componentType: XrSpaceComponentTypeFB = @import("std").mem.zeroes(XrSpaceComponentTypeFB),
};
pub const XrSpaceComponentFilterInfoFB = struct_XrSpaceComponentFilterInfoFB;
pub const struct_XrSpaceQueryResultFB = extern struct {
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
};
pub const XrSpaceQueryResultFB = struct_XrSpaceQueryResultFB;
pub const struct_XrSpaceQueryResultsFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    resultCapacityInput: u32 = @import("std").mem.zeroes(u32),
    resultCountOutput: u32 = @import("std").mem.zeroes(u32),
    results: [*c]XrSpaceQueryResultFB = @import("std").mem.zeroes([*c]XrSpaceQueryResultFB),
};
pub const XrSpaceQueryResultsFB = struct_XrSpaceQueryResultsFB;
pub const struct_XrEventDataSpaceQueryResultsAvailableFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
};
pub const XrEventDataSpaceQueryResultsAvailableFB = struct_XrEventDataSpaceQueryResultsAvailableFB;
pub const struct_XrEventDataSpaceQueryCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataSpaceQueryCompleteFB = struct_XrEventDataSpaceQueryCompleteFB;
pub const PFN_xrQuerySpacesFB = ?*const fn (XrSession, [*c]const XrSpaceQueryInfoBaseHeaderFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrRetrieveSpaceQueryResultsFB = ?*const fn (XrSession, XrAsyncRequestIdFB, [*c]XrSpaceQueryResultsFB) callconv(.c) XrResult;
pub const XR_SPACE_PERSISTENCE_MODE_INVALID_FB: c_int = 0;
pub const XR_SPACE_PERSISTENCE_MODE_INDEFINITE_FB: c_int = 1;
pub const XR_SPACE_PERSISTENCE_MODE_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrSpacePersistenceModeFB = c_uint;
pub const XrSpacePersistenceModeFB = enum_XrSpacePersistenceModeFB;
pub const struct_XrSpaceSaveInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    location: XrSpaceStorageLocationFB = @import("std").mem.zeroes(XrSpaceStorageLocationFB),
    persistenceMode: XrSpacePersistenceModeFB = @import("std").mem.zeroes(XrSpacePersistenceModeFB),
};
pub const XrSpaceSaveInfoFB = struct_XrSpaceSaveInfoFB;
pub const struct_XrSpaceEraseInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    location: XrSpaceStorageLocationFB = @import("std").mem.zeroes(XrSpaceStorageLocationFB),
};
pub const XrSpaceEraseInfoFB = struct_XrSpaceEraseInfoFB;
pub const struct_XrEventDataSpaceSaveCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    location: XrSpaceStorageLocationFB = @import("std").mem.zeroes(XrSpaceStorageLocationFB),
};
pub const XrEventDataSpaceSaveCompleteFB = struct_XrEventDataSpaceSaveCompleteFB;
pub const struct_XrEventDataSpaceEraseCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    location: XrSpaceStorageLocationFB = @import("std").mem.zeroes(XrSpaceStorageLocationFB),
};
pub const XrEventDataSpaceEraseCompleteFB = struct_XrEventDataSpaceEraseCompleteFB;
pub const PFN_xrSaveSpaceFB = ?*const fn (XrSession, [*c]const XrSpaceSaveInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrEraseSpaceFB = ?*const fn (XrSession, [*c]const XrSpaceEraseInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const struct_XrSpaceUserFB_T = opaque {};
pub const XrSpaceUserFB = ?*struct_XrSpaceUserFB_T;
pub const struct_XrSpaceShareInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    spaceCount: u32 = @import("std").mem.zeroes(u32),
    spaces: [*c]XrSpace = @import("std").mem.zeroes([*c]XrSpace),
    userCount: u32 = @import("std").mem.zeroes(u32),
    users: [*c]XrSpaceUserFB = @import("std").mem.zeroes([*c]XrSpaceUserFB),
};
pub const XrSpaceShareInfoFB = struct_XrSpaceShareInfoFB;
pub const struct_XrEventDataSpaceShareCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataSpaceShareCompleteFB = struct_XrEventDataSpaceShareCompleteFB;
pub const PFN_xrShareSpacesFB = ?*const fn (XrSession, [*c]const XrSpaceShareInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const XrCompositionLayerSpaceWarpInfoFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB: XrCompositionLayerSpaceWarpInfoFlagsFB = 1;
pub const struct_XrCompositionLayerSpaceWarpInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerSpaceWarpInfoFlagsFB = @import("std").mem.zeroes(XrCompositionLayerSpaceWarpInfoFlagsFB),
    motionVectorSubImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    appSpaceDeltaPose: XrPosef = @import("std").mem.zeroes(XrPosef),
    depthSubImage: XrSwapchainSubImage = @import("std").mem.zeroes(XrSwapchainSubImage),
    minDepth: f32 = @import("std").mem.zeroes(f32),
    maxDepth: f32 = @import("std").mem.zeroes(f32),
    nearZ: f32 = @import("std").mem.zeroes(f32),
    farZ: f32 = @import("std").mem.zeroes(f32),
};
pub const XrCompositionLayerSpaceWarpInfoFB = struct_XrCompositionLayerSpaceWarpInfoFB;
pub const struct_XrSystemSpaceWarpPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    recommendedMotionVectorImageRectWidth: u32 = @import("std").mem.zeroes(u32),
    recommendedMotionVectorImageRectHeight: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSystemSpaceWarpPropertiesFB = struct_XrSystemSpaceWarpPropertiesFB;
pub const struct_XrHapticAmplitudeEnvelopeVibrationFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    duration: XrDuration = @import("std").mem.zeroes(XrDuration),
    amplitudeCount: u32 = @import("std").mem.zeroes(u32),
    amplitudes: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const XrHapticAmplitudeEnvelopeVibrationFB = struct_XrHapticAmplitudeEnvelopeVibrationFB;
pub const XrSemanticLabelsSupportFlagsFB = XrFlags64;
pub const XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB: XrSemanticLabelsSupportFlagsFB = 1;
pub const XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB: XrSemanticLabelsSupportFlagsFB = 2;
pub const XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_INVISIBLE_WALL_FACE_BIT_FB: XrSemanticLabelsSupportFlagsFB = 4;
pub const XrExtent3DfFB = XrExtent3Df;
pub const struct_XrOffset3DfFB = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
};
pub const XrOffset3DfFB = struct_XrOffset3DfFB;
pub const struct_XrRect3DfFB = extern struct {
    offset: XrOffset3DfFB = @import("std").mem.zeroes(XrOffset3DfFB),
    extent: XrExtent3DfFB = @import("std").mem.zeroes(XrExtent3DfFB),
};
pub const XrRect3DfFB = struct_XrRect3DfFB;
pub const struct_XrSemanticLabelsFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferCapacityInput: u32 = @import("std").mem.zeroes(u32),
    bufferCountOutput: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const XrSemanticLabelsFB = struct_XrSemanticLabelsFB;
pub const struct_XrRoomLayoutFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    floorUuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    ceilingUuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    wallUuidCapacityInput: u32 = @import("std").mem.zeroes(u32),
    wallUuidCountOutput: u32 = @import("std").mem.zeroes(u32),
    wallUuids: [*c]XrUuidEXT = @import("std").mem.zeroes([*c]XrUuidEXT),
};
pub const XrRoomLayoutFB = struct_XrRoomLayoutFB;
pub const struct_XrBoundary2DFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]XrVector2f = @import("std").mem.zeroes([*c]XrVector2f),
};
pub const XrBoundary2DFB = struct_XrBoundary2DFB;
pub const struct_XrSemanticLabelsSupportInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrSemanticLabelsSupportFlagsFB = @import("std").mem.zeroes(XrSemanticLabelsSupportFlagsFB),
    recognizedLabels: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrSemanticLabelsSupportInfoFB = struct_XrSemanticLabelsSupportInfoFB;
pub const PFN_xrGetSpaceBoundingBox2DFB = ?*const fn (XrSession, XrSpace, [*c]XrRect2Df) callconv(.c) XrResult;
pub const PFN_xrGetSpaceBoundingBox3DFB = ?*const fn (XrSession, XrSpace, [*c]XrRect3DfFB) callconv(.c) XrResult;
pub const PFN_xrGetSpaceSemanticLabelsFB = ?*const fn (XrSession, XrSpace, [*c]XrSemanticLabelsFB) callconv(.c) XrResult;
pub const PFN_xrGetSpaceBoundary2DFB = ?*const fn (XrSession, XrSpace, [*c]XrBoundary2DFB) callconv(.c) XrResult;
pub const PFN_xrGetSpaceRoomLayoutFB = ?*const fn (XrSession, XrSpace, [*c]XrRoomLayoutFB) callconv(.c) XrResult;
pub const XrDigitalLensControlFlagsALMALENCE = XrFlags64;
pub const XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE: XrDigitalLensControlFlagsALMALENCE = 1;
pub const struct_XrDigitalLensControlALMALENCE = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrDigitalLensControlFlagsALMALENCE = @import("std").mem.zeroes(XrDigitalLensControlFlagsALMALENCE),
};
pub const XrDigitalLensControlALMALENCE = struct_XrDigitalLensControlALMALENCE;
pub const PFN_xrSetDigitalLensControlALMALENCE = ?*const fn (XrSession, [*c]const XrDigitalLensControlALMALENCE) callconv(.c) XrResult;
pub const struct_XrEventDataSceneCaptureCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataSceneCaptureCompleteFB = struct_XrEventDataSceneCaptureCompleteFB;
pub const struct_XrSceneCaptureRequestInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestByteCount: u32 = @import("std").mem.zeroes(u32),
    request: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrSceneCaptureRequestInfoFB = struct_XrSceneCaptureRequestInfoFB;
pub const PFN_xrRequestSceneCaptureFB = ?*const fn (XrSession, [*c]const XrSceneCaptureRequestInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const struct_XrSpaceContainerFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    uuidCapacityInput: u32 = @import("std").mem.zeroes(u32),
    uuidCountOutput: u32 = @import("std").mem.zeroes(u32),
    uuids: [*c]XrUuidEXT = @import("std").mem.zeroes([*c]XrUuidEXT),
};
pub const XrSpaceContainerFB = struct_XrSpaceContainerFB;
pub const PFN_xrGetSpaceContainerFB = ?*const fn (XrSession, XrSpace, [*c]XrSpaceContainerFB) callconv(.c) XrResult;
pub const XrFoveationEyeTrackedProfileCreateFlagsMETA = XrFlags64;
pub const XrFoveationEyeTrackedStateFlagsMETA = XrFlags64;
pub const XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META: XrFoveationEyeTrackedStateFlagsMETA = 1;
pub const struct_XrFoveationEyeTrackedProfileCreateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrFoveationEyeTrackedProfileCreateFlagsMETA = @import("std").mem.zeroes(XrFoveationEyeTrackedProfileCreateFlagsMETA),
};
pub const XrFoveationEyeTrackedProfileCreateInfoMETA = struct_XrFoveationEyeTrackedProfileCreateInfoMETA;
pub const struct_XrFoveationEyeTrackedStateMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    foveationCenter: [2]XrVector2f = @import("std").mem.zeroes([2]XrVector2f),
    flags: XrFoveationEyeTrackedStateFlagsMETA = @import("std").mem.zeroes(XrFoveationEyeTrackedStateFlagsMETA),
};
pub const XrFoveationEyeTrackedStateMETA = struct_XrFoveationEyeTrackedStateMETA;
pub const struct_XrSystemFoveationEyeTrackedPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsFoveationEyeTracked: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemFoveationEyeTrackedPropertiesMETA = struct_XrSystemFoveationEyeTrackedPropertiesMETA;
pub const PFN_xrGetFoveationEyeTrackedStateMETA = ?*const fn (XrSession, [*c]XrFoveationEyeTrackedStateMETA) callconv(.c) XrResult;
pub const struct_XrFaceTrackerFB_T = opaque {};
pub const XrFaceTrackerFB = ?*struct_XrFaceTrackerFB_T;
pub const XR_FACE_EXPRESSION_BROW_LOWERER_L_FB: c_int = 0;
pub const XR_FACE_EXPRESSION_BROW_LOWERER_R_FB: c_int = 1;
pub const XR_FACE_EXPRESSION_CHEEK_PUFF_L_FB: c_int = 2;
pub const XR_FACE_EXPRESSION_CHEEK_PUFF_R_FB: c_int = 3;
pub const XR_FACE_EXPRESSION_CHEEK_RAISER_L_FB: c_int = 4;
pub const XR_FACE_EXPRESSION_CHEEK_RAISER_R_FB: c_int = 5;
pub const XR_FACE_EXPRESSION_CHEEK_SUCK_L_FB: c_int = 6;
pub const XR_FACE_EXPRESSION_CHEEK_SUCK_R_FB: c_int = 7;
pub const XR_FACE_EXPRESSION_CHIN_RAISER_B_FB: c_int = 8;
pub const XR_FACE_EXPRESSION_CHIN_RAISER_T_FB: c_int = 9;
pub const XR_FACE_EXPRESSION_DIMPLER_L_FB: c_int = 10;
pub const XR_FACE_EXPRESSION_DIMPLER_R_FB: c_int = 11;
pub const XR_FACE_EXPRESSION_EYES_CLOSED_L_FB: c_int = 12;
pub const XR_FACE_EXPRESSION_EYES_CLOSED_R_FB: c_int = 13;
pub const XR_FACE_EXPRESSION_EYES_LOOK_DOWN_L_FB: c_int = 14;
pub const XR_FACE_EXPRESSION_EYES_LOOK_DOWN_R_FB: c_int = 15;
pub const XR_FACE_EXPRESSION_EYES_LOOK_LEFT_L_FB: c_int = 16;
pub const XR_FACE_EXPRESSION_EYES_LOOK_LEFT_R_FB: c_int = 17;
pub const XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_L_FB: c_int = 18;
pub const XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_R_FB: c_int = 19;
pub const XR_FACE_EXPRESSION_EYES_LOOK_UP_L_FB: c_int = 20;
pub const XR_FACE_EXPRESSION_EYES_LOOK_UP_R_FB: c_int = 21;
pub const XR_FACE_EXPRESSION_INNER_BROW_RAISER_L_FB: c_int = 22;
pub const XR_FACE_EXPRESSION_INNER_BROW_RAISER_R_FB: c_int = 23;
pub const XR_FACE_EXPRESSION_JAW_DROP_FB: c_int = 24;
pub const XR_FACE_EXPRESSION_JAW_SIDEWAYS_LEFT_FB: c_int = 25;
pub const XR_FACE_EXPRESSION_JAW_SIDEWAYS_RIGHT_FB: c_int = 26;
pub const XR_FACE_EXPRESSION_JAW_THRUST_FB: c_int = 27;
pub const XR_FACE_EXPRESSION_LID_TIGHTENER_L_FB: c_int = 28;
pub const XR_FACE_EXPRESSION_LID_TIGHTENER_R_FB: c_int = 29;
pub const XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_L_FB: c_int = 30;
pub const XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_R_FB: c_int = 31;
pub const XR_FACE_EXPRESSION_LIP_CORNER_PULLER_L_FB: c_int = 32;
pub const XR_FACE_EXPRESSION_LIP_CORNER_PULLER_R_FB: c_int = 33;
pub const XR_FACE_EXPRESSION_LIP_FUNNELER_LB_FB: c_int = 34;
pub const XR_FACE_EXPRESSION_LIP_FUNNELER_LT_FB: c_int = 35;
pub const XR_FACE_EXPRESSION_LIP_FUNNELER_RB_FB: c_int = 36;
pub const XR_FACE_EXPRESSION_LIP_FUNNELER_RT_FB: c_int = 37;
pub const XR_FACE_EXPRESSION_LIP_PRESSOR_L_FB: c_int = 38;
pub const XR_FACE_EXPRESSION_LIP_PRESSOR_R_FB: c_int = 39;
pub const XR_FACE_EXPRESSION_LIP_PUCKER_L_FB: c_int = 40;
pub const XR_FACE_EXPRESSION_LIP_PUCKER_R_FB: c_int = 41;
pub const XR_FACE_EXPRESSION_LIP_STRETCHER_L_FB: c_int = 42;
pub const XR_FACE_EXPRESSION_LIP_STRETCHER_R_FB: c_int = 43;
pub const XR_FACE_EXPRESSION_LIP_SUCK_LB_FB: c_int = 44;
pub const XR_FACE_EXPRESSION_LIP_SUCK_LT_FB: c_int = 45;
pub const XR_FACE_EXPRESSION_LIP_SUCK_RB_FB: c_int = 46;
pub const XR_FACE_EXPRESSION_LIP_SUCK_RT_FB: c_int = 47;
pub const XR_FACE_EXPRESSION_LIP_TIGHTENER_L_FB: c_int = 48;
pub const XR_FACE_EXPRESSION_LIP_TIGHTENER_R_FB: c_int = 49;
pub const XR_FACE_EXPRESSION_LIPS_TOWARD_FB: c_int = 50;
pub const XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_L_FB: c_int = 51;
pub const XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_R_FB: c_int = 52;
pub const XR_FACE_EXPRESSION_MOUTH_LEFT_FB: c_int = 53;
pub const XR_FACE_EXPRESSION_MOUTH_RIGHT_FB: c_int = 54;
pub const XR_FACE_EXPRESSION_NOSE_WRINKLER_L_FB: c_int = 55;
pub const XR_FACE_EXPRESSION_NOSE_WRINKLER_R_FB: c_int = 56;
pub const XR_FACE_EXPRESSION_OUTER_BROW_RAISER_L_FB: c_int = 57;
pub const XR_FACE_EXPRESSION_OUTER_BROW_RAISER_R_FB: c_int = 58;
pub const XR_FACE_EXPRESSION_UPPER_LID_RAISER_L_FB: c_int = 59;
pub const XR_FACE_EXPRESSION_UPPER_LID_RAISER_R_FB: c_int = 60;
pub const XR_FACE_EXPRESSION_UPPER_LIP_RAISER_L_FB: c_int = 61;
pub const XR_FACE_EXPRESSION_UPPER_LIP_RAISER_R_FB: c_int = 62;
pub const XR_FACE_EXPRESSION_COUNT_FB: c_int = 63;
pub const XR_FACE_EXPRESSION_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceExpressionFB = c_uint;
pub const XrFaceExpressionFB = enum_XrFaceExpressionFB;
pub const XR_FACE_EXPRESSION_SET_DEFAULT_FB: c_int = 0;
pub const XR_FACE_EXPRESSION_SET_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceExpressionSetFB = c_uint;
pub const XrFaceExpressionSetFB = enum_XrFaceExpressionSetFB;
pub const XR_FACE_CONFIDENCE_LOWER_FACE_FB: c_int = 0;
pub const XR_FACE_CONFIDENCE_UPPER_FACE_FB: c_int = 1;
pub const XR_FACE_CONFIDENCE_COUNT_FB: c_int = 2;
pub const XR_FACE_CONFIDENCE_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceConfidenceFB = c_uint;
pub const XrFaceConfidenceFB = enum_XrFaceConfidenceFB;
pub const struct_XrSystemFaceTrackingPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsFaceTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemFaceTrackingPropertiesFB = struct_XrSystemFaceTrackingPropertiesFB;
pub const struct_XrFaceTrackerCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    faceExpressionSet: XrFaceExpressionSetFB = @import("std").mem.zeroes(XrFaceExpressionSetFB),
};
pub const XrFaceTrackerCreateInfoFB = struct_XrFaceTrackerCreateInfoFB;
pub const struct_XrFaceExpressionInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrFaceExpressionInfoFB = struct_XrFaceExpressionInfoFB;
pub const struct_XrFaceExpressionStatusFB = extern struct {
    isValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
    isEyeFollowingBlendshapesValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrFaceExpressionStatusFB = struct_XrFaceExpressionStatusFB;
pub const struct_XrFaceExpressionWeightsFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    weightCount: u32 = @import("std").mem.zeroes(u32),
    weights: [*c]f32 = @import("std").mem.zeroes([*c]f32),
    confidenceCount: u32 = @import("std").mem.zeroes(u32),
    confidences: [*c]f32 = @import("std").mem.zeroes([*c]f32),
    status: XrFaceExpressionStatusFB = @import("std").mem.zeroes(XrFaceExpressionStatusFB),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrFaceExpressionWeightsFB = struct_XrFaceExpressionWeightsFB;
pub const PFN_xrCreateFaceTrackerFB = ?*const fn (XrSession, [*c]const XrFaceTrackerCreateInfoFB, [*c]XrFaceTrackerFB) callconv(.c) XrResult;
pub const PFN_xrDestroyFaceTrackerFB = ?*const fn (XrFaceTrackerFB) callconv(.c) XrResult;
pub const PFN_xrGetFaceExpressionWeightsFB = ?*const fn (XrFaceTrackerFB, [*c]const XrFaceExpressionInfoFB, [*c]XrFaceExpressionWeightsFB) callconv(.c) XrResult;
pub const struct_XrEyeTrackerFB_T = opaque {};
pub const XrEyeTrackerFB = ?*struct_XrEyeTrackerFB_T;
pub const XR_EYE_POSITION_LEFT_FB: c_int = 0;
pub const XR_EYE_POSITION_RIGHT_FB: c_int = 1;
pub const XR_EYE_POSITION_COUNT_FB: c_int = 2;
pub const XR_EYE_POSITION_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrEyePositionFB = c_uint;
pub const XrEyePositionFB = enum_XrEyePositionFB;
pub const struct_XrEyeGazeFB = extern struct {
    isValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
    gazePose: XrPosef = @import("std").mem.zeroes(XrPosef),
    gazeConfidence: f32 = @import("std").mem.zeroes(f32),
};
pub const XrEyeGazeFB = struct_XrEyeGazeFB;
pub const struct_XrEyeTrackerCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrEyeTrackerCreateInfoFB = struct_XrEyeTrackerCreateInfoFB;
pub const struct_XrEyeGazesInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEyeGazesInfoFB = struct_XrEyeGazesInfoFB;
pub const struct_XrSystemEyeTrackingPropertiesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsEyeTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemEyeTrackingPropertiesFB = struct_XrSystemEyeTrackingPropertiesFB;
pub const struct_XrEyeGazesFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    gaze: [2]XrEyeGazeFB = @import("std").mem.zeroes([2]XrEyeGazeFB),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEyeGazesFB = struct_XrEyeGazesFB;
pub const PFN_xrCreateEyeTrackerFB = ?*const fn (XrSession, [*c]const XrEyeTrackerCreateInfoFB, [*c]XrEyeTrackerFB) callconv(.c) XrResult;
pub const PFN_xrDestroyEyeTrackerFB = ?*const fn (XrEyeTrackerFB) callconv(.c) XrResult;
pub const PFN_xrGetEyeGazesFB = ?*const fn (XrEyeTrackerFB, [*c]const XrEyeGazesInfoFB, [*c]XrEyeGazesFB) callconv(.c) XrResult;
pub const struct_XrPassthroughKeyboardHandsIntensityFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    leftHandIntensity: f32 = @import("std").mem.zeroes(f32),
    rightHandIntensity: f32 = @import("std").mem.zeroes(f32),
};
pub const XrPassthroughKeyboardHandsIntensityFB = struct_XrPassthroughKeyboardHandsIntensityFB;
pub const PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB = ?*const fn (XrPassthroughLayerFB, [*c]const XrPassthroughKeyboardHandsIntensityFB) callconv(.c) XrResult;
pub const XrCompositionLayerSettingsFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB: XrCompositionLayerSettingsFlagsFB = 1;
pub const XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB: XrCompositionLayerSettingsFlagsFB = 2;
pub const XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB: XrCompositionLayerSettingsFlagsFB = 4;
pub const XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB: XrCompositionLayerSettingsFlagsFB = 8;
pub const XR_COMPOSITION_LAYER_SETTINGS_AUTO_LAYER_FILTER_BIT_META: XrCompositionLayerSettingsFlagsFB = 32;
pub const struct_XrCompositionLayerSettingsFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerSettingsFlagsFB = @import("std").mem.zeroes(XrCompositionLayerSettingsFlagsFB),
};
pub const XrCompositionLayerSettingsFB = struct_XrCompositionLayerSettingsFB;
pub const struct_XrHapticPcmVibrationFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferSize: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
    sampleRate: f32 = @import("std").mem.zeroes(f32),
    append: XrBool32 = @import("std").mem.zeroes(XrBool32),
    samplesConsumed: [*c]u32 = @import("std").mem.zeroes([*c]u32),
};
pub const XrHapticPcmVibrationFB = struct_XrHapticPcmVibrationFB;
pub const struct_XrDevicePcmSampleRateStateFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleRate: f32 = @import("std").mem.zeroes(f32),
};
pub const XrDevicePcmSampleRateStateFB = struct_XrDevicePcmSampleRateStateFB;
pub const XrDevicePcmSampleRateGetInfoFB = XrDevicePcmSampleRateStateFB;
pub const PFN_xrGetDeviceSampleRateFB = ?*const fn (XrSession, [*c]const XrHapticActionInfo, [*c]XrDevicePcmSampleRateGetInfoFB) callconv(.c) XrResult;
pub const XR_COMPARE_OP_NEVER_FB: c_int = 0;
pub const XR_COMPARE_OP_LESS_FB: c_int = 1;
pub const XR_COMPARE_OP_EQUAL_FB: c_int = 2;
pub const XR_COMPARE_OP_LESS_OR_EQUAL_FB: c_int = 3;
pub const XR_COMPARE_OP_GREATER_FB: c_int = 4;
pub const XR_COMPARE_OP_NOT_EQUAL_FB: c_int = 5;
pub const XR_COMPARE_OP_GREATER_OR_EQUAL_FB: c_int = 6;
pub const XR_COMPARE_OP_ALWAYS_FB: c_int = 7;
pub const XR_COMPARE_OP_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrCompareOpFB = c_uint;
pub const XrCompareOpFB = enum_XrCompareOpFB;
pub const struct_XrCompositionLayerDepthTestFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthMask: XrBool32 = @import("std").mem.zeroes(XrBool32),
    compareOp: XrCompareOpFB = @import("std").mem.zeroes(XrCompareOpFB),
};
pub const XrCompositionLayerDepthTestFB = struct_XrCompositionLayerDepthTestFB;
pub const XR_LOCAL_DIMMING_MODE_OFF_META: c_int = 0;
pub const XR_LOCAL_DIMMING_MODE_ON_META: c_int = 1;
pub const XR_LOCAL_DIMMING_MODE_MAX_ENUM_META: c_int = 2147483647;
pub const enum_XrLocalDimmingModeMETA = c_uint;
pub const XrLocalDimmingModeMETA = enum_XrLocalDimmingModeMETA;
pub const struct_XrLocalDimmingFrameEndInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    localDimmingMode: XrLocalDimmingModeMETA = @import("std").mem.zeroes(XrLocalDimmingModeMETA),
};
pub const XrLocalDimmingFrameEndInfoMETA = struct_XrLocalDimmingFrameEndInfoMETA;
pub const XrPassthroughPreferenceFlagsMETA = XrFlags64;
pub const XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META: XrPassthroughPreferenceFlagsMETA = 1;
pub const struct_XrPassthroughPreferencesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrPassthroughPreferenceFlagsMETA = @import("std").mem.zeroes(XrPassthroughPreferenceFlagsMETA),
};
pub const XrPassthroughPreferencesMETA = struct_XrPassthroughPreferencesMETA;
pub const PFN_xrGetPassthroughPreferencesMETA = ?*const fn (XrSession, [*c]XrPassthroughPreferencesMETA) callconv(.c) XrResult;
pub const struct_XrVirtualKeyboardMETA_T = opaque {};
pub const XrVirtualKeyboardMETA = ?*struct_XrVirtualKeyboardMETA_T;
pub const XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_CUSTOM_META: c_int = 0;
pub const XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_FAR_META: c_int = 1;
pub const XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_DIRECT_META: c_int = 2;
pub const XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_MAX_ENUM_META: c_int = 2147483647;
pub const enum_XrVirtualKeyboardLocationTypeMETA = c_uint;
pub const XrVirtualKeyboardLocationTypeMETA = enum_XrVirtualKeyboardLocationTypeMETA;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_LEFT_META: c_int = 1;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_RIGHT_META: c_int = 2;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_LEFT_META: c_int = 3;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_RIGHT_META: c_int = 4;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_LEFT_META: c_int = 5;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_RIGHT_META: c_int = 6;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_LEFT_META: c_int = 7;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_RIGHT_META: c_int = 8;
pub const XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_MAX_ENUM_META: c_int = 2147483647;
pub const enum_XrVirtualKeyboardInputSourceMETA = c_uint;
pub const XrVirtualKeyboardInputSourceMETA = enum_XrVirtualKeyboardInputSourceMETA;
pub const XrVirtualKeyboardInputStateFlagsMETA = XrFlags64;
pub const XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META: XrVirtualKeyboardInputStateFlagsMETA = 1;
pub const struct_XrSystemVirtualKeyboardPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsVirtualKeyboard: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemVirtualKeyboardPropertiesMETA = struct_XrSystemVirtualKeyboardPropertiesMETA;
pub const struct_XrVirtualKeyboardCreateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrVirtualKeyboardCreateInfoMETA = struct_XrVirtualKeyboardCreateInfoMETA;
pub const struct_XrVirtualKeyboardSpaceCreateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    locationType: XrVirtualKeyboardLocationTypeMETA = @import("std").mem.zeroes(XrVirtualKeyboardLocationTypeMETA),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    poseInSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrVirtualKeyboardSpaceCreateInfoMETA = struct_XrVirtualKeyboardSpaceCreateInfoMETA;
pub const struct_XrVirtualKeyboardLocationInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    locationType: XrVirtualKeyboardLocationTypeMETA = @import("std").mem.zeroes(XrVirtualKeyboardLocationTypeMETA),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    poseInSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
    scale: f32 = @import("std").mem.zeroes(f32),
};
pub const XrVirtualKeyboardLocationInfoMETA = struct_XrVirtualKeyboardLocationInfoMETA;
pub const struct_XrVirtualKeyboardModelVisibilitySetInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    visible: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrVirtualKeyboardModelVisibilitySetInfoMETA = struct_XrVirtualKeyboardModelVisibilitySetInfoMETA;
pub const struct_XrVirtualKeyboardAnimationStateMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    animationIndex: i32 = @import("std").mem.zeroes(i32),
    fraction: f32 = @import("std").mem.zeroes(f32),
};
pub const XrVirtualKeyboardAnimationStateMETA = struct_XrVirtualKeyboardAnimationStateMETA;
pub const struct_XrVirtualKeyboardModelAnimationStatesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stateCapacityInput: u32 = @import("std").mem.zeroes(u32),
    stateCountOutput: u32 = @import("std").mem.zeroes(u32),
    states: [*c]XrVirtualKeyboardAnimationStateMETA = @import("std").mem.zeroes([*c]XrVirtualKeyboardAnimationStateMETA),
};
pub const XrVirtualKeyboardModelAnimationStatesMETA = struct_XrVirtualKeyboardModelAnimationStatesMETA;
pub const struct_XrVirtualKeyboardTextureDataMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureWidth: u32 = @import("std").mem.zeroes(u32),
    textureHeight: u32 = @import("std").mem.zeroes(u32),
    bufferCapacityInput: u32 = @import("std").mem.zeroes(u32),
    bufferCountOutput: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const XrVirtualKeyboardTextureDataMETA = struct_XrVirtualKeyboardTextureDataMETA;
pub const struct_XrVirtualKeyboardInputInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    inputSource: XrVirtualKeyboardInputSourceMETA = @import("std").mem.zeroes(XrVirtualKeyboardInputSourceMETA),
    inputSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    inputPoseInSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
    inputState: XrVirtualKeyboardInputStateFlagsMETA = @import("std").mem.zeroes(XrVirtualKeyboardInputStateFlagsMETA),
};
pub const XrVirtualKeyboardInputInfoMETA = struct_XrVirtualKeyboardInputInfoMETA;
pub const struct_XrVirtualKeyboardTextContextChangeInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    textContext: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrVirtualKeyboardTextContextChangeInfoMETA = struct_XrVirtualKeyboardTextContextChangeInfoMETA;
pub const struct_XrEventDataVirtualKeyboardCommitTextMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    keyboard: XrVirtualKeyboardMETA = @import("std").mem.zeroes(XrVirtualKeyboardMETA),
    text: [3992]u8 = @import("std").mem.zeroes([3992]u8),
};
pub const XrEventDataVirtualKeyboardCommitTextMETA = struct_XrEventDataVirtualKeyboardCommitTextMETA;
pub const struct_XrEventDataVirtualKeyboardBackspaceMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    keyboard: XrVirtualKeyboardMETA = @import("std").mem.zeroes(XrVirtualKeyboardMETA),
};
pub const XrEventDataVirtualKeyboardBackspaceMETA = struct_XrEventDataVirtualKeyboardBackspaceMETA;
pub const struct_XrEventDataVirtualKeyboardEnterMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    keyboard: XrVirtualKeyboardMETA = @import("std").mem.zeroes(XrVirtualKeyboardMETA),
};
pub const XrEventDataVirtualKeyboardEnterMETA = struct_XrEventDataVirtualKeyboardEnterMETA;
pub const struct_XrEventDataVirtualKeyboardShownMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    keyboard: XrVirtualKeyboardMETA = @import("std").mem.zeroes(XrVirtualKeyboardMETA),
};
pub const XrEventDataVirtualKeyboardShownMETA = struct_XrEventDataVirtualKeyboardShownMETA;
pub const struct_XrEventDataVirtualKeyboardHiddenMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    keyboard: XrVirtualKeyboardMETA = @import("std").mem.zeroes(XrVirtualKeyboardMETA),
};
pub const XrEventDataVirtualKeyboardHiddenMETA = struct_XrEventDataVirtualKeyboardHiddenMETA;
pub const PFN_xrCreateVirtualKeyboardMETA = ?*const fn (XrSession, [*c]const XrVirtualKeyboardCreateInfoMETA, [*c]XrVirtualKeyboardMETA) callconv(.c) XrResult;
pub const PFN_xrDestroyVirtualKeyboardMETA = ?*const fn (XrVirtualKeyboardMETA) callconv(.c) XrResult;
pub const PFN_xrCreateVirtualKeyboardSpaceMETA = ?*const fn (XrSession, XrVirtualKeyboardMETA, [*c]const XrVirtualKeyboardSpaceCreateInfoMETA, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrSuggestVirtualKeyboardLocationMETA = ?*const fn (XrVirtualKeyboardMETA, [*c]const XrVirtualKeyboardLocationInfoMETA) callconv(.c) XrResult;
pub const PFN_xrGetVirtualKeyboardScaleMETA = ?*const fn (XrVirtualKeyboardMETA, [*c]f32) callconv(.c) XrResult;
pub const PFN_xrSetVirtualKeyboardModelVisibilityMETA = ?*const fn (XrVirtualKeyboardMETA, [*c]const XrVirtualKeyboardModelVisibilitySetInfoMETA) callconv(.c) XrResult;
pub const PFN_xrGetVirtualKeyboardModelAnimationStatesMETA = ?*const fn (XrVirtualKeyboardMETA, [*c]XrVirtualKeyboardModelAnimationStatesMETA) callconv(.c) XrResult;
pub const PFN_xrGetVirtualKeyboardDirtyTexturesMETA = ?*const fn (XrVirtualKeyboardMETA, u32, [*c]u32, [*c]u64) callconv(.c) XrResult;
pub const PFN_xrGetVirtualKeyboardTextureDataMETA = ?*const fn (XrVirtualKeyboardMETA, u64, [*c]XrVirtualKeyboardTextureDataMETA) callconv(.c) XrResult;
pub const PFN_xrSendVirtualKeyboardInputMETA = ?*const fn (XrVirtualKeyboardMETA, [*c]const XrVirtualKeyboardInputInfoMETA, [*c]XrPosef) callconv(.c) XrResult;
pub const PFN_xrChangeVirtualKeyboardTextContextMETA = ?*const fn (XrVirtualKeyboardMETA, [*c]const XrVirtualKeyboardTextContextChangeInfoMETA) callconv(.c) XrResult;
pub const XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_NONE_OCULUS: c_int = 0;
pub const XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_HMD_OCULUS: c_int = 1;
pub const XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_LTOUCH_OCULUS: c_int = 2;
pub const XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_RTOUCH_OCULUS: c_int = 3;
pub const XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_MAX_ENUM_OCULUS: c_int = 2147483647;
pub const enum_XrExternalCameraAttachedToDeviceOCULUS = c_uint;
pub const XrExternalCameraAttachedToDeviceOCULUS = enum_XrExternalCameraAttachedToDeviceOCULUS;
pub const XrExternalCameraStatusFlagsOCULUS = XrFlags64;
pub const XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 1;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 2;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 4;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 8;
pub const XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 16;
pub const struct_XrExternalCameraIntrinsicsOCULUS = extern struct {
    lastChangeTime: XrTime = @import("std").mem.zeroes(XrTime),
    fov: XrFovf = @import("std").mem.zeroes(XrFovf),
    virtualNearPlaneDistance: f32 = @import("std").mem.zeroes(f32),
    virtualFarPlaneDistance: f32 = @import("std").mem.zeroes(f32),
    imageSensorPixelResolution: XrExtent2Di = @import("std").mem.zeroes(XrExtent2Di),
};
pub const XrExternalCameraIntrinsicsOCULUS = struct_XrExternalCameraIntrinsicsOCULUS;
pub const struct_XrExternalCameraExtrinsicsOCULUS = extern struct {
    lastChangeTime: XrTime = @import("std").mem.zeroes(XrTime),
    cameraStatusFlags: XrExternalCameraStatusFlagsOCULUS = @import("std").mem.zeroes(XrExternalCameraStatusFlagsOCULUS),
    attachedToDevice: XrExternalCameraAttachedToDeviceOCULUS = @import("std").mem.zeroes(XrExternalCameraAttachedToDeviceOCULUS),
    relativePose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrExternalCameraExtrinsicsOCULUS = struct_XrExternalCameraExtrinsicsOCULUS;
pub const struct_XrExternalCameraOCULUS = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    name: [32]u8 = @import("std").mem.zeroes([32]u8),
    intrinsics: XrExternalCameraIntrinsicsOCULUS = @import("std").mem.zeroes(XrExternalCameraIntrinsicsOCULUS),
    extrinsics: XrExternalCameraExtrinsicsOCULUS = @import("std").mem.zeroes(XrExternalCameraExtrinsicsOCULUS),
};
pub const XrExternalCameraOCULUS = struct_XrExternalCameraOCULUS;
pub const PFN_xrEnumerateExternalCamerasOCULUS = ?*const fn (XrSession, u32, [*c]u32, [*c]XrExternalCameraOCULUS) callconv(.c) XrResult;
pub const XR_PERFORMANCE_METRICS_COUNTER_UNIT_GENERIC_META: c_int = 0;
pub const XR_PERFORMANCE_METRICS_COUNTER_UNIT_PERCENTAGE_META: c_int = 1;
pub const XR_PERFORMANCE_METRICS_COUNTER_UNIT_MILLISECONDS_META: c_int = 2;
pub const XR_PERFORMANCE_METRICS_COUNTER_UNIT_BYTES_META: c_int = 3;
pub const XR_PERFORMANCE_METRICS_COUNTER_UNIT_HERTZ_META: c_int = 4;
pub const XR_PERFORMANCE_METRICS_COUNTER_UNIT_MAX_ENUM_META: c_int = 2147483647;
pub const enum_XrPerformanceMetricsCounterUnitMETA = c_uint;
pub const XrPerformanceMetricsCounterUnitMETA = enum_XrPerformanceMetricsCounterUnitMETA;
pub const XrPerformanceMetricsCounterFlagsMETA = XrFlags64;
pub const XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META: XrPerformanceMetricsCounterFlagsMETA = 1;
pub const XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META: XrPerformanceMetricsCounterFlagsMETA = 2;
pub const XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META: XrPerformanceMetricsCounterFlagsMETA = 4;
pub const struct_XrPerformanceMetricsStateMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrPerformanceMetricsStateMETA = struct_XrPerformanceMetricsStateMETA;
pub const struct_XrPerformanceMetricsCounterMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    counterFlags: XrPerformanceMetricsCounterFlagsMETA = @import("std").mem.zeroes(XrPerformanceMetricsCounterFlagsMETA),
    counterUnit: XrPerformanceMetricsCounterUnitMETA = @import("std").mem.zeroes(XrPerformanceMetricsCounterUnitMETA),
    uintValue: u32 = @import("std").mem.zeroes(u32),
    floatValue: f32 = @import("std").mem.zeroes(f32),
};
pub const XrPerformanceMetricsCounterMETA = struct_XrPerformanceMetricsCounterMETA;
pub const PFN_xrEnumeratePerformanceMetricsCounterPathsMETA = ?*const fn (XrInstance, u32, [*c]u32, [*c]XrPath) callconv(.c) XrResult;
pub const PFN_xrSetPerformanceMetricsStateMETA = ?*const fn (XrSession, [*c]const XrPerformanceMetricsStateMETA) callconv(.c) XrResult;
pub const PFN_xrGetPerformanceMetricsStateMETA = ?*const fn (XrSession, [*c]XrPerformanceMetricsStateMETA) callconv(.c) XrResult;
pub const PFN_xrQueryPerformanceMetricsCounterMETA = ?*const fn (XrSession, XrPath, [*c]XrPerformanceMetricsCounterMETA) callconv(.c) XrResult;
pub const struct_XrSpaceListSaveInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    spaceCount: u32 = @import("std").mem.zeroes(u32),
    spaces: [*c]XrSpace = @import("std").mem.zeroes([*c]XrSpace),
    location: XrSpaceStorageLocationFB = @import("std").mem.zeroes(XrSpaceStorageLocationFB),
};
pub const XrSpaceListSaveInfoFB = struct_XrSpaceListSaveInfoFB;
pub const struct_XrEventDataSpaceListSaveCompleteFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataSpaceListSaveCompleteFB = struct_XrEventDataSpaceListSaveCompleteFB;
pub const PFN_xrSaveSpaceListFB = ?*const fn (XrSession, [*c]const XrSpaceListSaveInfoFB, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const XrSpaceUserIdFB = u64;
pub const struct_XrSpaceUserCreateInfoFB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    userId: XrSpaceUserIdFB = @import("std").mem.zeroes(XrSpaceUserIdFB),
};
pub const XrSpaceUserCreateInfoFB = struct_XrSpaceUserCreateInfoFB;
pub const PFN_xrCreateSpaceUserFB = ?*const fn (XrSession, [*c]const XrSpaceUserCreateInfoFB, [*c]XrSpaceUserFB) callconv(.c) XrResult;
pub const PFN_xrGetSpaceUserIdFB = ?*const fn (XrSpaceUserFB, [*c]XrSpaceUserIdFB) callconv(.c) XrResult;
pub const PFN_xrDestroySpaceUserFB = ?*const fn (XrSpaceUserFB) callconv(.c) XrResult;
pub const struct_XrSystemHeadsetIdPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    id: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
};
pub const XrSystemHeadsetIdPropertiesMETA = struct_XrSystemHeadsetIdPropertiesMETA;
pub const struct_XrRecommendedLayerResolutionMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    recommendedImageDimensions: XrExtent2Di = @import("std").mem.zeroes(XrExtent2Di),
    isValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrRecommendedLayerResolutionMETA = struct_XrRecommendedLayerResolutionMETA;
pub const struct_XrRecommendedLayerResolutionGetInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layer: [*c]const XrCompositionLayerBaseHeader = @import("std").mem.zeroes([*c]const XrCompositionLayerBaseHeader),
    predictedDisplayTime: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrRecommendedLayerResolutionGetInfoMETA = struct_XrRecommendedLayerResolutionGetInfoMETA;
pub const PFN_xrGetRecommendedLayerResolutionMETA = ?*const fn (XrSession, [*c]const XrRecommendedLayerResolutionGetInfoMETA, [*c]XrRecommendedLayerResolutionMETA) callconv(.c) XrResult;
pub const struct_XrPassthroughColorLutMETA_T = opaque {};
pub const XrPassthroughColorLutMETA = ?*struct_XrPassthroughColorLutMETA_T;
pub const XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGB_META: c_int = 1;
pub const XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGBA_META: c_int = 2;
pub const XR_PASSTHROUGH_COLOR_LUT_CHANNELS_MAX_ENUM_META: c_int = 2147483647;
pub const enum_XrPassthroughColorLutChannelsMETA = c_uint;
pub const XrPassthroughColorLutChannelsMETA = enum_XrPassthroughColorLutChannelsMETA;
pub const struct_XrPassthroughColorLutDataMETA = extern struct {
    bufferSize: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const XrPassthroughColorLutDataMETA = struct_XrPassthroughColorLutDataMETA;
pub const struct_XrPassthroughColorLutCreateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    channels: XrPassthroughColorLutChannelsMETA = @import("std").mem.zeroes(XrPassthroughColorLutChannelsMETA),
    resolution: u32 = @import("std").mem.zeroes(u32),
    data: XrPassthroughColorLutDataMETA = @import("std").mem.zeroes(XrPassthroughColorLutDataMETA),
};
pub const XrPassthroughColorLutCreateInfoMETA = struct_XrPassthroughColorLutCreateInfoMETA;
pub const struct_XrPassthroughColorLutUpdateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    data: XrPassthroughColorLutDataMETA = @import("std").mem.zeroes(XrPassthroughColorLutDataMETA),
};
pub const XrPassthroughColorLutUpdateInfoMETA = struct_XrPassthroughColorLutUpdateInfoMETA;
pub const struct_XrPassthroughColorMapLutMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorLut: XrPassthroughColorLutMETA = @import("std").mem.zeroes(XrPassthroughColorLutMETA),
    weight: f32 = @import("std").mem.zeroes(f32),
};
pub const XrPassthroughColorMapLutMETA = struct_XrPassthroughColorMapLutMETA;
pub const struct_XrPassthroughColorMapInterpolatedLutMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sourceColorLut: XrPassthroughColorLutMETA = @import("std").mem.zeroes(XrPassthroughColorLutMETA),
    targetColorLut: XrPassthroughColorLutMETA = @import("std").mem.zeroes(XrPassthroughColorLutMETA),
    weight: f32 = @import("std").mem.zeroes(f32),
};
pub const XrPassthroughColorMapInterpolatedLutMETA = struct_XrPassthroughColorMapInterpolatedLutMETA;
pub const struct_XrSystemPassthroughColorLutPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxColorLutResolution: u32 = @import("std").mem.zeroes(u32),
};
pub const XrSystemPassthroughColorLutPropertiesMETA = struct_XrSystemPassthroughColorLutPropertiesMETA;
pub const PFN_xrCreatePassthroughColorLutMETA = ?*const fn (XrPassthroughFB, [*c]const XrPassthroughColorLutCreateInfoMETA, [*c]XrPassthroughColorLutMETA) callconv(.c) XrResult;
pub const PFN_xrDestroyPassthroughColorLutMETA = ?*const fn (XrPassthroughColorLutMETA) callconv(.c) XrResult;
pub const PFN_xrUpdatePassthroughColorLutMETA = ?*const fn (XrPassthroughColorLutMETA, [*c]const XrPassthroughColorLutUpdateInfoMETA) callconv(.c) XrResult;
pub const struct_XrSpaceTriangleMeshGetInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrSpaceTriangleMeshGetInfoMETA = struct_XrSpaceTriangleMeshGetInfoMETA;
pub const struct_XrSpaceTriangleMeshMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]XrVector3f = @import("std").mem.zeroes([*c]XrVector3f),
    indexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    indexCountOutput: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]u32 = @import("std").mem.zeroes([*c]u32),
};
pub const XrSpaceTriangleMeshMETA = struct_XrSpaceTriangleMeshMETA;
pub const PFN_xrGetSpaceTriangleMeshMETA = ?*const fn (XrSpace, [*c]const XrSpaceTriangleMeshGetInfoMETA, [*c]XrSpaceTriangleMeshMETA) callconv(.c) XrResult;
pub const struct_XrEventDataPassthroughLayerResumedMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layer: XrPassthroughLayerFB = @import("std").mem.zeroes(XrPassthroughLayerFB),
};
pub const XrEventDataPassthroughLayerResumedMETA = struct_XrEventDataPassthroughLayerResumedMETA;
pub const struct_XrFaceTracker2FB_T = opaque {};
pub const XrFaceTracker2FB = ?*struct_XrFaceTracker2FB_T;
pub const XR_FACE_EXPRESSION2_BROW_LOWERER_L_FB: c_int = 0;
pub const XR_FACE_EXPRESSION2_BROW_LOWERER_R_FB: c_int = 1;
pub const XR_FACE_EXPRESSION2_CHEEK_PUFF_L_FB: c_int = 2;
pub const XR_FACE_EXPRESSION2_CHEEK_PUFF_R_FB: c_int = 3;
pub const XR_FACE_EXPRESSION2_CHEEK_RAISER_L_FB: c_int = 4;
pub const XR_FACE_EXPRESSION2_CHEEK_RAISER_R_FB: c_int = 5;
pub const XR_FACE_EXPRESSION2_CHEEK_SUCK_L_FB: c_int = 6;
pub const XR_FACE_EXPRESSION2_CHEEK_SUCK_R_FB: c_int = 7;
pub const XR_FACE_EXPRESSION2_CHIN_RAISER_B_FB: c_int = 8;
pub const XR_FACE_EXPRESSION2_CHIN_RAISER_T_FB: c_int = 9;
pub const XR_FACE_EXPRESSION2_DIMPLER_L_FB: c_int = 10;
pub const XR_FACE_EXPRESSION2_DIMPLER_R_FB: c_int = 11;
pub const XR_FACE_EXPRESSION2_EYES_CLOSED_L_FB: c_int = 12;
pub const XR_FACE_EXPRESSION2_EYES_CLOSED_R_FB: c_int = 13;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_L_FB: c_int = 14;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_R_FB: c_int = 15;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_L_FB: c_int = 16;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_R_FB: c_int = 17;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_L_FB: c_int = 18;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_R_FB: c_int = 19;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_UP_L_FB: c_int = 20;
pub const XR_FACE_EXPRESSION2_EYES_LOOK_UP_R_FB: c_int = 21;
pub const XR_FACE_EXPRESSION2_INNER_BROW_RAISER_L_FB: c_int = 22;
pub const XR_FACE_EXPRESSION2_INNER_BROW_RAISER_R_FB: c_int = 23;
pub const XR_FACE_EXPRESSION2_JAW_DROP_FB: c_int = 24;
pub const XR_FACE_EXPRESSION2_JAW_SIDEWAYS_LEFT_FB: c_int = 25;
pub const XR_FACE_EXPRESSION2_JAW_SIDEWAYS_RIGHT_FB: c_int = 26;
pub const XR_FACE_EXPRESSION2_JAW_THRUST_FB: c_int = 27;
pub const XR_FACE_EXPRESSION2_LID_TIGHTENER_L_FB: c_int = 28;
pub const XR_FACE_EXPRESSION2_LID_TIGHTENER_R_FB: c_int = 29;
pub const XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_L_FB: c_int = 30;
pub const XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_R_FB: c_int = 31;
pub const XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_L_FB: c_int = 32;
pub const XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_R_FB: c_int = 33;
pub const XR_FACE_EXPRESSION2_LIP_FUNNELER_LB_FB: c_int = 34;
pub const XR_FACE_EXPRESSION2_LIP_FUNNELER_LT_FB: c_int = 35;
pub const XR_FACE_EXPRESSION2_LIP_FUNNELER_RB_FB: c_int = 36;
pub const XR_FACE_EXPRESSION2_LIP_FUNNELER_RT_FB: c_int = 37;
pub const XR_FACE_EXPRESSION2_LIP_PRESSOR_L_FB: c_int = 38;
pub const XR_FACE_EXPRESSION2_LIP_PRESSOR_R_FB: c_int = 39;
pub const XR_FACE_EXPRESSION2_LIP_PUCKER_L_FB: c_int = 40;
pub const XR_FACE_EXPRESSION2_LIP_PUCKER_R_FB: c_int = 41;
pub const XR_FACE_EXPRESSION2_LIP_STRETCHER_L_FB: c_int = 42;
pub const XR_FACE_EXPRESSION2_LIP_STRETCHER_R_FB: c_int = 43;
pub const XR_FACE_EXPRESSION2_LIP_SUCK_LB_FB: c_int = 44;
pub const XR_FACE_EXPRESSION2_LIP_SUCK_LT_FB: c_int = 45;
pub const XR_FACE_EXPRESSION2_LIP_SUCK_RB_FB: c_int = 46;
pub const XR_FACE_EXPRESSION2_LIP_SUCK_RT_FB: c_int = 47;
pub const XR_FACE_EXPRESSION2_LIP_TIGHTENER_L_FB: c_int = 48;
pub const XR_FACE_EXPRESSION2_LIP_TIGHTENER_R_FB: c_int = 49;
pub const XR_FACE_EXPRESSION2_LIPS_TOWARD_FB: c_int = 50;
pub const XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_L_FB: c_int = 51;
pub const XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_R_FB: c_int = 52;
pub const XR_FACE_EXPRESSION2_MOUTH_LEFT_FB: c_int = 53;
pub const XR_FACE_EXPRESSION2_MOUTH_RIGHT_FB: c_int = 54;
pub const XR_FACE_EXPRESSION2_NOSE_WRINKLER_L_FB: c_int = 55;
pub const XR_FACE_EXPRESSION2_NOSE_WRINKLER_R_FB: c_int = 56;
pub const XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_L_FB: c_int = 57;
pub const XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_R_FB: c_int = 58;
pub const XR_FACE_EXPRESSION2_UPPER_LID_RAISER_L_FB: c_int = 59;
pub const XR_FACE_EXPRESSION2_UPPER_LID_RAISER_R_FB: c_int = 60;
pub const XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_L_FB: c_int = 61;
pub const XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_R_FB: c_int = 62;
pub const XR_FACE_EXPRESSION2_TONGUE_TIP_INTERDENTAL_FB: c_int = 63;
pub const XR_FACE_EXPRESSION2_TONGUE_TIP_ALVEOLAR_FB: c_int = 64;
pub const XR_FACE_EXPRESSION2_TONGUE_FRONT_DORSAL_PALATE_FB: c_int = 65;
pub const XR_FACE_EXPRESSION2_TONGUE_MID_DORSAL_PALATE_FB: c_int = 66;
pub const XR_FACE_EXPRESSION2_TONGUE_BACK_DORSAL_VELAR_FB: c_int = 67;
pub const XR_FACE_EXPRESSION2_TONGUE_OUT_FB: c_int = 68;
pub const XR_FACE_EXPRESSION2_TONGUE_RETREAT_FB: c_int = 69;
pub const XR_FACE_EXPRESSION2_COUNT_FB: c_int = 70;
pub const XR_FACE_EXPRESSION_2FB_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceExpression2FB = c_uint;
pub const XrFaceExpression2FB = enum_XrFaceExpression2FB;
pub const XR_FACE_EXPRESSION_SET2_DEFAULT_FB: c_int = 0;
pub const XR_FACE_EXPRESSION_SET_2FB_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceExpressionSet2FB = c_uint;
pub const XrFaceExpressionSet2FB = enum_XrFaceExpressionSet2FB;
pub const XR_FACE_TRACKING_DATA_SOURCE2_VISUAL_FB: c_int = 0;
pub const XR_FACE_TRACKING_DATA_SOURCE2_AUDIO_FB: c_int = 1;
pub const XR_FACE_TRACKING_DATA_SOURCE_2FB_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceTrackingDataSource2FB = c_uint;
pub const XrFaceTrackingDataSource2FB = enum_XrFaceTrackingDataSource2FB;
pub const XR_FACE_CONFIDENCE2_LOWER_FACE_FB: c_int = 0;
pub const XR_FACE_CONFIDENCE2_UPPER_FACE_FB: c_int = 1;
pub const XR_FACE_CONFIDENCE2_COUNT_FB: c_int = 2;
pub const XR_FACE_CONFIDENCE_2FB_MAX_ENUM_FB: c_int = 2147483647;
pub const enum_XrFaceConfidence2FB = c_uint;
pub const XrFaceConfidence2FB = enum_XrFaceConfidence2FB;
pub const struct_XrSystemFaceTrackingProperties2FB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsVisualFaceTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
    supportsAudioFaceTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemFaceTrackingProperties2FB = struct_XrSystemFaceTrackingProperties2FB;
pub const struct_XrFaceTrackerCreateInfo2FB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    faceExpressionSet: XrFaceExpressionSet2FB = @import("std").mem.zeroes(XrFaceExpressionSet2FB),
    requestedDataSourceCount: u32 = @import("std").mem.zeroes(u32),
    requestedDataSources: [*c]XrFaceTrackingDataSource2FB = @import("std").mem.zeroes([*c]XrFaceTrackingDataSource2FB),
};
pub const XrFaceTrackerCreateInfo2FB = struct_XrFaceTrackerCreateInfo2FB;
pub const struct_XrFaceExpressionInfo2FB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrFaceExpressionInfo2FB = struct_XrFaceExpressionInfo2FB;
pub const struct_XrFaceExpressionWeights2FB = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    weightCount: u32 = @import("std").mem.zeroes(u32),
    weights: [*c]f32 = @import("std").mem.zeroes([*c]f32),
    confidenceCount: u32 = @import("std").mem.zeroes(u32),
    confidences: [*c]f32 = @import("std").mem.zeroes([*c]f32),
    isValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
    isEyeFollowingBlendshapesValid: XrBool32 = @import("std").mem.zeroes(XrBool32),
    dataSource: XrFaceTrackingDataSource2FB = @import("std").mem.zeroes(XrFaceTrackingDataSource2FB),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrFaceExpressionWeights2FB = struct_XrFaceExpressionWeights2FB;
pub const PFN_xrCreateFaceTracker2FB = ?*const fn (XrSession, [*c]const XrFaceTrackerCreateInfo2FB, [*c]XrFaceTracker2FB) callconv(.c) XrResult;
pub const PFN_xrDestroyFaceTracker2FB = ?*const fn (XrFaceTracker2FB) callconv(.c) XrResult;
pub const PFN_xrGetFaceExpressionWeights2FB = ?*const fn (XrFaceTracker2FB, [*c]const XrFaceExpressionInfo2FB, [*c]XrFaceExpressionWeights2FB) callconv(.c) XrResult;
pub const struct_XrSystemSpatialEntitySharingPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsSpatialEntitySharing: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemSpatialEntitySharingPropertiesMETA = struct_XrSystemSpatialEntitySharingPropertiesMETA;
pub const struct_XrShareSpacesRecipientBaseHeaderMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrShareSpacesRecipientBaseHeaderMETA = struct_XrShareSpacesRecipientBaseHeaderMETA;
pub const struct_XrShareSpacesInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    spaceCount: u32 = @import("std").mem.zeroes(u32),
    spaces: [*c]XrSpace = @import("std").mem.zeroes([*c]XrSpace),
    recipientInfo: [*c]const XrShareSpacesRecipientBaseHeaderMETA = @import("std").mem.zeroes([*c]const XrShareSpacesRecipientBaseHeaderMETA),
};
pub const XrShareSpacesInfoMETA = struct_XrShareSpacesInfoMETA;
pub const struct_XrEventDataShareSpacesCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataShareSpacesCompleteMETA = struct_XrEventDataShareSpacesCompleteMETA;
pub const PFN_xrShareSpacesMETA = ?*const fn (XrSession, [*c]const XrShareSpacesInfoMETA, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const struct_XrEnvironmentDepthProviderMETA_T = opaque {};
pub const XrEnvironmentDepthProviderMETA = ?*struct_XrEnvironmentDepthProviderMETA_T;
pub const struct_XrEnvironmentDepthSwapchainMETA_T = opaque {};
pub const XrEnvironmentDepthSwapchainMETA = ?*struct_XrEnvironmentDepthSwapchainMETA_T;
pub const XrEnvironmentDepthProviderCreateFlagsMETA = XrFlags64;
pub const XrEnvironmentDepthSwapchainCreateFlagsMETA = XrFlags64;
pub const struct_XrEnvironmentDepthProviderCreateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: XrEnvironmentDepthProviderCreateFlagsMETA = @import("std").mem.zeroes(XrEnvironmentDepthProviderCreateFlagsMETA),
};
pub const XrEnvironmentDepthProviderCreateInfoMETA = struct_XrEnvironmentDepthProviderCreateInfoMETA;
pub const struct_XrEnvironmentDepthSwapchainCreateInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: XrEnvironmentDepthSwapchainCreateFlagsMETA = @import("std").mem.zeroes(XrEnvironmentDepthSwapchainCreateFlagsMETA),
};
pub const XrEnvironmentDepthSwapchainCreateInfoMETA = struct_XrEnvironmentDepthSwapchainCreateInfoMETA;
pub const struct_XrEnvironmentDepthSwapchainStateMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
};
pub const XrEnvironmentDepthSwapchainStateMETA = struct_XrEnvironmentDepthSwapchainStateMETA;
pub const struct_XrEnvironmentDepthImageAcquireInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    displayTime: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEnvironmentDepthImageAcquireInfoMETA = struct_XrEnvironmentDepthImageAcquireInfoMETA;
pub const struct_XrEnvironmentDepthImageViewMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fov: XrFovf = @import("std").mem.zeroes(XrFovf),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrEnvironmentDepthImageViewMETA = struct_XrEnvironmentDepthImageViewMETA;
pub const struct_XrEnvironmentDepthImageMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainIndex: u32 = @import("std").mem.zeroes(u32),
    nearZ: f32 = @import("std").mem.zeroes(f32),
    farZ: f32 = @import("std").mem.zeroes(f32),
    views: [2]XrEnvironmentDepthImageViewMETA = @import("std").mem.zeroes([2]XrEnvironmentDepthImageViewMETA),
};
pub const XrEnvironmentDepthImageMETA = struct_XrEnvironmentDepthImageMETA;
pub const struct_XrEnvironmentDepthHandRemovalSetInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrEnvironmentDepthHandRemovalSetInfoMETA = struct_XrEnvironmentDepthHandRemovalSetInfoMETA;
pub const struct_XrSystemEnvironmentDepthPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsEnvironmentDepth: XrBool32 = @import("std").mem.zeroes(XrBool32),
    supportsHandRemoval: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemEnvironmentDepthPropertiesMETA = struct_XrSystemEnvironmentDepthPropertiesMETA;
pub const PFN_xrCreateEnvironmentDepthProviderMETA = ?*const fn (XrSession, [*c]const XrEnvironmentDepthProviderCreateInfoMETA, [*c]XrEnvironmentDepthProviderMETA) callconv(.c) XrResult;
pub const PFN_xrDestroyEnvironmentDepthProviderMETA = ?*const fn (XrEnvironmentDepthProviderMETA) callconv(.c) XrResult;
pub const PFN_xrStartEnvironmentDepthProviderMETA = ?*const fn (XrEnvironmentDepthProviderMETA) callconv(.c) XrResult;
pub const PFN_xrStopEnvironmentDepthProviderMETA = ?*const fn (XrEnvironmentDepthProviderMETA) callconv(.c) XrResult;
pub const PFN_xrCreateEnvironmentDepthSwapchainMETA = ?*const fn (XrEnvironmentDepthProviderMETA, [*c]const XrEnvironmentDepthSwapchainCreateInfoMETA, [*c]XrEnvironmentDepthSwapchainMETA) callconv(.c) XrResult;
pub const PFN_xrDestroyEnvironmentDepthSwapchainMETA = ?*const fn (XrEnvironmentDepthSwapchainMETA) callconv(.c) XrResult;
pub const PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA = ?*const fn (XrEnvironmentDepthSwapchainMETA, u32, [*c]u32, [*c]XrSwapchainImageBaseHeader) callconv(.c) XrResult;
pub const PFN_xrGetEnvironmentDepthSwapchainStateMETA = ?*const fn (XrEnvironmentDepthSwapchainMETA, [*c]XrEnvironmentDepthSwapchainStateMETA) callconv(.c) XrResult;
pub const PFN_xrAcquireEnvironmentDepthImageMETA = ?*const fn (XrEnvironmentDepthProviderMETA, [*c]const XrEnvironmentDepthImageAcquireInfoMETA, [*c]XrEnvironmentDepthImageMETA) callconv(.c) XrResult;
pub const PFN_xrSetEnvironmentDepthHandRemovalMETA = ?*const fn (XrEnvironmentDepthProviderMETA, [*c]const XrEnvironmentDepthHandRemovalSetInfoMETA) callconv(.c) XrResult;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_ALL_QCOM: c_int = 1;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_XrTrackingOptimizationSettingsDomainQCOM = c_uint;
pub const XrTrackingOptimizationSettingsDomainQCOM = enum_XrTrackingOptimizationSettingsDomainQCOM;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_NONE_QCOM: c_int = 0;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LONG_RANGE_PRIORIZATION_QCOM: c_int = 1;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_CLOSE_RANGE_PRIORIZATION_QCOM: c_int = 2;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LOW_POWER_PRIORIZATION_QCOM: c_int = 3;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_HIGH_POWER_PRIORIZATION_QCOM: c_int = 4;
pub const XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_XrTrackingOptimizationSettingsHintQCOM = c_uint;
pub const XrTrackingOptimizationSettingsHintQCOM = enum_XrTrackingOptimizationSettingsHintQCOM;
pub const PFN_xrSetTrackingOptimizationSettingsHintQCOM = ?*const fn (XrSession, XrTrackingOptimizationSettingsDomainQCOM, XrTrackingOptimizationSettingsHintQCOM) callconv(.c) XrResult;
pub const struct_XrPassthroughHTC_T = opaque {};
pub const XrPassthroughHTC = ?*struct_XrPassthroughHTC_T;
pub const XR_PASSTHROUGH_FORM_PLANAR_HTC: c_int = 0;
pub const XR_PASSTHROUGH_FORM_PROJECTED_HTC: c_int = 1;
pub const XR_PASSTHROUGH_FORM_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrPassthroughFormHTC = c_uint;
pub const XrPassthroughFormHTC = enum_XrPassthroughFormHTC;
pub const struct_XrPassthroughCreateInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    form: XrPassthroughFormHTC = @import("std").mem.zeroes(XrPassthroughFormHTC),
};
pub const XrPassthroughCreateInfoHTC = struct_XrPassthroughCreateInfoHTC;
pub const struct_XrPassthroughColorHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    alpha: f32 = @import("std").mem.zeroes(f32),
};
pub const XrPassthroughColorHTC = struct_XrPassthroughColorHTC;
pub const struct_XrPassthroughMeshTransformInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]const XrVector3f = @import("std").mem.zeroes([*c]const XrVector3f),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    indices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    scale: XrVector3f = @import("std").mem.zeroes(XrVector3f),
};
pub const XrPassthroughMeshTransformInfoHTC = struct_XrPassthroughMeshTransformInfoHTC;
pub const struct_XrCompositionLayerPassthroughHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layerFlags: XrCompositionLayerFlags = @import("std").mem.zeroes(XrCompositionLayerFlags),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    passthrough: XrPassthroughHTC = @import("std").mem.zeroes(XrPassthroughHTC),
    color: XrPassthroughColorHTC = @import("std").mem.zeroes(XrPassthroughColorHTC),
};
pub const XrCompositionLayerPassthroughHTC = struct_XrCompositionLayerPassthroughHTC;
pub const PFN_xrCreatePassthroughHTC = ?*const fn (XrSession, [*c]const XrPassthroughCreateInfoHTC, [*c]XrPassthroughHTC) callconv(.c) XrResult;
pub const PFN_xrDestroyPassthroughHTC = ?*const fn (XrPassthroughHTC) callconv(.c) XrResult;
pub const XR_FOVEATION_MODE_DISABLE_HTC: c_int = 0;
pub const XR_FOVEATION_MODE_FIXED_HTC: c_int = 1;
pub const XR_FOVEATION_MODE_DYNAMIC_HTC: c_int = 2;
pub const XR_FOVEATION_MODE_CUSTOM_HTC: c_int = 3;
pub const XR_FOVEATION_MODE_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrFoveationModeHTC = c_uint;
pub const XrFoveationModeHTC = enum_XrFoveationModeHTC;
pub const XR_FOVEATION_LEVEL_NONE_HTC: c_int = 0;
pub const XR_FOVEATION_LEVEL_LOW_HTC: c_int = 1;
pub const XR_FOVEATION_LEVEL_MEDIUM_HTC: c_int = 2;
pub const XR_FOVEATION_LEVEL_HIGH_HTC: c_int = 3;
pub const XR_FOVEATION_LEVEL_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrFoveationLevelHTC = c_uint;
pub const XrFoveationLevelHTC = enum_XrFoveationLevelHTC;
pub const XrFoveationDynamicFlagsHTC = XrFlags64;
pub const XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 1;
pub const XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 2;
pub const XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 4;
pub const struct_XrFoveationApplyInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: XrFoveationModeHTC = @import("std").mem.zeroes(XrFoveationModeHTC),
    subImageCount: u32 = @import("std").mem.zeroes(u32),
    subImages: [*c]XrSwapchainSubImage = @import("std").mem.zeroes([*c]XrSwapchainSubImage),
};
pub const XrFoveationApplyInfoHTC = struct_XrFoveationApplyInfoHTC;
pub const struct_XrFoveationConfigurationHTC = extern struct {
    level: XrFoveationLevelHTC = @import("std").mem.zeroes(XrFoveationLevelHTC),
    clearFovDegree: f32 = @import("std").mem.zeroes(f32),
    focalCenterOffset: XrVector2f = @import("std").mem.zeroes(XrVector2f),
};
pub const XrFoveationConfigurationHTC = struct_XrFoveationConfigurationHTC;
pub const struct_XrFoveationDynamicModeInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dynamicFlags: XrFoveationDynamicFlagsHTC = @import("std").mem.zeroes(XrFoveationDynamicFlagsHTC),
};
pub const XrFoveationDynamicModeInfoHTC = struct_XrFoveationDynamicModeInfoHTC;
pub const struct_XrFoveationCustomModeInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    configCount: u32 = @import("std").mem.zeroes(u32),
    configs: [*c]const XrFoveationConfigurationHTC = @import("std").mem.zeroes([*c]const XrFoveationConfigurationHTC),
};
pub const XrFoveationCustomModeInfoHTC = struct_XrFoveationCustomModeInfoHTC;
pub const PFN_xrApplyFoveationHTC = ?*const fn (XrSession, [*c]const XrFoveationApplyInfoHTC) callconv(.c) XrResult;
pub const struct_XrSystemAnchorPropertiesHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsAnchor: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemAnchorPropertiesHTC = struct_XrSystemAnchorPropertiesHTC;
pub const struct_XrSpatialAnchorNameHTC = extern struct {
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const XrSpatialAnchorNameHTC = struct_XrSpatialAnchorNameHTC;
pub const struct_XrSpatialAnchorCreateInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    space: XrSpace = @import("std").mem.zeroes(XrSpace),
    poseInSpace: XrPosef = @import("std").mem.zeroes(XrPosef),
    name: XrSpatialAnchorNameHTC = @import("std").mem.zeroes(XrSpatialAnchorNameHTC),
};
pub const XrSpatialAnchorCreateInfoHTC = struct_XrSpatialAnchorCreateInfoHTC;
pub const PFN_xrCreateSpatialAnchorHTC = ?*const fn (XrSession, [*c]const XrSpatialAnchorCreateInfoHTC, [*c]XrSpace) callconv(.c) XrResult;
pub const PFN_xrGetSpatialAnchorNameHTC = ?*const fn (XrSpace, [*c]XrSpatialAnchorNameHTC) callconv(.c) XrResult;
pub const struct_XrBodyTrackerHTC_T = opaque {};
pub const XrBodyTrackerHTC = ?*struct_XrBodyTrackerHTC_T;
pub const XR_BODY_JOINT_PELVIS_HTC: c_int = 0;
pub const XR_BODY_JOINT_LEFT_HIP_HTC: c_int = 1;
pub const XR_BODY_JOINT_LEFT_KNEE_HTC: c_int = 2;
pub const XR_BODY_JOINT_LEFT_ANKLE_HTC: c_int = 3;
pub const XR_BODY_JOINT_LEFT_FEET_HTC: c_int = 4;
pub const XR_BODY_JOINT_RIGHT_HIP_HTC: c_int = 5;
pub const XR_BODY_JOINT_RIGHT_KNEE_HTC: c_int = 6;
pub const XR_BODY_JOINT_RIGHT_ANKLE_HTC: c_int = 7;
pub const XR_BODY_JOINT_RIGHT_FEET_HTC: c_int = 8;
pub const XR_BODY_JOINT_WAIST_HTC: c_int = 9;
pub const XR_BODY_JOINT_SPINE_LOWER_HTC: c_int = 10;
pub const XR_BODY_JOINT_SPINE_MIDDLE_HTC: c_int = 11;
pub const XR_BODY_JOINT_SPINE_HIGH_HTC: c_int = 12;
pub const XR_BODY_JOINT_CHEST_HTC: c_int = 13;
pub const XR_BODY_JOINT_NECK_HTC: c_int = 14;
pub const XR_BODY_JOINT_HEAD_HTC: c_int = 15;
pub const XR_BODY_JOINT_LEFT_CLAVICLE_HTC: c_int = 16;
pub const XR_BODY_JOINT_LEFT_SCAPULA_HTC: c_int = 17;
pub const XR_BODY_JOINT_LEFT_ARM_HTC: c_int = 18;
pub const XR_BODY_JOINT_LEFT_ELBOW_HTC: c_int = 19;
pub const XR_BODY_JOINT_LEFT_WRIST_HTC: c_int = 20;
pub const XR_BODY_JOINT_RIGHT_CLAVICLE_HTC: c_int = 21;
pub const XR_BODY_JOINT_RIGHT_SCAPULA_HTC: c_int = 22;
pub const XR_BODY_JOINT_RIGHT_ARM_HTC: c_int = 23;
pub const XR_BODY_JOINT_RIGHT_ELBOW_HTC: c_int = 24;
pub const XR_BODY_JOINT_RIGHT_WRIST_HTC: c_int = 25;
pub const XR_BODY_JOINT_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrBodyJointHTC = c_uint;
pub const XrBodyJointHTC = enum_XrBodyJointHTC;
pub const XR_BODY_JOINT_SET_FULL_HTC: c_int = 0;
pub const XR_BODY_JOINT_SET_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrBodyJointSetHTC = c_uint;
pub const XrBodyJointSetHTC = enum_XrBodyJointSetHTC;
pub const XR_BODY_JOINT_CONFIDENCE_NONE_HTC: c_int = 0;
pub const XR_BODY_JOINT_CONFIDENCE_LOW_HTC: c_int = 1;
pub const XR_BODY_JOINT_CONFIDENCE_HIGH_HTC: c_int = 2;
pub const XR_BODY_JOINT_CONFIDENCE_MAX_ENUM_HTC: c_int = 2147483647;
pub const enum_XrBodyJointConfidenceHTC = c_uint;
pub const XrBodyJointConfidenceHTC = enum_XrBodyJointConfidenceHTC;
pub const struct_XrSystemBodyTrackingPropertiesHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsBodyTracking: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemBodyTrackingPropertiesHTC = struct_XrSystemBodyTrackingPropertiesHTC;
pub const struct_XrBodyTrackerCreateInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bodyJointSet: XrBodyJointSetHTC = @import("std").mem.zeroes(XrBodyJointSetHTC),
};
pub const XrBodyTrackerCreateInfoHTC = struct_XrBodyTrackerCreateInfoHTC;
pub const struct_XrBodyJointsLocateInfoHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrBodyJointsLocateInfoHTC = struct_XrBodyJointsLocateInfoHTC;
pub const struct_XrBodyJointLocationHTC = extern struct {
    locationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrBodyJointLocationHTC = struct_XrBodyJointLocationHTC;
pub const struct_XrBodyJointLocationsHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedLocationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    confidenceLevel: XrBodyJointConfidenceHTC = @import("std").mem.zeroes(XrBodyJointConfidenceHTC),
    jointLocationCount: u32 = @import("std").mem.zeroes(u32),
    jointLocations: [*c]XrBodyJointLocationHTC = @import("std").mem.zeroes([*c]XrBodyJointLocationHTC),
    skeletonGenerationId: u32 = @import("std").mem.zeroes(u32),
};
pub const XrBodyJointLocationsHTC = struct_XrBodyJointLocationsHTC;
pub const struct_XrBodySkeletonJointHTC = extern struct {
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
};
pub const XrBodySkeletonJointHTC = struct_XrBodySkeletonJointHTC;
pub const struct_XrBodySkeletonHTC = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    jointCount: u32 = @import("std").mem.zeroes(u32),
    joints: [*c]XrBodySkeletonJointHTC = @import("std").mem.zeroes([*c]XrBodySkeletonJointHTC),
};
pub const XrBodySkeletonHTC = struct_XrBodySkeletonHTC;
pub const PFN_xrCreateBodyTrackerHTC = ?*const fn (XrSession, [*c]const XrBodyTrackerCreateInfoHTC, [*c]XrBodyTrackerHTC) callconv(.c) XrResult;
pub const PFN_xrDestroyBodyTrackerHTC = ?*const fn (XrBodyTrackerHTC) callconv(.c) XrResult;
pub const PFN_xrLocateBodyJointsHTC = ?*const fn (XrBodyTrackerHTC, [*c]const XrBodyJointsLocateInfoHTC, [*c]XrBodyJointLocationsHTC) callconv(.c) XrResult;
pub const PFN_xrGetBodySkeletonHTC = ?*const fn (XrBodyTrackerHTC, XrSpace, u32, [*c]XrBodySkeletonHTC) callconv(.c) XrResult;
pub const struct_XrActiveActionSetPriorityEXT = extern struct {
    actionSet: XrActionSet = @import("std").mem.zeroes(XrActionSet),
    priorityOverride: u32 = @import("std").mem.zeroes(u32),
};
pub const XrActiveActionSetPriorityEXT = struct_XrActiveActionSetPriorityEXT;
pub const struct_XrActiveActionSetPrioritiesEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    actionSetPriorityCount: u32 = @import("std").mem.zeroes(u32),
    actionSetPriorities: [*c]const XrActiveActionSetPriorityEXT = @import("std").mem.zeroes([*c]const XrActiveActionSetPriorityEXT),
};
pub const XrActiveActionSetPrioritiesEXT = struct_XrActiveActionSetPrioritiesEXT;
pub const XR_FORCE_FEEDBACK_CURL_LOCATION_THUMB_CURL_MNDX: c_int = 0;
pub const XR_FORCE_FEEDBACK_CURL_LOCATION_INDEX_CURL_MNDX: c_int = 1;
pub const XR_FORCE_FEEDBACK_CURL_LOCATION_MIDDLE_CURL_MNDX: c_int = 2;
pub const XR_FORCE_FEEDBACK_CURL_LOCATION_RING_CURL_MNDX: c_int = 3;
pub const XR_FORCE_FEEDBACK_CURL_LOCATION_LITTLE_CURL_MNDX: c_int = 4;
pub const XR_FORCE_FEEDBACK_CURL_LOCATION_MAX_ENUM_MNDX: c_int = 2147483647;
pub const enum_XrForceFeedbackCurlLocationMNDX = c_uint;
pub const XrForceFeedbackCurlLocationMNDX = enum_XrForceFeedbackCurlLocationMNDX;
pub const struct_XrSystemForceFeedbackCurlPropertiesMNDX = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsForceFeedbackCurl: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemForceFeedbackCurlPropertiesMNDX = struct_XrSystemForceFeedbackCurlPropertiesMNDX;
pub const struct_XrForceFeedbackCurlApplyLocationMNDX = extern struct {
    location: XrForceFeedbackCurlLocationMNDX = @import("std").mem.zeroes(XrForceFeedbackCurlLocationMNDX),
    value: f32 = @import("std").mem.zeroes(f32),
};
pub const XrForceFeedbackCurlApplyLocationMNDX = struct_XrForceFeedbackCurlApplyLocationMNDX;
pub const struct_XrForceFeedbackCurlApplyLocationsMNDX = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    locationCount: u32 = @import("std").mem.zeroes(u32),
    locations: [*c]XrForceFeedbackCurlApplyLocationMNDX = @import("std").mem.zeroes([*c]XrForceFeedbackCurlApplyLocationMNDX),
};
pub const XrForceFeedbackCurlApplyLocationsMNDX = struct_XrForceFeedbackCurlApplyLocationsMNDX;
pub const PFN_xrApplyForceFeedbackCurlMNDX = ?*const fn (XrHandTrackerEXT, [*c]const XrForceFeedbackCurlApplyLocationsMNDX) callconv(.c) XrResult;
pub const XR_HAND_TRACKING_DATA_SOURCE_UNOBSTRUCTED_EXT: c_int = 1;
pub const XR_HAND_TRACKING_DATA_SOURCE_CONTROLLER_EXT: c_int = 2;
pub const XR_HAND_TRACKING_DATA_SOURCE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrHandTrackingDataSourceEXT = c_uint;
pub const XrHandTrackingDataSourceEXT = enum_XrHandTrackingDataSourceEXT;
pub const struct_XrHandTrackingDataSourceInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestedDataSourceCount: u32 = @import("std").mem.zeroes(u32),
    requestedDataSources: [*c]XrHandTrackingDataSourceEXT = @import("std").mem.zeroes([*c]XrHandTrackingDataSourceEXT),
};
pub const XrHandTrackingDataSourceInfoEXT = struct_XrHandTrackingDataSourceInfoEXT;
pub const struct_XrHandTrackingDataSourceStateEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    isActive: XrBool32 = @import("std").mem.zeroes(XrBool32),
    dataSource: XrHandTrackingDataSourceEXT = @import("std").mem.zeroes(XrHandTrackingDataSourceEXT),
};
pub const XrHandTrackingDataSourceStateEXT = struct_XrHandTrackingDataSourceStateEXT;
pub const struct_XrPlaneDetectorEXT_T = opaque {};
pub const XrPlaneDetectorEXT = ?*struct_XrPlaneDetectorEXT_T;
pub const XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_UPWARD_EXT: c_int = 0;
pub const XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_DOWNWARD_EXT: c_int = 1;
pub const XR_PLANE_DETECTOR_ORIENTATION_VERTICAL_EXT: c_int = 2;
pub const XR_PLANE_DETECTOR_ORIENTATION_ARBITRARY_EXT: c_int = 3;
pub const XR_PLANE_DETECTOR_ORIENTATION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPlaneDetectorOrientationEXT = c_uint;
pub const XrPlaneDetectorOrientationEXT = enum_XrPlaneDetectorOrientationEXT;
pub const XR_PLANE_DETECTOR_SEMANTIC_TYPE_UNDEFINED_EXT: c_int = 0;
pub const XR_PLANE_DETECTOR_SEMANTIC_TYPE_CEILING_EXT: c_int = 1;
pub const XR_PLANE_DETECTOR_SEMANTIC_TYPE_FLOOR_EXT: c_int = 2;
pub const XR_PLANE_DETECTOR_SEMANTIC_TYPE_WALL_EXT: c_int = 3;
pub const XR_PLANE_DETECTOR_SEMANTIC_TYPE_PLATFORM_EXT: c_int = 4;
pub const XR_PLANE_DETECTOR_SEMANTIC_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPlaneDetectorSemanticTypeEXT = c_uint;
pub const XrPlaneDetectorSemanticTypeEXT = enum_XrPlaneDetectorSemanticTypeEXT;
pub const XR_PLANE_DETECTION_STATE_NONE_EXT: c_int = 0;
pub const XR_PLANE_DETECTION_STATE_PENDING_EXT: c_int = 1;
pub const XR_PLANE_DETECTION_STATE_DONE_EXT: c_int = 2;
pub const XR_PLANE_DETECTION_STATE_ERROR_EXT: c_int = 3;
pub const XR_PLANE_DETECTION_STATE_FATAL_EXT: c_int = 4;
pub const XR_PLANE_DETECTION_STATE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrPlaneDetectionStateEXT = c_uint;
pub const XrPlaneDetectionStateEXT = enum_XrPlaneDetectionStateEXT;
pub const XrPlaneDetectionCapabilityFlagsEXT = XrFlags64;
pub const XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 1;
pub const XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 2;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 4;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 8;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 16;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 32;
pub const XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 64;
pub const XrPlaneDetectorFlagsEXT = XrFlags64;
pub const XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT: XrPlaneDetectorFlagsEXT = 1;
pub const struct_XrSystemPlaneDetectionPropertiesEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedFeatures: XrPlaneDetectionCapabilityFlagsEXT = @import("std").mem.zeroes(XrPlaneDetectionCapabilityFlagsEXT),
};
pub const XrSystemPlaneDetectionPropertiesEXT = struct_XrSystemPlaneDetectionPropertiesEXT;
pub const struct_XrPlaneDetectorCreateInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrPlaneDetectorFlagsEXT = @import("std").mem.zeroes(XrPlaneDetectorFlagsEXT),
};
pub const XrPlaneDetectorCreateInfoEXT = struct_XrPlaneDetectorCreateInfoEXT;
pub const XrExtent3DfEXT = XrExtent3Df;
pub const struct_XrPlaneDetectorBeginInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    orientationCount: u32 = @import("std").mem.zeroes(u32),
    orientations: [*c]const XrPlaneDetectorOrientationEXT = @import("std").mem.zeroes([*c]const XrPlaneDetectorOrientationEXT),
    semanticTypeCount: u32 = @import("std").mem.zeroes(u32),
    semanticTypes: [*c]const XrPlaneDetectorSemanticTypeEXT = @import("std").mem.zeroes([*c]const XrPlaneDetectorSemanticTypeEXT),
    maxPlanes: u32 = @import("std").mem.zeroes(u32),
    minArea: f32 = @import("std").mem.zeroes(f32),
    boundingBoxPose: XrPosef = @import("std").mem.zeroes(XrPosef),
    boundingBoxExtent: XrExtent3DfEXT = @import("std").mem.zeroes(XrExtent3DfEXT),
};
pub const XrPlaneDetectorBeginInfoEXT = struct_XrPlaneDetectorBeginInfoEXT;
pub const struct_XrPlaneDetectorGetInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrPlaneDetectorGetInfoEXT = struct_XrPlaneDetectorGetInfoEXT;
pub const struct_XrPlaneDetectorLocationEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    planeId: u64 = @import("std").mem.zeroes(u64),
    locationFlags: XrSpaceLocationFlags = @import("std").mem.zeroes(XrSpaceLocationFlags),
    pose: XrPosef = @import("std").mem.zeroes(XrPosef),
    extents: XrExtent2Df = @import("std").mem.zeroes(XrExtent2Df),
    orientation: XrPlaneDetectorOrientationEXT = @import("std").mem.zeroes(XrPlaneDetectorOrientationEXT),
    semanticType: XrPlaneDetectorSemanticTypeEXT = @import("std").mem.zeroes(XrPlaneDetectorSemanticTypeEXT),
    polygonBufferCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrPlaneDetectorLocationEXT = struct_XrPlaneDetectorLocationEXT;
pub const struct_XrPlaneDetectorLocationsEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    planeLocationCapacityInput: u32 = @import("std").mem.zeroes(u32),
    planeLocationCountOutput: u32 = @import("std").mem.zeroes(u32),
    planeLocations: [*c]XrPlaneDetectorLocationEXT = @import("std").mem.zeroes([*c]XrPlaneDetectorLocationEXT),
};
pub const XrPlaneDetectorLocationsEXT = struct_XrPlaneDetectorLocationsEXT;
pub const struct_XrPlaneDetectorPolygonBufferEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexCapacityInput: u32 = @import("std").mem.zeroes(u32),
    vertexCountOutput: u32 = @import("std").mem.zeroes(u32),
    vertices: [*c]XrVector2f = @import("std").mem.zeroes([*c]XrVector2f),
};
pub const XrPlaneDetectorPolygonBufferEXT = struct_XrPlaneDetectorPolygonBufferEXT;
pub const PFN_xrCreatePlaneDetectorEXT = ?*const fn (XrSession, [*c]const XrPlaneDetectorCreateInfoEXT, [*c]XrPlaneDetectorEXT) callconv(.c) XrResult;
pub const PFN_xrDestroyPlaneDetectorEXT = ?*const fn (XrPlaneDetectorEXT) callconv(.c) XrResult;
pub const PFN_xrBeginPlaneDetectionEXT = ?*const fn (XrPlaneDetectorEXT, [*c]const XrPlaneDetectorBeginInfoEXT) callconv(.c) XrResult;
pub const PFN_xrGetPlaneDetectionStateEXT = ?*const fn (XrPlaneDetectorEXT, [*c]XrPlaneDetectionStateEXT) callconv(.c) XrResult;
pub const PFN_xrGetPlaneDetectionsEXT = ?*const fn (XrPlaneDetectorEXT, [*c]const XrPlaneDetectorGetInfoEXT, [*c]XrPlaneDetectorLocationsEXT) callconv(.c) XrResult;
pub const PFN_xrGetPlanePolygonBufferEXT = ?*const fn (XrPlaneDetectorEXT, u64, u32, [*c]XrPlaneDetectorPolygonBufferEXT) callconv(.c) XrResult;
pub const XR_FUTURE_STATE_PENDING_EXT: c_int = 1;
pub const XR_FUTURE_STATE_READY_EXT: c_int = 2;
pub const XR_FUTURE_STATE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_XrFutureStateEXT = c_uint;
pub const XrFutureStateEXT = enum_XrFutureStateEXT;
pub const struct_XrFutureCancelInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    future: XrFutureEXT = @import("std").mem.zeroes(XrFutureEXT),
};
pub const XrFutureCancelInfoEXT = struct_XrFutureCancelInfoEXT;
pub const struct_XrFuturePollInfoEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    future: XrFutureEXT = @import("std").mem.zeroes(XrFutureEXT),
};
pub const XrFuturePollInfoEXT = struct_XrFuturePollInfoEXT;
pub const struct_XrFutureCompletionBaseHeaderEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrFutureCompletionBaseHeaderEXT = struct_XrFutureCompletionBaseHeaderEXT;
pub const struct_XrFutureCompletionEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrFutureCompletionEXT = struct_XrFutureCompletionEXT;
pub const struct_XrFuturePollResultEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    state: XrFutureStateEXT = @import("std").mem.zeroes(XrFutureStateEXT),
};
pub const XrFuturePollResultEXT = struct_XrFuturePollResultEXT;
pub const PFN_xrPollFutureEXT = ?*const fn (XrInstance, [*c]const XrFuturePollInfoEXT, [*c]XrFuturePollResultEXT) callconv(.c) XrResult;
pub const PFN_xrCancelFutureEXT = ?*const fn (XrInstance, [*c]const XrFutureCancelInfoEXT) callconv(.c) XrResult;
pub const struct_XrEventDataUserPresenceChangedEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: XrSession = @import("std").mem.zeroes(XrSession),
    isUserPresent: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrEventDataUserPresenceChangedEXT = struct_XrEventDataUserPresenceChangedEXT;
pub const struct_XrSystemUserPresencePropertiesEXT = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsUserPresence: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemUserPresencePropertiesEXT = struct_XrSystemUserPresencePropertiesEXT;
pub const XR_HEADSET_FIT_STATUS_UNKNOWN_ML: c_int = 0;
pub const XR_HEADSET_FIT_STATUS_NOT_WORN_ML: c_int = 1;
pub const XR_HEADSET_FIT_STATUS_GOOD_FIT_ML: c_int = 2;
pub const XR_HEADSET_FIT_STATUS_BAD_FIT_ML: c_int = 3;
pub const XR_HEADSET_FIT_STATUS_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrHeadsetFitStatusML = c_uint;
pub const XrHeadsetFitStatusML = enum_XrHeadsetFitStatusML;
pub const XR_EYE_CALIBRATION_STATUS_UNKNOWN_ML: c_int = 0;
pub const XR_EYE_CALIBRATION_STATUS_NONE_ML: c_int = 1;
pub const XR_EYE_CALIBRATION_STATUS_COARSE_ML: c_int = 2;
pub const XR_EYE_CALIBRATION_STATUS_FINE_ML: c_int = 3;
pub const XR_EYE_CALIBRATION_STATUS_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrEyeCalibrationStatusML = c_uint;
pub const XrEyeCalibrationStatusML = enum_XrEyeCalibrationStatusML;
pub const struct_XrEventDataHeadsetFitChangedML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    status: XrHeadsetFitStatusML = @import("std").mem.zeroes(XrHeadsetFitStatusML),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrEventDataHeadsetFitChangedML = struct_XrEventDataHeadsetFitChangedML;
pub const struct_XrEventDataEyeCalibrationChangedML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    status: XrEyeCalibrationStatusML = @import("std").mem.zeroes(XrEyeCalibrationStatusML),
};
pub const XrEventDataEyeCalibrationChangedML = struct_XrEventDataEyeCalibrationChangedML;
pub const struct_XrUserCalibrationEnableEventsInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabled: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrUserCalibrationEnableEventsInfoML = struct_XrUserCalibrationEnableEventsInfoML;
pub const PFN_xrEnableUserCalibrationEventsML = ?*const fn (XrInstance, [*c]const XrUserCalibrationEnableEventsInfoML) callconv(.c) XrResult;
pub const struct_XrSystemNotificationsSetInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    suppressNotifications: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemNotificationsSetInfoML = struct_XrSystemNotificationsSetInfoML;
pub const PFN_xrSetSystemNotificationsML = ?*const fn (XrInstance, [*c]const XrSystemNotificationsSetInfoML) callconv(.c) XrResult;
pub const struct_XrWorldMeshDetectorML_T = opaque {};
pub const XrWorldMeshDetectorML = ?*struct_XrWorldMeshDetectorML_T;
pub const XR_WORLD_MESH_DETECTOR_LOD_MINIMUM_ML: c_int = 0;
pub const XR_WORLD_MESH_DETECTOR_LOD_MEDIUM_ML: c_int = 1;
pub const XR_WORLD_MESH_DETECTOR_LOD_MAXIMUM_ML: c_int = 2;
pub const XR_WORLD_MESH_DETECTOR_LOD_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrWorldMeshDetectorLodML = c_uint;
pub const XrWorldMeshDetectorLodML = enum_XrWorldMeshDetectorLodML;
pub const XR_WORLD_MESH_BLOCK_STATUS_NEW_ML: c_int = 0;
pub const XR_WORLD_MESH_BLOCK_STATUS_UPDATED_ML: c_int = 1;
pub const XR_WORLD_MESH_BLOCK_STATUS_DELETED_ML: c_int = 2;
pub const XR_WORLD_MESH_BLOCK_STATUS_UNCHANGED_ML: c_int = 3;
pub const XR_WORLD_MESH_BLOCK_STATUS_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrWorldMeshBlockStatusML = c_uint;
pub const XrWorldMeshBlockStatusML = enum_XrWorldMeshBlockStatusML;
pub const XR_WORLD_MESH_BLOCK_RESULT_SUCCESS_ML: c_int = 0;
pub const XR_WORLD_MESH_BLOCK_RESULT_FAILED_ML: c_int = 1;
pub const XR_WORLD_MESH_BLOCK_RESULT_PENDING_ML: c_int = 2;
pub const XR_WORLD_MESH_BLOCK_RESULT_PARTIAL_UPDATE_ML: c_int = 3;
pub const XR_WORLD_MESH_BLOCK_RESULT_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrWorldMeshBlockResultML = c_uint;
pub const XrWorldMeshBlockResultML = enum_XrWorldMeshBlockResultML;
pub const XrWorldMeshDetectorFlagsML = XrFlags64;
pub const XR_WORLD_MESH_DETECTOR_POINT_CLOUD_BIT_ML: XrWorldMeshDetectorFlagsML = 1;
pub const XR_WORLD_MESH_DETECTOR_COMPUTE_NORMALS_BIT_ML: XrWorldMeshDetectorFlagsML = 2;
pub const XR_WORLD_MESH_DETECTOR_COMPUTE_CONFIDENCE_BIT_ML: XrWorldMeshDetectorFlagsML = 4;
pub const XR_WORLD_MESH_DETECTOR_PLANARIZE_BIT_ML: XrWorldMeshDetectorFlagsML = 8;
pub const XR_WORLD_MESH_DETECTOR_REMOVE_MESH_SKIRT_BIT_ML: XrWorldMeshDetectorFlagsML = 16;
pub const XR_WORLD_MESH_DETECTOR_INDEX_ORDER_CW_BIT_ML: XrWorldMeshDetectorFlagsML = 32;
pub const struct_XrWorldMeshDetectorCreateInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrWorldMeshDetectorCreateInfoML = struct_XrWorldMeshDetectorCreateInfoML;
pub const struct_XrWorldMeshBlockStateML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    meshBoundingBoxCenter: XrPosef = @import("std").mem.zeroes(XrPosef),
    meshBoundingBoxExtents: XrExtent3DfEXT = @import("std").mem.zeroes(XrExtent3DfEXT),
    lastUpdateTime: XrTime = @import("std").mem.zeroes(XrTime),
    status: XrWorldMeshBlockStatusML = @import("std").mem.zeroes(XrWorldMeshBlockStatusML),
};
pub const XrWorldMeshBlockStateML = struct_XrWorldMeshBlockStateML;
pub const struct_XrWorldMeshStateRequestInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    baseSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    time: XrTime = @import("std").mem.zeroes(XrTime),
    boundingBoxCenter: XrPosef = @import("std").mem.zeroes(XrPosef),
    boundingBoxExtents: XrExtent3DfEXT = @import("std").mem.zeroes(XrExtent3DfEXT),
};
pub const XrWorldMeshStateRequestInfoML = struct_XrWorldMeshStateRequestInfoML;
pub const struct_XrWorldMeshStateRequestCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
    timestamp: XrTime = @import("std").mem.zeroes(XrTime),
    meshBlockStateCapacityInput: u32 = @import("std").mem.zeroes(u32),
    meshBlockStateCountOutput: u32 = @import("std").mem.zeroes(u32),
    meshBlockStates: [*c]XrWorldMeshBlockStateML = @import("std").mem.zeroes([*c]XrWorldMeshBlockStateML),
};
pub const XrWorldMeshStateRequestCompletionML = struct_XrWorldMeshStateRequestCompletionML;
pub const struct_XrWorldMeshBufferRecommendedSizeInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxBlockCount: u32 = @import("std").mem.zeroes(u32),
};
pub const XrWorldMeshBufferRecommendedSizeInfoML = struct_XrWorldMeshBufferRecommendedSizeInfoML;
pub const struct_XrWorldMeshBufferSizeML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: u32 = @import("std").mem.zeroes(u32),
};
pub const XrWorldMeshBufferSizeML = struct_XrWorldMeshBufferSizeML;
pub const struct_XrWorldMeshBufferML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferSize: u32 = @import("std").mem.zeroes(u32),
    buffer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const XrWorldMeshBufferML = struct_XrWorldMeshBufferML;
pub const struct_XrWorldMeshBlockRequestML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    lod: XrWorldMeshDetectorLodML = @import("std").mem.zeroes(XrWorldMeshDetectorLodML),
};
pub const XrWorldMeshBlockRequestML = struct_XrWorldMeshBlockRequestML;
pub const struct_XrWorldMeshGetInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: XrWorldMeshDetectorFlagsML = @import("std").mem.zeroes(XrWorldMeshDetectorFlagsML),
    fillHoleLength: f32 = @import("std").mem.zeroes(f32),
    disconnectedComponentArea: f32 = @import("std").mem.zeroes(f32),
    blockCount: u32 = @import("std").mem.zeroes(u32),
    blocks: [*c]XrWorldMeshBlockRequestML = @import("std").mem.zeroes([*c]XrWorldMeshBlockRequestML),
};
pub const XrWorldMeshGetInfoML = struct_XrWorldMeshGetInfoML;
pub const struct_XrWorldMeshBlockML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uuid: XrUuidEXT = @import("std").mem.zeroes(XrUuidEXT),
    blockResult: XrWorldMeshBlockResultML = @import("std").mem.zeroes(XrWorldMeshBlockResultML),
    lod: XrWorldMeshDetectorLodML = @import("std").mem.zeroes(XrWorldMeshDetectorLodML),
    flags: XrWorldMeshDetectorFlagsML = @import("std").mem.zeroes(XrWorldMeshDetectorFlagsML),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    indexBuffer: [*c]u16 = @import("std").mem.zeroes([*c]u16),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertexBuffer: [*c]XrVector3f = @import("std").mem.zeroes([*c]XrVector3f),
    normalCount: u32 = @import("std").mem.zeroes(u32),
    normalBuffer: [*c]XrVector3f = @import("std").mem.zeroes([*c]XrVector3f),
    confidenceCount: u32 = @import("std").mem.zeroes(u32),
    confidenceBuffer: [*c]f32 = @import("std").mem.zeroes([*c]f32),
};
pub const XrWorldMeshBlockML = struct_XrWorldMeshBlockML;
pub const struct_XrWorldMeshRequestCompletionInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    meshSpace: XrSpace = @import("std").mem.zeroes(XrSpace),
    meshSpaceLocateTime: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrWorldMeshRequestCompletionInfoML = struct_XrWorldMeshRequestCompletionInfoML;
pub const struct_XrWorldMeshRequestCompletionML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    futureResult: XrResult = @import("std").mem.zeroes(XrResult),
    blockCount: u32 = @import("std").mem.zeroes(u32),
    blocks: [*c]XrWorldMeshBlockML = @import("std").mem.zeroes([*c]XrWorldMeshBlockML),
};
pub const XrWorldMeshRequestCompletionML = struct_XrWorldMeshRequestCompletionML;
pub const PFN_xrCreateWorldMeshDetectorML = ?*const fn (XrSession, [*c]const XrWorldMeshDetectorCreateInfoML, [*c]XrWorldMeshDetectorML) callconv(.c) XrResult;
pub const PFN_xrDestroyWorldMeshDetectorML = ?*const fn (XrWorldMeshDetectorML) callconv(.c) XrResult;
pub const PFN_xrRequestWorldMeshStateAsyncML = ?*const fn (XrWorldMeshDetectorML, [*c]const XrWorldMeshStateRequestInfoML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrRequestWorldMeshStateCompleteML = ?*const fn (XrWorldMeshDetectorML, XrFutureEXT, [*c]XrWorldMeshStateRequestCompletionML) callconv(.c) XrResult;
pub const PFN_xrGetWorldMeshBufferRecommendSizeML = ?*const fn (XrWorldMeshDetectorML, [*c]const XrWorldMeshBufferRecommendedSizeInfoML, [*c]XrWorldMeshBufferSizeML) callconv(.c) XrResult;
pub const PFN_xrAllocateWorldMeshBufferML = ?*const fn (XrWorldMeshDetectorML, [*c]const XrWorldMeshBufferSizeML, [*c]XrWorldMeshBufferML) callconv(.c) XrResult;
pub const PFN_xrFreeWorldMeshBufferML = ?*const fn (XrWorldMeshDetectorML, [*c]const XrWorldMeshBufferML) callconv(.c) XrResult;
pub const PFN_xrRequestWorldMeshAsyncML = ?*const fn (XrWorldMeshDetectorML, [*c]const XrWorldMeshGetInfoML, [*c]XrWorldMeshBufferML, [*c]XrFutureEXT) callconv(.c) XrResult;
pub const PFN_xrRequestWorldMeshCompleteML = ?*const fn (XrWorldMeshDetectorML, [*c]const XrWorldMeshRequestCompletionInfoML, XrFutureEXT, [*c]XrWorldMeshRequestCompletionML) callconv(.c) XrResult;
pub const struct_XrFacialExpressionClientML_T = opaque {};
pub const XrFacialExpressionClientML = ?*struct_XrFacialExpressionClientML_T;
pub const XR_FACIAL_BLEND_SHAPE_BROW_LOWERER_L_ML: c_int = 0;
pub const XR_FACIAL_BLEND_SHAPE_BROW_LOWERER_R_ML: c_int = 1;
pub const XR_FACIAL_BLEND_SHAPE_CHEEK_RAISER_L_ML: c_int = 2;
pub const XR_FACIAL_BLEND_SHAPE_CHEEK_RAISER_R_ML: c_int = 3;
pub const XR_FACIAL_BLEND_SHAPE_CHIN_RAISER_ML: c_int = 4;
pub const XR_FACIAL_BLEND_SHAPE_DIMPLER_L_ML: c_int = 5;
pub const XR_FACIAL_BLEND_SHAPE_DIMPLER_R_ML: c_int = 6;
pub const XR_FACIAL_BLEND_SHAPE_EYES_CLOSED_L_ML: c_int = 7;
pub const XR_FACIAL_BLEND_SHAPE_EYES_CLOSED_R_ML: c_int = 8;
pub const XR_FACIAL_BLEND_SHAPE_INNER_BROW_RAISER_L_ML: c_int = 9;
pub const XR_FACIAL_BLEND_SHAPE_INNER_BROW_RAISER_R_ML: c_int = 10;
pub const XR_FACIAL_BLEND_SHAPE_JAW_DROP_ML: c_int = 11;
pub const XR_FACIAL_BLEND_SHAPE_LID_TIGHTENER_L_ML: c_int = 12;
pub const XR_FACIAL_BLEND_SHAPE_LID_TIGHTENER_R_ML: c_int = 13;
pub const XR_FACIAL_BLEND_SHAPE_LIP_CORNER_DEPRESSOR_L_ML: c_int = 14;
pub const XR_FACIAL_BLEND_SHAPE_LIP_CORNER_DEPRESSOR_R_ML: c_int = 15;
pub const XR_FACIAL_BLEND_SHAPE_LIP_CORNER_PULLER_L_ML: c_int = 16;
pub const XR_FACIAL_BLEND_SHAPE_LIP_CORNER_PULLER_R_ML: c_int = 17;
pub const XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_LB_ML: c_int = 18;
pub const XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_LT_ML: c_int = 19;
pub const XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_RB_ML: c_int = 20;
pub const XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_RT_ML: c_int = 21;
pub const XR_FACIAL_BLEND_SHAPE_LIP_PRESSOR_L_ML: c_int = 22;
pub const XR_FACIAL_BLEND_SHAPE_LIP_PRESSOR_R_ML: c_int = 23;
pub const XR_FACIAL_BLEND_SHAPE_LIP_PUCKER_L_ML: c_int = 24;
pub const XR_FACIAL_BLEND_SHAPE_LIP_PUCKER_R_ML: c_int = 25;
pub const XR_FACIAL_BLEND_SHAPE_LIP_STRETCHER_L_ML: c_int = 26;
pub const XR_FACIAL_BLEND_SHAPE_LIP_STRETCHER_R_ML: c_int = 27;
pub const XR_FACIAL_BLEND_SHAPE_LIP_SUCK_LB_ML: c_int = 28;
pub const XR_FACIAL_BLEND_SHAPE_LIP_SUCK_LT_ML: c_int = 29;
pub const XR_FACIAL_BLEND_SHAPE_LIP_SUCK_RB_ML: c_int = 30;
pub const XR_FACIAL_BLEND_SHAPE_LIP_SUCK_RT_ML: c_int = 31;
pub const XR_FACIAL_BLEND_SHAPE_LIP_TIGHTENER_L_ML: c_int = 32;
pub const XR_FACIAL_BLEND_SHAPE_LIP_TIGHTENER_R_ML: c_int = 33;
pub const XR_FACIAL_BLEND_SHAPE_LIPS_TOWARD_ML: c_int = 34;
pub const XR_FACIAL_BLEND_SHAPE_LOWER_LIP_DEPRESSOR_L_ML: c_int = 35;
pub const XR_FACIAL_BLEND_SHAPE_LOWER_LIP_DEPRESSOR_R_ML: c_int = 36;
pub const XR_FACIAL_BLEND_SHAPE_NOSE_WRINKLER_L_ML: c_int = 37;
pub const XR_FACIAL_BLEND_SHAPE_NOSE_WRINKLER_R_ML: c_int = 38;
pub const XR_FACIAL_BLEND_SHAPE_OUTER_BROW_RAISER_L_ML: c_int = 39;
pub const XR_FACIAL_BLEND_SHAPE_OUTER_BROW_RAISER_R_ML: c_int = 40;
pub const XR_FACIAL_BLEND_SHAPE_UPPER_LID_RAISER_L_ML: c_int = 41;
pub const XR_FACIAL_BLEND_SHAPE_UPPER_LID_RAISER_R_ML: c_int = 42;
pub const XR_FACIAL_BLEND_SHAPE_UPPER_LIP_RAISER_L_ML: c_int = 43;
pub const XR_FACIAL_BLEND_SHAPE_UPPER_LIP_RAISER_R_ML: c_int = 44;
pub const XR_FACIAL_BLEND_SHAPE_TONGUE_OUT_ML: c_int = 45;
pub const XR_FACIAL_BLEND_SHAPE_MAX_ENUM_ML: c_int = 2147483647;
pub const enum_XrFacialBlendShapeML = c_uint;
pub const XrFacialBlendShapeML = enum_XrFacialBlendShapeML;
pub const XrFacialExpressionBlendShapePropertiesFlagsML = XrFlags64;
pub const XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_VALID_BIT_ML: XrFacialExpressionBlendShapePropertiesFlagsML = 1;
pub const XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_TRACKED_BIT_ML: XrFacialExpressionBlendShapePropertiesFlagsML = 2;
pub const struct_XrSystemFacialExpressionPropertiesML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsFacialExpression: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemFacialExpressionPropertiesML = struct_XrSystemFacialExpressionPropertiesML;
pub const struct_XrFacialExpressionClientCreateInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestedCount: u32 = @import("std").mem.zeroes(u32),
    requestedFacialBlendShapes: [*c]const XrFacialBlendShapeML = @import("std").mem.zeroes([*c]const XrFacialBlendShapeML),
};
pub const XrFacialExpressionClientCreateInfoML = struct_XrFacialExpressionClientCreateInfoML;
pub const struct_XrFacialExpressionBlendShapeGetInfoML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrFacialExpressionBlendShapeGetInfoML = struct_XrFacialExpressionBlendShapeGetInfoML;
pub const struct_XrFacialExpressionBlendShapePropertiesML = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    requestedFacialBlendShape: XrFacialBlendShapeML = @import("std").mem.zeroes(XrFacialBlendShapeML),
    weight: f32 = @import("std").mem.zeroes(f32),
    flags: XrFacialExpressionBlendShapePropertiesFlagsML = @import("std").mem.zeroes(XrFacialExpressionBlendShapePropertiesFlagsML),
    time: XrTime = @import("std").mem.zeroes(XrTime),
};
pub const XrFacialExpressionBlendShapePropertiesML = struct_XrFacialExpressionBlendShapePropertiesML;
pub const PFN_xrCreateFacialExpressionClientML = ?*const fn (XrSession, [*c]const XrFacialExpressionClientCreateInfoML, [*c]XrFacialExpressionClientML) callconv(.c) XrResult;
pub const PFN_xrDestroyFacialExpressionClientML = ?*const fn (XrFacialExpressionClientML) callconv(.c) XrResult;
pub const PFN_xrGetFacialExpressionBlendShapePropertiesML = ?*const fn (XrFacialExpressionClientML, [*c]const XrFacialExpressionBlendShapeGetInfoML, u32, [*c]XrFacialExpressionBlendShapePropertiesML) callconv(.c) XrResult;
pub const struct_XrColocationDiscoveryStartInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrColocationDiscoveryStartInfoMETA = struct_XrColocationDiscoveryStartInfoMETA;
pub const struct_XrColocationDiscoveryStopInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrColocationDiscoveryStopInfoMETA = struct_XrColocationDiscoveryStopInfoMETA;
pub const struct_XrColocationAdvertisementStartInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferSize: u32 = @import("std").mem.zeroes(u32),
    buffer: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const XrColocationAdvertisementStartInfoMETA = struct_XrColocationAdvertisementStartInfoMETA;
pub const struct_XrColocationAdvertisementStopInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const XrColocationAdvertisementStopInfoMETA = struct_XrColocationAdvertisementStopInfoMETA;
pub const struct_XrEventDataStartColocationAdvertisementCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    advertisementRequestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
    advertisementUuid: XrUuid = @import("std").mem.zeroes(XrUuid),
};
pub const XrEventDataStartColocationAdvertisementCompleteMETA = struct_XrEventDataStartColocationAdvertisementCompleteMETA;
pub const struct_XrEventDataStopColocationAdvertisementCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataStopColocationAdvertisementCompleteMETA = struct_XrEventDataStopColocationAdvertisementCompleteMETA;
pub const struct_XrEventDataColocationAdvertisementCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    advertisementRequestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataColocationAdvertisementCompleteMETA = struct_XrEventDataColocationAdvertisementCompleteMETA;
pub const struct_XrEventDataStartColocationDiscoveryCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    discoveryRequestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataStartColocationDiscoveryCompleteMETA = struct_XrEventDataStartColocationDiscoveryCompleteMETA;
pub const struct_XrEventDataColocationDiscoveryResultMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    discoveryRequestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    advertisementUuid: XrUuid = @import("std").mem.zeroes(XrUuid),
    bufferSize: u32 = @import("std").mem.zeroes(u32),
    buffer: [1024]u8 = @import("std").mem.zeroes([1024]u8),
};
pub const XrEventDataColocationDiscoveryResultMETA = struct_XrEventDataColocationDiscoveryResultMETA;
pub const struct_XrEventDataColocationDiscoveryCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    discoveryRequestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataColocationDiscoveryCompleteMETA = struct_XrEventDataColocationDiscoveryCompleteMETA;
pub const struct_XrEventDataStopColocationDiscoveryCompleteMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    requestId: XrAsyncRequestIdFB = @import("std").mem.zeroes(XrAsyncRequestIdFB),
    result: XrResult = @import("std").mem.zeroes(XrResult),
};
pub const XrEventDataStopColocationDiscoveryCompleteMETA = struct_XrEventDataStopColocationDiscoveryCompleteMETA;
pub const struct_XrSystemColocationDiscoveryPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsColocationDiscovery: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemColocationDiscoveryPropertiesMETA = struct_XrSystemColocationDiscoveryPropertiesMETA;
pub const PFN_xrStartColocationDiscoveryMETA = ?*const fn (XrSession, [*c]const XrColocationDiscoveryStartInfoMETA, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrStopColocationDiscoveryMETA = ?*const fn (XrSession, [*c]const XrColocationDiscoveryStopInfoMETA, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrStartColocationAdvertisementMETA = ?*const fn (XrSession, [*c]const XrColocationAdvertisementStartInfoMETA, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const PFN_xrStopColocationAdvertisementMETA = ?*const fn (XrSession, [*c]const XrColocationAdvertisementStopInfoMETA, [*c]XrAsyncRequestIdFB) callconv(.c) XrResult;
pub const struct_XrSystemSpatialEntityGroupSharingPropertiesMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsSpatialEntityGroupSharing: XrBool32 = @import("std").mem.zeroes(XrBool32),
};
pub const XrSystemSpatialEntityGroupSharingPropertiesMETA = struct_XrSystemSpatialEntityGroupSharingPropertiesMETA;
pub const struct_XrShareSpacesRecipientGroupsMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    groups: [*c]XrUuid = @import("std").mem.zeroes([*c]XrUuid),
};
pub const XrShareSpacesRecipientGroupsMETA = struct_XrShareSpacesRecipientGroupsMETA;
pub const struct_XrSpaceGroupUuidFilterInfoMETA = extern struct {
    type: XrStructureType = @import("std").mem.zeroes(XrStructureType),
    next: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    groupUuid: XrUuid = @import("std").mem.zeroes(XrUuid),
};
pub const XrSpaceGroupUuidFilterInfoMETA = struct_XrSpaceGroupUuidFilterInfoMETA;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 20);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 2);
pub const __clang_version__ = "20.1.2 (https://github.com/ziglang/zig-bootstrap de424301411b3a34a8a908d8dca01a1d29f2c6df)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 20.1.2 (https://github.com/ziglang/zig-bootstrap de424301411b3a34a8a908d8dca01a1d29f2c6df)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 1);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):102:9
pub const __UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub inline fn __INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub inline fn __INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub inline fn __INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):207:9
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub inline fn __UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub inline fn __UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):232:9
pub const __UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):241:9
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):375:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):376:9
pub const __znver3 = @as(c_int, 1);
pub const __znver3__ = @as(c_int, 1);
pub const __tune_znver3__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __WBNOINVD__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const __GLIBC_MINOR__ = @as(c_int, 41);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const OPENXR_H_ = @as(c_int, 1);
pub const XR_VERSION_1_0 = @as(c_int, 1);
pub const OPENXR_PLATFORM_DEFINES_H_ = @as(c_int, 1);
pub const XRAPI_ATTR = "";
pub const XRAPI_CALL = "";
pub const XRAPI_PTR = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/lib/zig/lib/include/__stddef_offsetof.h:16:9
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:191:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2Y = @as(c_int, 0);
pub const __GLIBC_USE_ISOC23 = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_TIME_BITS64 = @as(c_int, 1);
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const __GLIBC_USE_C23_STRTOL = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:82:11
pub const __COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /usr/include/sys/cdefs.h:102:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/sys/cdefs.h:131:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/sys/cdefs.h:132:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub const __attribute_overloadable__ = @compileError("unable to translate macro: undefined identifier `__overloadable__`");
// /usr/include/sys/cdefs.h:151:10
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:370:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/sys/cdefs.h:371:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/sys/cdefs.h:379:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:410:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:417:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:419:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/sys/cdefs.h:422:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __REDIRECT_FORTIFY = __REDIRECT;
pub const __REDIRECT_FORTIFY_NTH = __REDIRECT_NTH;
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/sys/cdefs.h:452:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:463:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/sys/cdefs.h:469:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/sys/cdefs.h:479:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/sys/cdefs.h:486:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/sys/cdefs.h:492:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/sys/cdefs.h:501:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/sys/cdefs.h:502:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:510:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:520:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/sys/cdefs.h:533:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/sys/cdefs.h:543:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/sys/cdefs.h:555:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/sys/cdefs.h:568:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/sys/cdefs.h:577:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/sys/cdefs.h:595:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/sys/cdefs.h:604:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:622:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:623:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/sys/cdefs.h:666:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:715:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:792:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:793:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/sys/cdefs.h:807:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/sys/cdefs.h:808:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:853:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:854:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:855:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:865:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/sys/cdefs.h:872:10
pub const __attribute_struct_may_alias__ = @compileError("unable to translate macro: undefined identifier `__may_alias__`");
// /usr/include/sys/cdefs.h:881:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const _BITS_STDINT_LEAST_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const XR_PTR_SIZE = @as(c_int, 8);
pub const XR_COMPILER_HAS_FEATURE = @compileError("unable to translate macro: undefined identifier `__has_feature`");
// /usr/include/openxr/openxr_platform_defines.h:77:9
pub const XR_CPP_NULLPTR_SUPPORTED = @as(c_int, 0);
pub inline fn XR_MAKE_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf((((major & @as(c_ulonglong, 0xffff)) << @as(c_int, 48)) | ((minor & @as(c_ulonglong, 0xffff)) << @as(c_int, 32))) | (patch & @as(c_ulonglong, 0xffffffff))) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return (((major & @as(c_ulonglong, 0xffff)) << @as(c_int, 48)) | ((minor & @as(c_ulonglong, 0xffff)) << @as(c_int, 32))) | (patch & @as(c_ulonglong, 0xffffffff));
}
pub const XR_CURRENT_API_VERSION = XR_MAKE_VERSION(@as(c_int, 1), @as(c_int, 1), @as(c_int, 43));
pub const XR_API_VERSION_1_0 = XR_MAKE_VERSION(@as(c_int, 1), @as(c_int, 0), XR_VERSION_PATCH(XR_CURRENT_API_VERSION));
pub inline fn XR_VERSION_MAJOR(version: anytype) u16 {
    _ = &version;
    return @import("std").zig.c_translation.cast(u16, (@import("std").zig.c_translation.cast(u64, version) >> @as(c_int, 48)) & @as(c_ulonglong, 0xffff));
}
pub inline fn XR_VERSION_MINOR(version: anytype) u16 {
    _ = &version;
    return @import("std").zig.c_translation.cast(u16, (@import("std").zig.c_translation.cast(u64, version) >> @as(c_int, 32)) & @as(c_ulonglong, 0xffff));
}
pub inline fn XR_VERSION_PATCH(version: anytype) u32 {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(u64, version) & @as(c_ulonglong, 0xffffffff));
}
pub const XR_MIN_COMPOSITION_LAYERS_SUPPORTED = @as(c_int, 16);
pub const XR_NULL_HANDLE = @as(c_int, 0);
pub const XR_NULL_SYSTEM_ID = @as(c_int, 0);
pub const XR_NULL_PATH = @as(c_int, 0);
pub inline fn XR_SUCCEEDED(result: anytype) @TypeOf(result >= @as(c_int, 0)) {
    _ = &result;
    return result >= @as(c_int, 0);
}
pub inline fn XR_FAILED(result: anytype) @TypeOf(result < @as(c_int, 0)) {
    _ = &result;
    return result < @as(c_int, 0);
}
pub inline fn XR_UNQUALIFIED_SUCCESS(result: anytype) @TypeOf(result == @as(c_int, 0)) {
    _ = &result;
    return result == @as(c_int, 0);
}
pub const XR_NO_DURATION = @as(c_int, 0);
pub const XR_INFINITE_DURATION = @as(c_longlong, 0x7fffffffffffffff);
pub const XR_MIN_HAPTIC_DURATION = -@as(c_int, 1);
pub const XR_FREQUENCY_UNSPECIFIED = @as(c_int, 0);
pub const XR_MAX_EVENT_DATA_SIZE = @import("std").zig.c_translation.sizeof(XrEventDataBuffer);
pub const XR_EXTENSION_ENUM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000000, .decimal);
pub const XR_EXTENSION_ENUM_STRIDE = @as(c_int, 1000);
pub const XR_MAY_ALIAS = @compileError("unable to translate macro: undefined identifier `__may_alias__`");
// /usr/include/openxr/openxr.h:88:9
pub const XR_DEFINE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/openxr/openxr.h:97:13
pub const XR_DEFINE_OPAQUE_64 = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/openxr/openxr.h:106:17
pub const XR_DEFINE_ATOM = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/openxr/openxr.h:114:13
pub const XR_TRUE = @as(c_int, 1);
pub const XR_FALSE = @as(c_int, 0);
pub const XR_MAX_EXTENSION_NAME_SIZE = @as(c_int, 128);
pub const XR_MAX_API_LAYER_NAME_SIZE = @as(c_int, 256);
pub const XR_MAX_API_LAYER_DESCRIPTION_SIZE = @as(c_int, 256);
pub const XR_MAX_SYSTEM_NAME_SIZE = @as(c_int, 256);
pub const XR_MAX_APPLICATION_NAME_SIZE = @as(c_int, 128);
pub const XR_MAX_ENGINE_NAME_SIZE = @as(c_int, 128);
pub const XR_MAX_RUNTIME_NAME_SIZE = @as(c_int, 128);
pub const XR_MAX_PATH_LENGTH = @as(c_int, 256);
pub const XR_MAX_STRUCTURE_NAME_SIZE = @as(c_int, 64);
pub const XR_MAX_RESULT_STRING_SIZE = @as(c_int, 64);
pub const XR_MAX_ACTION_SET_NAME_SIZE = @as(c_int, 64);
pub const XR_MAX_LOCALIZED_ACTION_SET_NAME_SIZE = @as(c_int, 128);
pub const XR_MAX_ACTION_NAME_SIZE = @as(c_int, 64);
pub const XR_MAX_LOCALIZED_ACTION_NAME_SIZE = @as(c_int, 128);
pub const XR_VERSION_1_1 = @as(c_int, 1);
pub const XR_API_VERSION_1_1 = XR_MAKE_VERSION(@as(c_int, 1), @as(c_int, 1), XR_VERSION_PATCH(XR_CURRENT_API_VERSION));
pub const XR_UUID_SIZE = @as(c_int, 16);
pub const XR_KHR_composition_layer_cube = @as(c_int, 1);
pub const XR_KHR_composition_layer_cube_SPEC_VERSION = @as(c_int, 8);
pub const XR_KHR_COMPOSITION_LAYER_CUBE_EXTENSION_NAME = "XR_KHR_composition_layer_cube";
pub const XR_KHR_composition_layer_depth = @as(c_int, 1);
pub const XR_KHR_composition_layer_depth_SPEC_VERSION = @as(c_int, 6);
pub const XR_KHR_COMPOSITION_LAYER_DEPTH_EXTENSION_NAME = "XR_KHR_composition_layer_depth";
pub const XR_KHR_composition_layer_cylinder = @as(c_int, 1);
pub const XR_KHR_composition_layer_cylinder_SPEC_VERSION = @as(c_int, 4);
pub const XR_KHR_COMPOSITION_LAYER_CYLINDER_EXTENSION_NAME = "XR_KHR_composition_layer_cylinder";
pub const XR_KHR_composition_layer_equirect = @as(c_int, 1);
pub const XR_KHR_composition_layer_equirect_SPEC_VERSION = @as(c_int, 3);
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT_EXTENSION_NAME = "XR_KHR_composition_layer_equirect";
pub const XR_KHR_visibility_mask = @as(c_int, 1);
pub const XR_KHR_visibility_mask_SPEC_VERSION = @as(c_int, 2);
pub const XR_KHR_VISIBILITY_MASK_EXTENSION_NAME = "XR_KHR_visibility_mask";
pub const XR_KHR_composition_layer_color_scale_bias = @as(c_int, 1);
pub const XR_KHR_composition_layer_color_scale_bias_SPEC_VERSION = @as(c_int, 5);
pub const XR_KHR_COMPOSITION_LAYER_COLOR_SCALE_BIAS_EXTENSION_NAME = "XR_KHR_composition_layer_color_scale_bias";
pub const XR_KHR_loader_init = @as(c_int, 1);
pub const XR_KHR_loader_init_SPEC_VERSION = @as(c_int, 2);
pub const XR_KHR_LOADER_INIT_EXTENSION_NAME = "XR_KHR_loader_init";
pub const XR_KHR_composition_layer_equirect2 = @as(c_int, 1);
pub const XR_KHR_composition_layer_equirect2_SPEC_VERSION = @as(c_int, 1);
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT2_EXTENSION_NAME = "XR_KHR_composition_layer_equirect2";
pub const XR_KHR_binding_modification = @as(c_int, 1);
pub const XR_KHR_binding_modification_SPEC_VERSION = @as(c_int, 1);
pub const XR_KHR_BINDING_MODIFICATION_EXTENSION_NAME = "XR_KHR_binding_modification";
pub const XR_KHR_swapchain_usage_input_attachment_bit = @as(c_int, 1);
pub const XR_KHR_swapchain_usage_input_attachment_bit_SPEC_VERSION = @as(c_int, 3);
pub const XR_KHR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME = "XR_KHR_swapchain_usage_input_attachment_bit";
pub const XR_KHR_locate_spaces = @as(c_int, 1);
pub const XR_KHR_locate_spaces_SPEC_VERSION = @as(c_int, 1);
pub const XR_KHR_LOCATE_SPACES_EXTENSION_NAME = "XR_KHR_locate_spaces";
pub const XR_KHR_maintenance1 = @as(c_int, 1);
pub const XR_KHR_maintenance1_SPEC_VERSION = @as(c_int, 1);
pub const XR_KHR_MAINTENANCE1_EXTENSION_NAME = "XR_KHR_maintenance1";
pub const XR_EXT_performance_settings = @as(c_int, 1);
pub const XR_EXT_performance_settings_SPEC_VERSION = @as(c_int, 4);
pub const XR_EXT_PERFORMANCE_SETTINGS_EXTENSION_NAME = "XR_EXT_performance_settings";
pub const XR_EXT_thermal_query = @as(c_int, 1);
pub const XR_EXT_thermal_query_SPEC_VERSION = @as(c_int, 2);
pub const XR_EXT_THERMAL_QUERY_EXTENSION_NAME = "XR_EXT_thermal_query";
pub const XR_EXT_debug_utils = @as(c_int, 1);
pub const XR_EXT_debug_utils_SPEC_VERSION = @as(c_int, 5);
pub const XR_EXT_DEBUG_UTILS_EXTENSION_NAME = "XR_EXT_debug_utils";
pub const XR_EXT_eye_gaze_interaction = @as(c_int, 1);
pub const XR_EXT_eye_gaze_interaction_SPEC_VERSION = @as(c_int, 2);
pub const XR_EXT_EYE_GAZE_INTERACTION_EXTENSION_NAME = "XR_EXT_eye_gaze_interaction";
pub const XR_EXTX_overlay = @as(c_int, 1);
pub const XR_EXTX_overlay_SPEC_VERSION = @as(c_int, 5);
pub const XR_EXTX_OVERLAY_EXTENSION_NAME = "XR_EXTX_overlay";
pub const XR_VARJO_quad_views = @as(c_int, 1);
pub const XR_VARJO_quad_views_SPEC_VERSION = @as(c_int, 2);
pub const XR_VARJO_QUAD_VIEWS_EXTENSION_NAME = "XR_VARJO_quad_views";
pub const XR_MSFT_unbounded_reference_space = @as(c_int, 1);
pub const XR_MSFT_unbounded_reference_space_SPEC_VERSION = @as(c_int, 1);
pub const XR_MSFT_UNBOUNDED_REFERENCE_SPACE_EXTENSION_NAME = "XR_MSFT_unbounded_reference_space";
pub const XR_MSFT_spatial_anchor = @as(c_int, 1);
pub const XR_MSFT_spatial_anchor_SPEC_VERSION = @as(c_int, 2);
pub const XR_MSFT_SPATIAL_ANCHOR_EXTENSION_NAME = "XR_MSFT_spatial_anchor";
pub const XR_FB_composition_layer_image_layout = @as(c_int, 1);
pub const XR_FB_composition_layer_image_layout_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_COMPOSITION_LAYER_IMAGE_LAYOUT_EXTENSION_NAME = "XR_FB_composition_layer_image_layout";
pub const XR_FB_composition_layer_alpha_blend = @as(c_int, 1);
pub const XR_FB_composition_layer_alpha_blend_SPEC_VERSION = @as(c_int, 3);
pub const XR_FB_COMPOSITION_LAYER_ALPHA_BLEND_EXTENSION_NAME = "XR_FB_composition_layer_alpha_blend";
pub const XR_MND_headless = @as(c_int, 1);
pub const XR_MND_headless_SPEC_VERSION = @as(c_int, 2);
pub const XR_MND_HEADLESS_EXTENSION_NAME = "XR_MND_headless";
pub const XR_OCULUS_android_session_state_enable = @as(c_int, 1);
pub const XR_OCULUS_android_session_state_enable_SPEC_VERSION = @as(c_int, 1);
pub const XR_OCULUS_ANDROID_SESSION_STATE_ENABLE_EXTENSION_NAME = "XR_OCULUS_android_session_state_enable";
pub const XR_EXT_view_configuration_depth_range = @as(c_int, 1);
pub const XR_EXT_view_configuration_depth_range_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_VIEW_CONFIGURATION_DEPTH_RANGE_EXTENSION_NAME = "XR_EXT_view_configuration_depth_range";
pub const XR_EXT_conformance_automation = @as(c_int, 1);
pub const XR_EXT_conformance_automation_SPEC_VERSION = @as(c_int, 3);
pub const XR_EXT_CONFORMANCE_AUTOMATION_EXTENSION_NAME = "XR_EXT_conformance_automation";
pub const XR_MSFT_spatial_graph_bridge = @as(c_int, 1);
pub const XR_GUID_SIZE_MSFT = @as(c_int, 16);
pub const XR_MSFT_spatial_graph_bridge_SPEC_VERSION = @as(c_int, 2);
pub const XR_MSFT_SPATIAL_GRAPH_BRIDGE_EXTENSION_NAME = "XR_MSFT_spatial_graph_bridge";
pub const XR_MSFT_hand_interaction = @as(c_int, 1);
pub const XR_MSFT_hand_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_MSFT_HAND_INTERACTION_EXTENSION_NAME = "XR_MSFT_hand_interaction";
pub const XR_EXT_hand_tracking = @as(c_int, 1);
pub const XR_HAND_JOINT_COUNT_EXT = @as(c_int, 26);
pub const XR_EXT_hand_tracking_SPEC_VERSION = @as(c_int, 4);
pub const XR_EXT_HAND_TRACKING_EXTENSION_NAME = "XR_EXT_hand_tracking";
pub const XR_MSFT_hand_tracking_mesh = @as(c_int, 1);
pub const XR_MSFT_hand_tracking_mesh_SPEC_VERSION = @as(c_int, 4);
pub const XR_MSFT_HAND_TRACKING_MESH_EXTENSION_NAME = "XR_MSFT_hand_tracking_mesh";
pub const XR_MSFT_secondary_view_configuration = @as(c_int, 1);
pub const XR_MSFT_secondary_view_configuration_SPEC_VERSION = @as(c_int, 1);
pub const XR_MSFT_SECONDARY_VIEW_CONFIGURATION_EXTENSION_NAME = "XR_MSFT_secondary_view_configuration";
pub const XR_MSFT_first_person_observer = @as(c_int, 1);
pub const XR_MSFT_first_person_observer_SPEC_VERSION = @as(c_int, 1);
pub const XR_MSFT_FIRST_PERSON_OBSERVER_EXTENSION_NAME = "XR_MSFT_first_person_observer";
pub const XR_MSFT_controller_model = @as(c_int, 1);
pub const XR_NULL_CONTROLLER_MODEL_KEY_MSFT = @as(c_int, 0);
pub const XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT = @as(c_int, 64);
pub const XR_MSFT_controller_model_SPEC_VERSION = @as(c_int, 2);
pub const XR_MSFT_CONTROLLER_MODEL_EXTENSION_NAME = "XR_MSFT_controller_model";
pub const XR_EXT_win32_appcontainer_compatible = @as(c_int, 1);
pub const XR_EXT_win32_appcontainer_compatible_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_WIN32_APPCONTAINER_COMPATIBLE_EXTENSION_NAME = "XR_EXT_win32_appcontainer_compatible";
pub const XR_EPIC_view_configuration_fov = @as(c_int, 1);
pub const XR_EPIC_view_configuration_fov_SPEC_VERSION = @as(c_int, 2);
pub const XR_EPIC_VIEW_CONFIGURATION_FOV_EXTENSION_NAME = "XR_EPIC_view_configuration_fov";
pub const XR_MSFT_composition_layer_reprojection = @as(c_int, 1);
pub const XR_MSFT_composition_layer_reprojection_SPEC_VERSION = @as(c_int, 1);
pub const XR_MSFT_COMPOSITION_LAYER_REPROJECTION_EXTENSION_NAME = "XR_MSFT_composition_layer_reprojection";
pub const XR_HUAWEI_controller_interaction = @as(c_int, 1);
pub const XR_HUAWEI_controller_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_HUAWEI_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_HUAWEI_controller_interaction";
pub const XR_FB_swapchain_update_state = @as(c_int, 1);
pub const XR_FB_swapchain_update_state_SPEC_VERSION = @as(c_int, 3);
pub const XR_FB_SWAPCHAIN_UPDATE_STATE_EXTENSION_NAME = "XR_FB_swapchain_update_state";
pub const XR_FB_composition_layer_secure_content = @as(c_int, 1);
pub const XR_FB_composition_layer_secure_content_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_COMPOSITION_LAYER_SECURE_CONTENT_EXTENSION_NAME = "XR_FB_composition_layer_secure_content";
pub const XR_FB_body_tracking = @as(c_int, 1);
pub const XR_FB_body_tracking_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_BODY_TRACKING_EXTENSION_NAME = "XR_FB_body_tracking";
pub const XR_EXT_dpad_binding = @as(c_int, 1);
pub const XR_EXT_dpad_binding_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_DPAD_BINDING_EXTENSION_NAME = "XR_EXT_dpad_binding";
pub const XR_VALVE_analog_threshold = @as(c_int, 1);
pub const XR_VALVE_analog_threshold_SPEC_VERSION = @as(c_int, 2);
pub const XR_VALVE_ANALOG_THRESHOLD_EXTENSION_NAME = "XR_VALVE_analog_threshold";
pub const XR_EXT_hand_joints_motion_range = @as(c_int, 1);
pub const XR_EXT_hand_joints_motion_range_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_HAND_JOINTS_MOTION_RANGE_EXTENSION_NAME = "XR_EXT_hand_joints_motion_range";
pub const XR_EXT_samsung_odyssey_controller = @as(c_int, 1);
pub const XR_EXT_samsung_odyssey_controller_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_SAMSUNG_ODYSSEY_CONTROLLER_EXTENSION_NAME = "XR_EXT_samsung_odyssey_controller";
pub const XR_EXT_hp_mixed_reality_controller = @as(c_int, 1);
pub const XR_EXT_hp_mixed_reality_controller_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_HP_MIXED_REALITY_CONTROLLER_EXTENSION_NAME = "XR_EXT_hp_mixed_reality_controller";
pub const XR_MND_swapchain_usage_input_attachment_bit = @as(c_int, 1);
pub const XR_MND_swapchain_usage_input_attachment_bit_SPEC_VERSION = @as(c_int, 2);
pub const XR_MND_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME = "XR_MND_swapchain_usage_input_attachment_bit";
pub const XR_MSFT_scene_understanding = @as(c_int, 1);
pub const XR_MSFT_scene_understanding_SPEC_VERSION = @as(c_int, 2);
pub const XR_MSFT_SCENE_UNDERSTANDING_EXTENSION_NAME = "XR_MSFT_scene_understanding";
pub const XR_MSFT_scene_understanding_serialization = @as(c_int, 1);
pub const XR_MSFT_scene_understanding_serialization_SPEC_VERSION = @as(c_int, 2);
pub const XR_MSFT_SCENE_UNDERSTANDING_SERIALIZATION_EXTENSION_NAME = "XR_MSFT_scene_understanding_serialization";
pub const XR_FB_display_refresh_rate = @as(c_int, 1);
pub const XR_FB_display_refresh_rate_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_DISPLAY_REFRESH_RATE_EXTENSION_NAME = "XR_FB_display_refresh_rate";
pub const XR_HTC_vive_cosmos_controller_interaction = @as(c_int, 1);
pub const XR_HTC_vive_cosmos_controller_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_VIVE_COSMOS_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_HTC_vive_cosmos_controller_interaction";
pub const XR_HTCX_vive_tracker_interaction = @as(c_int, 1);
pub const XR_HTCX_vive_tracker_interaction_SPEC_VERSION = @as(c_int, 3);
pub const XR_HTCX_VIVE_TRACKER_INTERACTION_EXTENSION_NAME = "XR_HTCX_vive_tracker_interaction";
pub const XR_HTC_facial_tracking = @as(c_int, 1);
pub const XR_FACIAL_EXPRESSION_EYE_COUNT_HTC = @as(c_int, 14);
pub const XR_FACIAL_EXPRESSION_LIP_COUNT_HTC = @as(c_int, 37);
pub const XR_HTC_facial_tracking_SPEC_VERSION = @as(c_int, 3);
pub const XR_HTC_FACIAL_TRACKING_EXTENSION_NAME = "XR_HTC_facial_tracking";
pub const XR_HTC_vive_focus3_controller_interaction = @as(c_int, 1);
pub const XR_HTC_vive_focus3_controller_interaction_SPEC_VERSION = @as(c_int, 2);
pub const XR_HTC_VIVE_FOCUS3_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_HTC_vive_focus3_controller_interaction";
pub const XR_HTC_hand_interaction = @as(c_int, 1);
pub const XR_HTC_hand_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_HAND_INTERACTION_EXTENSION_NAME = "XR_HTC_hand_interaction";
pub const XR_HTC_vive_wrist_tracker_interaction = @as(c_int, 1);
pub const XR_HTC_vive_wrist_tracker_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_VIVE_WRIST_TRACKER_INTERACTION_EXTENSION_NAME = "XR_HTC_vive_wrist_tracker_interaction";
pub const XR_FB_color_space = @as(c_int, 1);
pub const XR_FB_color_space_SPEC_VERSION = @as(c_int, 3);
pub const XR_FB_COLOR_SPACE_EXTENSION_NAME = "XR_FB_color_space";
pub const XR_FB_hand_tracking_mesh = @as(c_int, 1);
pub const XR_FB_hand_tracking_mesh_SPEC_VERSION = @as(c_int, 3);
pub const XR_FB_HAND_TRACKING_MESH_EXTENSION_NAME = "XR_FB_hand_tracking_mesh";
pub const XR_FB_hand_tracking_aim = @as(c_int, 1);
pub const XR_FB_hand_tracking_aim_SPEC_VERSION = @as(c_int, 2);
pub const XR_FB_HAND_TRACKING_AIM_EXTENSION_NAME = "XR_FB_hand_tracking_aim";
pub const XR_FB_hand_tracking_capsules = @as(c_int, 1);
pub const XR_HAND_TRACKING_CAPSULE_POINT_COUNT_FB = @as(c_int, 2);
pub const XR_HAND_TRACKING_CAPSULE_COUNT_FB = @as(c_int, 19);
pub const XR_FB_hand_tracking_capsules_SPEC_VERSION = @as(c_int, 3);
pub const XR_FB_HAND_TRACKING_CAPSULES_EXTENSION_NAME = "XR_FB_hand_tracking_capsules";
pub const XR_FB_HAND_TRACKING_CAPSULE_POINT_COUNT = XR_HAND_TRACKING_CAPSULE_POINT_COUNT_FB;
pub const XR_FB_HAND_TRACKING_CAPSULE_COUNT = XR_HAND_TRACKING_CAPSULE_COUNT_FB;
pub const XR_FB_spatial_entity = @as(c_int, 1);
pub const XR_FB_spatial_entity_SPEC_VERSION = @as(c_int, 3);
pub const XR_FB_SPATIAL_ENTITY_EXTENSION_NAME = "XR_FB_spatial_entity";
pub const XR_FB_foveation = @as(c_int, 1);
pub const XR_FB_foveation_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_FOVEATION_EXTENSION_NAME = "XR_FB_foveation";
pub const XR_FB_foveation_configuration = @as(c_int, 1);
pub const XR_FB_foveation_configuration_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_FOVEATION_CONFIGURATION_EXTENSION_NAME = "XR_FB_foveation_configuration";
pub const XR_FB_keyboard_tracking = @as(c_int, 1);
pub const XR_MAX_KEYBOARD_TRACKING_NAME_SIZE_FB = @as(c_int, 128);
pub const XR_FB_keyboard_tracking_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_KEYBOARD_TRACKING_EXTENSION_NAME = "XR_FB_keyboard_tracking";
pub const XR_FB_triangle_mesh = @as(c_int, 1);
pub const XR_FB_triangle_mesh_SPEC_VERSION = @as(c_int, 2);
pub const XR_FB_TRIANGLE_MESH_EXTENSION_NAME = "XR_FB_triangle_mesh";
pub const XR_FB_passthrough = @as(c_int, 1);
pub const XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB = @as(c_int, 256);
pub const XR_FB_passthrough_SPEC_VERSION = @as(c_int, 4);
pub const XR_FB_PASSTHROUGH_EXTENSION_NAME = "XR_FB_passthrough";
pub const XR_FB_render_model = @as(c_int, 1);
pub const XR_NULL_RENDER_MODEL_KEY_FB = @as(c_int, 0);
pub const XR_MAX_RENDER_MODEL_NAME_SIZE_FB = @as(c_int, 64);
pub const XR_FB_render_model_SPEC_VERSION = @as(c_int, 4);
pub const XR_FB_RENDER_MODEL_EXTENSION_NAME = "XR_FB_render_model";
pub const XR_VARJO_foveated_rendering = @as(c_int, 1);
pub const XR_VARJO_foveated_rendering_SPEC_VERSION = @as(c_int, 3);
pub const XR_VARJO_FOVEATED_RENDERING_EXTENSION_NAME = "XR_VARJO_foveated_rendering";
pub const XR_VARJO_composition_layer_depth_test = @as(c_int, 1);
pub const XR_VARJO_composition_layer_depth_test_SPEC_VERSION = @as(c_int, 2);
pub const XR_VARJO_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME = "XR_VARJO_composition_layer_depth_test";
pub const XR_VARJO_environment_depth_estimation = @as(c_int, 1);
pub const XR_VARJO_environment_depth_estimation_SPEC_VERSION = @as(c_int, 1);
pub const XR_VARJO_ENVIRONMENT_DEPTH_ESTIMATION_EXTENSION_NAME = "XR_VARJO_environment_depth_estimation";
pub const XR_VARJO_marker_tracking = @as(c_int, 1);
pub const XR_VARJO_marker_tracking_SPEC_VERSION = @as(c_int, 1);
pub const XR_VARJO_MARKER_TRACKING_EXTENSION_NAME = "XR_VARJO_marker_tracking";
pub const XR_VARJO_view_offset = @as(c_int, 1);
pub const XR_VARJO_view_offset_SPEC_VERSION = @as(c_int, 1);
pub const XR_VARJO_VIEW_OFFSET_EXTENSION_NAME = "XR_VARJO_view_offset";
pub const XR_VARJO_xr4_controller_interaction = @as(c_int, 1);
pub const XR_VARJO_xr4_controller_interaction_SPEC_VERSION = @as(c_int, 2);
pub const XR_VARJO_XR4_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_VARJO_xr4_controller_interaction";
pub const XR_ML_ml2_controller_interaction = @as(c_int, 1);
pub const XR_ML_ml2_controller_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_ML2_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_ML_ml2_controller_interaction";
pub const XR_ML_frame_end_info = @as(c_int, 1);
pub const XR_ML_frame_end_info_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_FRAME_END_INFO_EXTENSION_NAME = "XR_ML_frame_end_info";
pub const XR_ML_global_dimmer = @as(c_int, 1);
pub const XR_ML_global_dimmer_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_GLOBAL_DIMMER_EXTENSION_NAME = "XR_ML_global_dimmer";
pub const XR_ML_marker_understanding = @as(c_int, 1);
pub const XR_ML_marker_understanding_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_MARKER_UNDERSTANDING_EXTENSION_NAME = "XR_ML_marker_understanding";
pub const XR_ML_localization_map = @as(c_int, 1);
pub const XR_MAX_LOCALIZATION_MAP_NAME_LENGTH_ML = @as(c_int, 64);
pub const XR_ML_localization_map_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_LOCALIZATION_MAP_EXTENSION_NAME = "XR_ML_localization_map";
pub const XR_ML_spatial_anchors = @as(c_int, 1);
pub const XR_ML_spatial_anchors_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_SPATIAL_ANCHORS_EXTENSION_NAME = "XR_ML_spatial_anchors";
pub const XR_ML_spatial_anchors_storage = @as(c_int, 1);
pub const XR_ML_spatial_anchors_storage_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_SPATIAL_ANCHORS_STORAGE_EXTENSION_NAME = "XR_ML_spatial_anchors_storage";
pub const XR_MSFT_spatial_anchor_persistence = @as(c_int, 1);
pub const XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_MSFT = @as(c_int, 256);
pub const XR_MSFT_spatial_anchor_persistence_SPEC_VERSION = @as(c_int, 2);
pub const XR_MSFT_SPATIAL_ANCHOR_PERSISTENCE_EXTENSION_NAME = "XR_MSFT_spatial_anchor_persistence";
pub const XR_MSFT_scene_marker = @as(c_int, 1);
pub const XR_MSFT_scene_marker_SPEC_VERSION = @as(c_int, 1);
pub const XR_MSFT_SCENE_MARKER_EXTENSION_NAME = "XR_MSFT_scene_marker";
pub const XR_ULTRALEAP_hand_tracking_forearm = @as(c_int, 1);
pub const XR_HAND_FOREARM_JOINT_COUNT_ULTRALEAP = @as(c_int, 27);
pub const XR_ULTRALEAP_hand_tracking_forearm_SPEC_VERSION = @as(c_int, 1);
pub const XR_ULTRALEAP_HAND_TRACKING_FOREARM_EXTENSION_NAME = "XR_ULTRALEAP_hand_tracking_forearm";
pub const XR_FB_spatial_entity_query = @as(c_int, 1);
pub const XR_FB_spatial_entity_query_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_SPATIAL_ENTITY_QUERY_EXTENSION_NAME = "XR_FB_spatial_entity_query";
pub const XR_FB_spatial_entity_storage = @as(c_int, 1);
pub const XR_FB_spatial_entity_storage_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_SPATIAL_ENTITY_STORAGE_EXTENSION_NAME = "XR_FB_spatial_entity_storage";
pub const XR_FB_touch_controller_pro = @as(c_int, 1);
pub const XR_FB_touch_controller_pro_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_TOUCH_CONTROLLER_PRO_EXTENSION_NAME = "XR_FB_touch_controller_pro";
pub const XR_FB_spatial_entity_sharing = @as(c_int, 1);
pub const XR_FB_spatial_entity_sharing_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_SPATIAL_ENTITY_SHARING_EXTENSION_NAME = "XR_FB_spatial_entity_sharing";
pub const XR_FB_space_warp = @as(c_int, 1);
pub const XR_FB_space_warp_SPEC_VERSION = @as(c_int, 2);
pub const XR_FB_SPACE_WARP_EXTENSION_NAME = "XR_FB_space_warp";
pub const XR_FB_haptic_amplitude_envelope = @as(c_int, 1);
pub const XR_MAX_HAPTIC_AMPLITUDE_ENVELOPE_SAMPLES_FB = @as(c_uint, 4000);
pub const XR_FB_haptic_amplitude_envelope_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_HAPTIC_AMPLITUDE_ENVELOPE_EXTENSION_NAME = "XR_FB_haptic_amplitude_envelope";
pub const XR_FB_scene = @as(c_int, 1);
pub const XR_FB_scene_SPEC_VERSION = @as(c_int, 4);
pub const XR_FB_SCENE_EXTENSION_NAME = "XR_FB_scene";
pub const XR_EXT_palm_pose = @as(c_int, 1);
pub const XR_EXT_palm_pose_SPEC_VERSION = @as(c_int, 3);
pub const XR_EXT_PALM_POSE_EXTENSION_NAME = "XR_EXT_palm_pose";
pub const XR_ALMALENCE_digital_lens_control = @as(c_int, 1);
pub const XR_ALMALENCE_digital_lens_control_SPEC_VERSION = @as(c_int, 1);
pub const XR_ALMALENCE_DIGITAL_LENS_CONTROL_EXTENSION_NAME = "XR_ALMALENCE_digital_lens_control";
pub const XR_FB_scene_capture = @as(c_int, 1);
pub const XR_FB_scene_capture_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_SCENE_CAPTURE_EXTENSION_NAME = "XR_FB_scene_capture";
pub const XR_FB_spatial_entity_container = @as(c_int, 1);
pub const XR_FB_spatial_entity_container_SPEC_VERSION = @as(c_int, 2);
pub const XR_FB_SPATIAL_ENTITY_CONTAINER_EXTENSION_NAME = "XR_FB_spatial_entity_container";
pub const XR_META_foveation_eye_tracked = @as(c_int, 1);
pub const XR_FOVEATION_CENTER_SIZE_META = @as(c_int, 2);
pub const XR_META_foveation_eye_tracked_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_FOVEATION_EYE_TRACKED_EXTENSION_NAME = "XR_META_foveation_eye_tracked";
pub const XR_FB_face_tracking = @as(c_int, 1);
pub const XR_FACE_EXPRESSSION_SET_DEFAULT_FB = XR_FACE_EXPRESSION_SET_DEFAULT_FB;
pub const XR_FB_face_tracking_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_FACE_TRACKING_EXTENSION_NAME = "XR_FB_face_tracking";
pub const XR_FB_eye_tracking_social = @as(c_int, 1);
pub const XR_FB_eye_tracking_social_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_EYE_TRACKING_SOCIAL_EXTENSION_NAME = "XR_FB_eye_tracking_social";
pub const XR_FB_passthrough_keyboard_hands = @as(c_int, 1);
pub const XR_FB_passthrough_keyboard_hands_SPEC_VERSION = @as(c_int, 2);
pub const XR_FB_PASSTHROUGH_KEYBOARD_HANDS_EXTENSION_NAME = "XR_FB_passthrough_keyboard_hands";
pub const XR_FB_composition_layer_settings = @as(c_int, 1);
pub const XR_FB_composition_layer_settings_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_COMPOSITION_LAYER_SETTINGS_EXTENSION_NAME = "XR_FB_composition_layer_settings";
pub const XR_FB_touch_controller_proximity = @as(c_int, 1);
pub const XR_FB_touch_controller_proximity_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_TOUCH_CONTROLLER_PROXIMITY_EXTENSION_NAME = "XR_FB_touch_controller_proximity";
pub const XR_FB_haptic_pcm = @as(c_int, 1);
pub const XR_MAX_HAPTIC_PCM_BUFFER_SIZE_FB = @as(c_int, 4000);
pub const XR_FB_haptic_pcm_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_HAPTIC_PCM_EXTENSION_NAME = "XR_FB_haptic_pcm";
pub const XR_FB_composition_layer_depth_test = @as(c_int, 1);
pub const XR_FB_composition_layer_depth_test_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME = "XR_FB_composition_layer_depth_test";
pub const XR_META_local_dimming = @as(c_int, 1);
pub const XR_META_local_dimming_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_LOCAL_DIMMING_EXTENSION_NAME = "XR_META_local_dimming";
pub const XR_META_passthrough_preferences = @as(c_int, 1);
pub const XR_META_passthrough_preferences_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_PASSTHROUGH_PREFERENCES_EXTENSION_NAME = "XR_META_passthrough_preferences";
pub const XR_META_virtual_keyboard = @as(c_int, 1);
pub const XR_MAX_VIRTUAL_KEYBOARD_COMMIT_TEXT_SIZE_META = @as(c_int, 3992);
pub const XR_META_virtual_keyboard_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_VIRTUAL_KEYBOARD_EXTENSION_NAME = "XR_META_virtual_keyboard";
pub const XR_OCULUS_external_camera = @as(c_int, 1);
pub const XR_MAX_EXTERNAL_CAMERA_NAME_SIZE_OCULUS = @as(c_int, 32);
pub const XR_OCULUS_external_camera_SPEC_VERSION = @as(c_int, 1);
pub const XR_OCULUS_EXTERNAL_CAMERA_EXTENSION_NAME = "XR_OCULUS_external_camera";
pub const XR_META_performance_metrics = @as(c_int, 1);
pub const XR_META_performance_metrics_SPEC_VERSION = @as(c_int, 2);
pub const XR_META_PERFORMANCE_METRICS_EXTENSION_NAME = "XR_META_performance_metrics";
pub const XR_FB_spatial_entity_storage_batch = @as(c_int, 1);
pub const XR_FB_spatial_entity_storage_batch_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_SPATIAL_ENTITY_STORAGE_BATCH_EXTENSION_NAME = "XR_FB_spatial_entity_storage_batch";
pub const XR_FB_spatial_entity_user = @as(c_int, 1);
pub const XR_FB_spatial_entity_user_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_SPATIAL_ENTITY_USER_EXTENSION_NAME = "XR_FB_spatial_entity_user";
pub const XR_META_headset_id = @as(c_int, 1);
pub const XR_META_headset_id_SPEC_VERSION = @as(c_int, 2);
pub const XR_META_HEADSET_ID_EXTENSION_NAME = "XR_META_headset_id";
pub const XR_META_recommended_layer_resolution = @as(c_int, 1);
pub const XR_META_recommended_layer_resolution_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_RECOMMENDED_LAYER_RESOLUTION_EXTENSION_NAME = "XR_META_recommended_layer_resolution";
pub const XR_META_passthrough_color_lut = @as(c_int, 1);
pub const XR_META_passthrough_color_lut_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_PASSTHROUGH_COLOR_LUT_EXTENSION_NAME = "XR_META_passthrough_color_lut";
pub const XR_META_spatial_entity_mesh = @as(c_int, 1);
pub const XR_META_spatial_entity_mesh_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_SPATIAL_ENTITY_MESH_EXTENSION_NAME = "XR_META_spatial_entity_mesh";
pub const XR_META_automatic_layer_filter = @as(c_int, 1);
pub const XR_META_automatic_layer_filter_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_AUTOMATIC_LAYER_FILTER_EXTENSION_NAME = "XR_META_automatic_layer_filter";
pub const XR_META_touch_controller_plus = @as(c_int, 1);
pub const XR_META_touch_controller_plus_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_TOUCH_CONTROLLER_PLUS_EXTENSION_NAME = "XR_META_touch_controller_plus";
pub const XR_META_passthrough_layer_resumed_event = @as(c_int, 1);
pub const XR_META_passthrough_layer_resumed_event_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_PASSTHROUGH_LAYER_RESUMED_EVENT_EXTENSION_NAME = "XR_META_passthrough_layer_resumed_event";
pub const XR_FB_face_tracking2 = @as(c_int, 1);
pub const XR_FB_face_tracking2_SPEC_VERSION = @as(c_int, 1);
pub const XR_FB_FACE_TRACKING2_EXTENSION_NAME = "XR_FB_face_tracking2";
pub const XR_META_spatial_entity_sharing = @as(c_int, 1);
pub const XR_META_spatial_entity_sharing_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_SPATIAL_ENTITY_SHARING_EXTENSION_NAME = "XR_META_spatial_entity_sharing";
pub const XR_MAX_SPACES_PER_SHARE_REQUEST_META = @as(c_int, 32);
pub const XR_META_environment_depth = @as(c_int, 1);
pub const XR_META_environment_depth_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_ENVIRONMENT_DEPTH_EXTENSION_NAME = "XR_META_environment_depth";
pub const XR_EXT_uuid = @as(c_int, 1);
pub const XR_EXT_uuid_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_UUID_EXTENSION_NAME = "XR_EXT_uuid";
pub const XR_UUID_SIZE_EXT = @as(c_int, 16);
pub const XR_EXT_hand_interaction = @as(c_int, 1);
pub const XR_EXT_hand_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_HAND_INTERACTION_EXTENSION_NAME = "XR_EXT_hand_interaction";
pub const XR_QCOM_tracking_optimization_settings = @as(c_int, 1);
pub const XR_QCOM_tracking_optimization_settings_SPEC_VERSION = @as(c_int, 1);
pub const XR_QCOM_TRACKING_OPTIMIZATION_SETTINGS_EXTENSION_NAME = "XR_QCOM_tracking_optimization_settings";
pub const XR_HTC_passthrough = @as(c_int, 1);
pub const XR_HTC_passthrough_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_PASSTHROUGH_EXTENSION_NAME = "XR_HTC_passthrough";
pub const XR_HTC_foveation = @as(c_int, 1);
pub const XR_HTC_foveation_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_FOVEATION_EXTENSION_NAME = "XR_HTC_foveation";
pub const XR_HTC_anchor = @as(c_int, 1);
pub const XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_HTC = @as(c_int, 256);
pub const XR_HTC_anchor_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_ANCHOR_EXTENSION_NAME = "XR_HTC_anchor";
pub const XR_HTC_body_tracking = @as(c_int, 1);
pub const XR_BODY_JOINT_COUNT_HTC = @as(c_int, 26);
pub const XR_HTC_body_tracking_SPEC_VERSION = @as(c_int, 1);
pub const XR_HTC_BODY_TRACKING_EXTENSION_NAME = "XR_HTC_body_tracking";
pub const XR_EXT_active_action_set_priority = @as(c_int, 1);
pub const XR_EXT_active_action_set_priority_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_ACTIVE_ACTION_SET_PRIORITY_EXTENSION_NAME = "XR_EXT_active_action_set_priority";
pub const XR_MNDX_force_feedback_curl = @as(c_int, 1);
pub const XR_MNDX_force_feedback_curl_SPEC_VERSION = @as(c_int, 1);
pub const XR_MNDX_FORCE_FEEDBACK_CURL_EXTENSION_NAME = "XR_MNDX_force_feedback_curl";
pub const XR_BD_controller_interaction = @as(c_int, 1);
pub const XR_BD_controller_interaction_SPEC_VERSION = @as(c_int, 2);
pub const XR_BD_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_BD_controller_interaction";
pub const XR_EXT_local_floor = @as(c_int, 1);
pub const XR_EXT_local_floor_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_LOCAL_FLOOR_EXTENSION_NAME = "XR_EXT_local_floor";
pub const XR_EXT_hand_tracking_data_source = @as(c_int, 1);
pub const XR_EXT_hand_tracking_data_source_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_HAND_TRACKING_DATA_SOURCE_EXTENSION_NAME = "XR_EXT_hand_tracking_data_source";
pub const XR_EXT_plane_detection = @as(c_int, 1);
pub const XR_EXT_plane_detection_SPEC_VERSION = @as(c_int, 2);
pub const XR_EXT_PLANE_DETECTION_EXTENSION_NAME = "XR_EXT_plane_detection";
pub const XR_OPPO_controller_interaction = @as(c_int, 1);
pub const XR_OPPO_controller_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_OPPO_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_OPPO_controller_interaction";
pub const XR_EXT_future = @as(c_int, 1);
pub const XR_EXT_future_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_FUTURE_EXTENSION_NAME = "XR_EXT_future";
pub const XR_NULL_FUTURE_EXT = @as(c_int, 0);
pub const XR_EXT_user_presence = @as(c_int, 1);
pub const XR_EXT_user_presence_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_USER_PRESENCE_EXTENSION_NAME = "XR_EXT_user_presence";
pub const XR_ML_user_calibration = @as(c_int, 1);
pub const XR_ML_user_calibration_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_USER_CALIBRATION_EXTENSION_NAME = "XR_ML_user_calibration";
pub const XR_ML_system_notifications = @as(c_int, 1);
pub const XR_ML_system_notifications_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_SYSTEM_NOTIFICATIONS_EXTENSION_NAME = "XR_ML_system_notifications";
pub const XR_ML_world_mesh_detection = @as(c_int, 1);
pub const XR_ML_world_mesh_detection_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_WORLD_MESH_DETECTION_EXTENSION_NAME = "XR_ML_world_mesh_detection";
pub const XR_ML_facial_expression = @as(c_int, 1);
pub const XR_ML_facial_expression_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_FACIAL_EXPRESSION_EXTENSION_NAME = "XR_ML_facial_expression";
pub const XR_ML_view_configuration_depth_range_change = @as(c_int, 1);
pub const XR_ML_view_configuration_depth_range_change_SPEC_VERSION = @as(c_int, 1);
pub const XR_ML_VIEW_CONFIGURATION_DEPTH_RANGE_CHANGE_EXTENSION_NAME = "XR_ML_view_configuration_depth_range_change";
pub const XR_YVR_controller_interaction = @as(c_int, 1);
pub const XR_YVR_controller_interaction_SPEC_VERSION = @as(c_int, 1);
pub const XR_YVR_CONTROLLER_INTERACTION_EXTENSION_NAME = "XR_YVR_controller_interaction";
pub const XR_EXT_composition_layer_inverted_alpha = @as(c_int, 1);
pub const XR_EXT_composition_layer_inverted_alpha_SPEC_VERSION = @as(c_int, 1);
pub const XR_EXT_COMPOSITION_LAYER_INVERTED_ALPHA_EXTENSION_NAME = "XR_EXT_composition_layer_inverted_alpha";
pub const XR_META_colocation_discovery = @as(c_int, 1);
pub const XR_MAX_COLOCATION_DISCOVERY_BUFFER_SIZE_META = @as(c_int, 1024);
pub const XR_META_colocation_discovery_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_COLOCATION_DISCOVERY_EXTENSION_NAME = "XR_META_colocation_discovery";
pub const XR_META_spatial_entity_group_sharing = @as(c_int, 1);
pub const XR_META_spatial_entity_group_sharing_SPEC_VERSION = @as(c_int, 1);
pub const XR_META_SPATIAL_ENTITY_GROUP_SHARING_EXTENSION_NAME = "XR_META_spatial_entity_group_sharing";
pub const OPENXR_PLATFORM_H_ = @as(c_int, 1);
pub const XrInstance_T = struct_XrInstance_T;
pub const XrSession_T = struct_XrSession_T;
pub const XrSpace_T = struct_XrSpace_T;
pub const XrAction_T = struct_XrAction_T;
pub const XrSwapchain_T = struct_XrSwapchain_T;
pub const XrActionSet_T = struct_XrActionSet_T;
pub const XrDebugUtilsMessengerEXT_T = struct_XrDebugUtilsMessengerEXT_T;
pub const XrSpatialAnchorMSFT_T = struct_XrSpatialAnchorMSFT_T;
pub const XrSpatialGraphNodeBindingMSFT_T = struct_XrSpatialGraphNodeBindingMSFT_T;
pub const XrHandTrackerEXT_T = struct_XrHandTrackerEXT_T;
pub const XrBodyTrackerFB_T = struct_XrBodyTrackerFB_T;
pub const XrSceneObserverMSFT_T = struct_XrSceneObserverMSFT_T;
pub const XrSceneMSFT_T = struct_XrSceneMSFT_T;
pub const XrFacialTrackerHTC_T = struct_XrFacialTrackerHTC_T;
pub const XrFoveationProfileFB_T = struct_XrFoveationProfileFB_T;
pub const XrTriangleMeshFB_T = struct_XrTriangleMeshFB_T;
pub const XrPassthroughFB_T = struct_XrPassthroughFB_T;
pub const XrPassthroughLayerFB_T = struct_XrPassthroughLayerFB_T;
pub const XrGeometryInstanceFB_T = struct_XrGeometryInstanceFB_T;
pub const XrMarkerDetectorML_T = struct_XrMarkerDetectorML_T;
pub const XrExportedLocalizationMapML_T = struct_XrExportedLocalizationMapML_T;
pub const XrFutureEXT_T = struct_XrFutureEXT_T;
pub const XrSpatialAnchorsStorageML_T = struct_XrSpatialAnchorsStorageML_T;
pub const XrSpatialAnchorStoreConnectionMSFT_T = struct_XrSpatialAnchorStoreConnectionMSFT_T;
pub const XrSpaceUserFB_T = struct_XrSpaceUserFB_T;
pub const XrFaceTrackerFB_T = struct_XrFaceTrackerFB_T;
pub const XrEyeTrackerFB_T = struct_XrEyeTrackerFB_T;
pub const XrVirtualKeyboardMETA_T = struct_XrVirtualKeyboardMETA_T;
pub const XrPassthroughColorLutMETA_T = struct_XrPassthroughColorLutMETA_T;
pub const XrFaceTracker2FB_T = struct_XrFaceTracker2FB_T;
pub const XrEnvironmentDepthProviderMETA_T = struct_XrEnvironmentDepthProviderMETA_T;
pub const XrEnvironmentDepthSwapchainMETA_T = struct_XrEnvironmentDepthSwapchainMETA_T;
pub const XrPassthroughHTC_T = struct_XrPassthroughHTC_T;
pub const XrBodyTrackerHTC_T = struct_XrBodyTrackerHTC_T;
pub const XrPlaneDetectorEXT_T = struct_XrPlaneDetectorEXT_T;
pub const XrWorldMeshDetectorML_T = struct_XrWorldMeshDetectorML_T;
pub const XrFacialExpressionClientML_T = struct_XrFacialExpressionClientML_T;
